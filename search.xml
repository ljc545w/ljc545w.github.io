<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux调用pb模型并编译为so文件</title>
      <link href="/2021/08/29/Linux%E8%B0%83%E7%94%A8pb%E6%A8%A1%E5%9E%8B%E5%B9%B6%E7%BC%96%E8%AF%91%E4%B8%BAso%E6%96%87%E4%BB%B6/"/>
      <url>/2021/08/29/Linux%E8%B0%83%E7%94%A8pb%E6%A8%A1%E5%9E%8B%E5%B9%B6%E7%BC%96%E8%AF%91%E4%B8%BAso%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文主要使用g++进行编译，介绍相关指令。  </p><h2 id="编译so文件"><a href="#编译so文件" class="headerlink" title="编译so文件"></a>编译so文件</h2><p>需要预先编译安装OpenCV。<br><code>pch.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PCH_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCH_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/types_c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/dnn.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dnn;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用C++时必须添加extern &quot;C&quot;，可通过__cplusplus判断编译环境</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">   <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">predict</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filepath)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">   <span class="function">string <span class="title">cv_predict</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filepath)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">   <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">stringToCharP</span><span class="params">(std::string str)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>pch.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">String modelWeights = <span class="string">&quot;model.pb&quot;</span>;</span><br><span class="line">Net model = <span class="built_in">readNetFromTensorflow</span>(modelWeights);</span><br><span class="line"><span class="keyword">clock_t</span> start_time, end_time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> letter[<span class="number">36</span>] = &#123;</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> region[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">16</span>&#125;,&#123;<span class="number">14</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">46</span>&#125;,&#123;<span class="number">44</span>,<span class="number">60</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">cv_predict</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filepath)</span> </span>&#123;</span><br><span class="line">        Mat img = <span class="built_in">imread</span>(filepath);</span><br><span class="line">        Mat img_split, blob, out;</span><br><span class="line">        string result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> max_location = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> max_value = <span class="number">0.0</span>;</span><br><span class="line">        <span class="built_in">cvtColor</span>(img, img, CV_BGR2GRAY);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) &#123;</span><br><span class="line">                max_location = <span class="number">0</span>;</span><br><span class="line">                max_value = <span class="number">0.0</span>;</span><br><span class="line">                img_split = <span class="built_in">img</span>(<span class="built_in">Rect</span>(region[r][<span class="number">0</span>], <span class="number">0</span>, region[r][<span class="number">1</span>] - region[r][<span class="number">0</span>], <span class="number">25</span>));</span><br><span class="line">                <span class="built_in">resize</span>(img_split, img_split, <span class="built_in">Size</span>(<span class="number">15</span>, <span class="number">25</span>));</span><br><span class="line">                blob = <span class="built_in">blobFromImage</span>(img_split, <span class="number">1.0</span>, <span class="built_in">Size</span>(<span class="number">15</span>, <span class="number">25</span>), <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">                model.<span class="built_in">setInput</span>(blob);</span><br><span class="line">                out = model.forward();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36</span>; i++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (out.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, i) &gt; max_value) &#123;</span><br><span class="line">                                max_value = out.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, i);</span><br><span class="line">                                max_location = i;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                result += letter[max_location];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将string转换为char*，直接返回c_str()会乱码</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">stringToCharP</span><span class="params">(std::string str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>* result = <span class="keyword">new</span> <span class="keyword">char</span>[str.<span class="built_in">length</span>() + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(result, str.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">const</span> <span class="keyword">char</span>*)result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">predict</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filepath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        model.<span class="built_in">setPreferableBackend</span>(DNN_BACKEND_OPENCV);</span><br><span class="line">        model.<span class="built_in">setPreferableTarget</span>(DNN_TARGET_CPU);</span><br><span class="line"></span><br><span class="line">        string result = <span class="built_in">cv_predict</span>(filepath);</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* c_char_p_result = <span class="built_in">stringToCharP</span>(result);</span><br><span class="line">        <span class="keyword">return</span> c_char_p_result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用的函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译指令</strong><br>必须和OpenCV的库文件关联起来。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ pch.cpp -L/usr/local/lib/ -lopencv_imgproc -lopencv_highgui -lopencv_dnn -lopencv_imgcodecs -fPIC -shared -o libmodel.so</span><br></pre></td></tr></table></figure><p>另附一种cmake编译的方法：<br><code>CMakeLists.txt</code>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cmake needs this line</span></span><br><span class="line">cmake_minimum_required(VERSION 3.1)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Define project name</span></span><br><span class="line">project(model)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Find OpenCV, you may need to <span class="built_in">set</span> OpenCV_DIR variable</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to the absolute path to the directory containing OpenCVConfig.cmake file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> via the <span class="built_in">command</span> line or GUI</span></span><br><span class="line">find_package(OpenCV REQUIRED)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> If the package has been found, several variables will</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> be <span class="built_in">set</span>, you can find the full list with descriptions</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span> the OpenCVConfig.cmake file.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Print some message showing some of them</span></span><br><span class="line">message(STATUS &quot;OpenCV library status:&quot;)</span><br><span class="line">message(STATUS &quot;    config: $&#123;OpenCV_DIR&#125;&quot;)</span><br><span class="line">message(STATUS &quot;    version: $&#123;OpenCV_VERSION&#125;&quot;)</span><br><span class="line">message(STATUS &quot;    libraries: $&#123;OpenCV_LIBS&#125;&quot;)</span><br><span class="line">message(STATUS &quot;    include path: $&#123;OpenCV_INCLUDE_DIRS&#125;&quot;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Declare the executable target built from your sources</span></span><br><span class="line">add_library(model SHARED pch.cpp pch.h)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Link your application with OpenCV libraries</span></span><br><span class="line">target_link_libraries(model PRIVATE $&#123;OpenCV_LIBS&#125;)</span><br></pre></td></tr></table></figure><p>cmake指令：<br>将CMakeLists.txt和pch.h、pch.cpp放到同一目录。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake .</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>编译完成后得到libmodel.so。<br>查看动态库依赖关系：<br><code>ldd -r libmodel.so</code><br>如果没有无法解析的符号(引用下VS2019的报错)，说明编译成功。  </p><h2 id="调用库文件"><a href="#调用库文件" class="headerlink" title="调用库文件"></a>调用库文件</h2><p><code>pch.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">predict</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filepath)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>test.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pch.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="built_in">add</span>(<span class="number">123</span>,<span class="number">123</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* b = <span class="built_in">predict</span>(<span class="string">&quot;captcha.png&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译指令</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ test.cpp -L. -lmodel -o test</span><br></pre></td></tr></table></figure><p>编译完成后得到一个二进制文件，类似于Windows的exe，运行指令（记得放一张测试用的验证码，名字修改为captcha.png）：<br><code>./test</code></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cv2调用tensorflow模型</title>
      <link href="/2021/08/27/cv2%E8%B0%83%E7%94%A8tensorflow%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/08/27/cv2%E8%B0%83%E7%94%A8tensorflow%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h2><p>之前从tensorflow的C/C++接口中成功调用了saved_model，回味过程的时候看到opencv中的dnn，可以直接调用训练好的模型，但是这个不是saved_model，而是h5模型转换得到的另一种pb模型。  </p><h2 id="转换代码"><a href="#转换代码" class="headerlink" title="转换代码"></a>转换代码</h2><p>另外会打印输入输出层的名字，使用tensorflow调用转换好的pb模型时会用到，但cv2的dnn就用不到了。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework.convert_to_constants <span class="keyword">import</span> convert_variables_to_constants_v2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h5_to_pb</span>(<span class="params">h5_save_path</span>):</span></span><br><span class="line">    model = tf.keras.models.load_model(h5_save_path, <span class="built_in">compile</span>=<span class="literal">False</span>)</span><br><span class="line">    model.summary()</span><br><span class="line">    full_model = tf.function(<span class="keyword">lambda</span> Input: model(Input))</span><br><span class="line">    full_model = full_model.get_concrete_function(tf.TensorSpec(model.inputs[<span class="number">0</span>].shape, model.inputs[<span class="number">0</span>].dtype))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get frozen ConcreteFunction</span></span><br><span class="line">    frozen_func = convert_variables_to_constants_v2(full_model)</span><br><span class="line">    frozen_func.graph.as_graph_def()</span><br><span class="line"></span><br><span class="line">    layers = [op.name <span class="keyword">for</span> op <span class="keyword">in</span> frozen_func.graph.get_operations()]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Frozen model layers: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> layers:</span><br><span class="line">        <span class="built_in">print</span>(layer)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Frozen model inputs: &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(frozen_func.inputs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Frozen model outputs: &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(frozen_func.outputs)</span><br><span class="line"></span><br><span class="line">    tf.io.write_graph(graph_or_graph_def=frozen_func.graph,</span><br><span class="line">                      logdir=<span class="string">&quot;./pb&quot;</span>,</span><br><span class="line">                      name=<span class="string">&quot;model.pb&quot;</span>,</span><br><span class="line">                      as_text=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">h5_to_pb(<span class="string">&#x27;./model.hdf5&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Python调用"><a href="#Python调用" class="headerlink" title="Python调用"></a>Python调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;labels.dat&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lb = pickle.load(f)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">region = [(<span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">25</span>), (<span class="number">14</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">25</span>), (<span class="number">30</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">25</span>), (<span class="number">44</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">25</span>)]</span><br><span class="line"></span><br><span class="line">true_count,total = <span class="number">0</span>,<span class="number">100</span></span><br><span class="line">captcha_image_files = os.listdir(<span class="string">&#x27;./img&#x27;</span>)</span><br><span class="line">model = cv2.dnn.readNetFromTensorflow(<span class="string">&#x27;model.pb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="keyword">for</span> image_file <span class="keyword">in</span> captcha_image_files:</span><br><span class="line">    </span><br><span class="line">    image = cv2.imread(<span class="string">&#x27;./img/&#x27;</span> + image_file)</span><br><span class="line">    result = image_file.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)</span><br><span class="line">    predictions = []</span><br><span class="line">    <span class="keyword">for</span> reg <span class="keyword">in</span> region:</span><br><span class="line">        letter_image = image[:, reg[<span class="number">0</span>]:reg[<span class="number">2</span>]]</span><br><span class="line">        letter_image = cv2.resize(letter_image,(<span class="number">15</span>,<span class="number">25</span>))</span><br><span class="line">        </span><br><span class="line">        model.setInput(cv2.dnn.blobFromImage(image = letter_image, </span><br><span class="line">                                             scalefactor = <span class="number">1.0</span>,</span><br><span class="line">                                             size=(<span class="number">15</span>, <span class="number">25</span>),</span><br><span class="line">                                             mean=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">                                             swapRB=<span class="literal">True</span>,</span><br><span class="line">                                             crop=<span class="literal">False</span>))</span><br><span class="line">        </span><br><span class="line">        output = model.forward()</span><br><span class="line">        letter = lb.inverse_transform(output)[<span class="number">0</span>]</span><br><span class="line">        predictions.append(letter)</span><br><span class="line">    captcha_text = <span class="string">&#x27;&#x27;</span>.join(predictions)</span><br><span class="line">    <span class="keyword">if</span> captcha_text == result:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;RESULT is: &#123;&#125;, CAPTCHA text is: &#123;&#125;, True&quot;</span>.<span class="built_in">format</span>(result, captcha_text))</span><br><span class="line">        true_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;RESULT is: &#123;&#125;, CAPTCHA text is: &#123;&#125;, False&quot;</span>.<span class="built_in">format</span>(result, captcha_text))</span><br><span class="line"></span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;predict rate: &quot;</span>, true_count / total)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;time: &#123;:.6f&#125;s&#x27;</span>.<span class="built_in">format</span>(end_time - start_time))</span><br></pre></td></tr></table></figure><p>与调用h5、saved_model结果完全一致。  </p><h2 id="C-调用"><a href="#C-调用" class="headerlink" title="C++调用"></a>C++调用</h2><p>需要预先安装（Windows）或编译（Linux）C++版的OpenCV。Windows去官网下载安装，然后将<code>build\x64\vc15\bin</code>目录配置到环境变量。Linux可参考以下文章：<br><a href="https://blog.csdn.net/public669/article/details/99044895" title="ubuntu安装opencv的正确方法">ubuntu安装opencv的正确方法</a><br>注意：使用VS 2019时需要配置包含目录和库目录，并链接opencv_worldxxx.lib（xxx对应版本，如4.5.2就是452，具体看lib目录下的文件）  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/types_c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/dnn.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dnn;</span><br><span class="line"></span><br><span class="line">String modelWeights = <span class="string">&quot;model.pb&quot;</span>;</span><br><span class="line">Net model = <span class="built_in">readNetFromTensorflow</span>(modelWeights);</span><br><span class="line"><span class="keyword">clock_t</span> start_time, end_time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> letter[<span class="number">36</span>] = &#123;</span><br><span class="line"><span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> region[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">16</span>&#125;,&#123;<span class="number">14</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">46</span>&#125;,&#123;<span class="number">44</span>,<span class="number">60</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">cv_predict</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filepath)</span> </span>&#123;</span><br><span class="line">Mat img = <span class="built_in">imread</span>(filepath);</span><br><span class="line">Mat img_split, blob, out;</span><br><span class="line">string result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> max_location = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> max_value = <span class="number">0.0</span>;</span><br><span class="line"><span class="built_in">cvtColor</span>(img, img, CV_BGR2GRAY);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) &#123;</span><br><span class="line">max_location = <span class="number">0</span>;</span><br><span class="line">max_value = <span class="number">0.0</span>;</span><br><span class="line">img_split = <span class="built_in">img</span>(<span class="built_in">Rect</span>(region[r][<span class="number">0</span>], <span class="number">0</span>, region[r][<span class="number">1</span>] - region[r][<span class="number">0</span>], <span class="number">25</span>));</span><br><span class="line"><span class="built_in">resize</span>(img_split, img_split, <span class="built_in">Size</span>(<span class="number">15</span>, <span class="number">25</span>));</span><br><span class="line">blob = <span class="built_in">blobFromImage</span>(img_split, <span class="number">1.0</span> , <span class="built_in">Size</span>(<span class="number">15</span>, <span class="number">25</span>), <span class="built_in">Scalar</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">model.<span class="built_in">setInput</span>(blob);</span><br><span class="line">out = model.forward();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (out.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, i) &gt; max_value) &#123;</span><br><span class="line">max_value = out.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, i);</span><br><span class="line">max_location = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">result += letter[max_location];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> nargv, <span class="keyword">const</span> <span class="keyword">char</span>* argvs[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">model.<span class="built_in">setPreferableBackend</span>(DNN_BACKEND_OPENCV);</span><br><span class="line">model.<span class="built_in">setPreferableTarget</span>(DNN_TARGET_CPU);</span><br><span class="line">    <span class="comment">// 单张预测</span></span><br><span class="line"><span class="keyword">if</span> (nargv &gt; <span class="number">1</span>) &#123;</span><br><span class="line">string result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">result = <span class="built_in">cv_predict</span>(argvs[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* test = result.<span class="built_in">c_str</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, test);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 验证识别率</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">start_time = <span class="built_in">clock</span>();</span><br><span class="line"><span class="keyword">int</span> true_count = <span class="number">0</span>;</span><br><span class="line">std::string inPath = <span class="string">&quot;img\\*.png&quot;</span>;</span><br><span class="line"><span class="keyword">intptr_t</span> handle;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">finddata_t</span> <span class="title">fileinfo</span>;</span></span><br><span class="line">handle = _findfirst(inPath.<span class="built_in">c_str</span>(), &amp;fileinfo);</span><br><span class="line"><span class="keyword">if</span> (handle == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">string filepath = <span class="string">&quot;img/&quot;</span> + (string)fileinfo.name;</span><br><span class="line">string result = <span class="built_in">cv_predict</span>(filepath.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;RESULT is: %s, CAPTCHA text is: %s, &quot;</span>, result.<span class="built_in">c_str</span>(), fileinfo.name);</span><br><span class="line"><span class="keyword">if</span> (filepath.<span class="built_in">find</span>(result) != filepath.npos) &#123;</span><br><span class="line">true_count += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;True\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;False\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (!_findnext(handle, &amp;fileinfo));</span><br><span class="line"></span><br><span class="line">_findclose(handle);</span><br><span class="line">end_time = <span class="built_in">clock</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;predict rate: %f\n&quot;</span>, (<span class="keyword">float</span>)true_count / <span class="number">100.0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;time: %fs\n&quot;</span>, (<span class="keyword">float</span>)(end_time - start_time) / CLOCKS_PER_SEC);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资源整理"><a href="#资源整理" class="headerlink" title="资源整理"></a>资源整理</h2><p>相关资源可在另一篇文章中得到。</p>]]></content>
      
      
      <categories>
          
          <category> 技术至上 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好好码字绝不摆烂！</title>
      <link href="/2021/08/25/%E5%A5%BD%E5%A5%BD%E7%A0%81%E5%AD%97%E7%BB%9D%E4%B8%8D%E6%91%86%E7%83%82%EF%BC%81/"/>
      <url>/2021/08/25/%E5%A5%BD%E5%A5%BD%E7%A0%81%E5%AD%97%E7%BB%9D%E4%B8%8D%E6%91%86%E7%83%82%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="如题"><a href="#如题" class="headerlink" title="如题"></a>如题</h2><p><del>定个小目标，八月再写两篇，关于opencv调用tensorflow模型的。</del><br>任务已完成，九月开始摆烂！</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow的CorC++API</title>
      <link href="/2021/08/21/TensorFlow%E7%9A%84CorC++API/"/>
      <url>/2021/08/21/TensorFlow%E7%9A%84CorC++API/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>上篇文章写了用python训练验证码识别模型，精度还是蛮不错的，但是有个问题不知道各位看官有没有注意到，识别100张验证码用了10s，差不多0.1s/张，这个速度，看起来还是挺快的对吧，实话说一开始我也觉得他蛮快的，直到完成了C++的调用，识别100张验证码用了大概0.43s，吼吼，这是什么速度哇。  </p><h2 id="难点分析"><a href="#难点分析" class="headerlink" title="难点分析"></a>难点分析</h2><p>为了实现这个api调用，至少花了我一整个星期的时间，目前网络上多数资料仍停留在tensorflow1.0版本的C++调用，还要下载源码编译出tensorflow.lib和tensorflow.dll，期间会遇到环境、网络等各种各样的问题，对于不经常接触这些的我实在不怎么友好，上次编译Linux内核费了老大劲了…<br>后来发现tensorflow提供了libtensorflow，包括CPU版本和GPU版本，下载后解压得到lib文件和dll文件，以及一些头文件，这就是本篇文章所使用的资源。<br><a href="https://github.com/tensorflow/tensorflow" title="TensorFlow项目地址">TensorFlow项目地址</a><br>获取资源：<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-21%20233556_20210821233612415179.png" alt="libtensorflow" title="libtensorflow">  </p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><code>Windows 10Pro 64位</code><br><code>PyCharm 2021.2 Community</code><br><code>python3.8.5 64位</code><br><code>Visual Studio 2019 Community</code><br><code>OpenCV-4.5.2-vc14_vc15</code>  </p><h2 id="模型处理"><a href="#模型处理" class="headerlink" title="模型处理"></a>模型处理</h2><p>搜索libtensorflow相关资料后得知，它能读取的是savedmodel，之前我们保存的是hdf5文件，所以要做一些处理，这部分用python来完成<br>代码如下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hdf5tosaved</span>():</span></span><br><span class="line">    file_path = <span class="string">&#x27;./model.hdf5&#x27;</span></span><br><span class="line">    model = tf.keras.models.load_model(file_path)</span><br><span class="line">    model.save(<span class="string">&#x27;./saved_model/h5tosaved&#x27;</span>, save_format=<span class="string">&#x27;tf&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hdf5tosaved()</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-21%20234200_20210821234207408340.png" alt="运行结果" title="运行结果"><br>python调用savedmodel：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> imutils</span><br><span class="line"><span class="keyword">from</span> imutils <span class="keyword">import</span> paths</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">region = [(<span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">25</span>), (<span class="number">14</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">25</span>), (<span class="number">30</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">25</span>), (<span class="number">44</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">25</span>)]</span><br><span class="line">MODEL_LABELS_FILENAME = <span class="string">&quot;labels.dat&quot;</span></span><br><span class="line">CAPTCHA_IMAGE_FOLDER = <span class="string">&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line">captcha_image_files = <span class="built_in">list</span>(paths.list_images(CAPTCHA_IMAGE_FOLDER))</span><br><span class="line">captcha_image_files = np.random.choice(captcha_image_files, size=(total,), replace=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">total = <span class="number">100</span></span><br><span class="line">true_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(MODEL_LABELS_FILENAME, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lb = pickle.load(f)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize_to_fit</span>(<span class="params">image, width, height</span>):</span></span><br><span class="line">    (h, w) = image.shape[:<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> w &gt; h:</span><br><span class="line">        image = imutils.resize(image, width=width)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        image = imutils.resize(image, height=height)</span><br><span class="line">    image = cv2.resize(image, (width, height))</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savedmodel_infer</span>(<span class="params">img=<span class="literal">None</span>, model=<span class="literal">None</span></span>):</span></span><br><span class="line">    result = model.predict(img)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">global</span> true_count</span><br><span class="line">    model_path = <span class="string">&quot;saved_model/h5tosaved&quot;</span></span><br><span class="line">    model = tf.keras.models.load_model(model_path)</span><br><span class="line">    <span class="keyword">for</span> image_file <span class="keyword">in</span> captcha_image_files:</span><br><span class="line">        image = cv2.imread(image_file)</span><br><span class="line">        result = image_file.split(<span class="string">&#x27;\\&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">        predictions = []</span><br><span class="line">        <span class="keyword">for</span> reg <span class="keyword">in</span> region:</span><br><span class="line">            letter_image = image[:, reg[<span class="number">0</span>]:reg[<span class="number">2</span>]]</span><br><span class="line">            letter_image = resize_to_fit(letter_image, <span class="number">15</span>, <span class="number">25</span>)</span><br><span class="line">            letter_image = np.expand_dims(letter_image, axis=<span class="number">2</span>)</span><br><span class="line">            letter_image = np.expand_dims(letter_image, axis=<span class="number">0</span>)</span><br><span class="line">            prediction = savedmodel_infer(letter_image,model)</span><br><span class="line">            letter = lb.inverse_transform(prediction)[<span class="number">0</span>]</span><br><span class="line">            predictions.append(letter)</span><br><span class="line">        captcha_text = <span class="string">&quot;&quot;</span>.join(predictions)</span><br><span class="line">        <span class="keyword">if</span> captcha_text == result:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;RESULT is: &#123;&#125;, CAPTCHA text is: &#123;&#125;, True&quot;</span>.<span class="built_in">format</span>(result, captcha_text))</span><br><span class="line">            true_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;RESULT is: &#123;&#125;, CAPTCHA text is: &#123;&#125;, False&quot;</span>.<span class="built_in">format</span>(result, captcha_text))</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;predict rate: &quot;</span>, true_count / total)</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-21%20235456_20210821235505957624.png" alt="saved_model识别结果" title="saved_model识别结果"><br>和hdf5文件的结果完全一致。  </p><h2 id="配置VS2019"><a href="#配置VS2019" class="headerlink" title="配置VS2019"></a>配置VS2019</h2><p>新建C++空项目，右键属性，将opencv和tensorflow的相关路径添加进去<br>添加包含目录：<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-22%20000413_20210822000609745236.png" alt="添加包含目录" title="修改包含目录"><br>添加库目录：<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-22%20000451_20210822000719486498.png" alt="添加库目录" title="添加库目录"><br>ps：不要在意那个2.4.3，截止写文章时，github上面提供的是2.7.0版本，作者使用的也是2.7.0<br>添加链接器：<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-22%20000527_20210822000919188456.png" alt="添加链接器" title="添加链接器"><br>ps：如果使用Debug模式，附加依赖项是opencv_world452d.lib<br>另外，平台只能是x64，x86会报无法解析的外部符号<br>验证代码：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tensorflow/c/c_api.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">version</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This TensorFlow Version is %s.\n&quot;</span>, <span class="built_in">TF_Version</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> nargv,<span class="keyword">const</span> <span class="keyword">char</span>* argvs[])</span> </span>&#123;</span><br><span class="line"><span class="built_in">version</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-22%20001639_20210822001704790177.png" alt="version" title="version">  </p><h2 id="调用模型"><a href="#调用模型" class="headerlink" title="调用模型"></a>调用模型</h2><p>需要先创建一个session，来调用之前转换的saved_model<br>不过创建session之前还有件事情要做，需要获取saved_model的tags、输入输出层等信息，用到的工具是saved_model_cli，这个工具在python的Scripts目录下，cmd中执行如下命令即可：<br><code>saved_model_cli show --dir h52saved --all</code><br>如果报错，请确认Scripts已添加至环境变量且python安装了tensorflow<br>获取到如下信息：<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-22%20003423_20210822003432585387.png"><br>tag-set：serve<br>input：serving_default_conv2d_input:0<br>output: StatefulPartitionedCall:0<br>至此，所有准备工作均已完成。<br>创建session的代码如下：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span> (disable:4190)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tensorflow/c/c_api.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PREDICT_ERROR <span class="meta-string">&#x27;A&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">TF_Graph* graph = <span class="built_in">TF_NewGraph</span>();</span><br><span class="line">TF_Status* status = <span class="built_in">TF_NewStatus</span>();</span><br><span class="line">TF_SessionOptions* session_opts = <span class="built_in">TF_NewSessionOptions</span>();</span><br><span class="line">TF_Buffer* run_opts = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* saved_model_dir = <span class="string">&quot;saved_model/h5tosaved&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* tags = <span class="string">&quot;serve&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> ntags = <span class="number">1</span>;</span><br><span class="line">TF_Session* session;</span><br><span class="line"><span class="comment">// 调用这个函数，就成功创建了session</span></span><br><span class="line">session = <span class="built_in">TF_LoadSessionFromSavedModel</span>(session_opts, run_opts, saved_model_dir, &amp;tags, ntags, graph, <span class="literal">NULL</span>, status);</span><br></pre></td></tr></table></figure><h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><p>c++实现一个分割图片的函数：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">cv::Mat <span class="title">split_img</span><span class="params">(cv::Mat img,<span class="keyword">int</span> shape[])</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建一个指定shape的Mat，所有像素指定为(255,255,255)</span></span><br><span class="line">cv::Mat region_img = cv::<span class="built_in">Mat</span>(cv::<span class="built_in">Size</span>(shape[<span class="number">1</span>]- shape[<span class="number">0</span>],<span class="number">25</span>), CV_8UC3, cv::<span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; img.rows; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = shape[<span class="number">0</span>]; j &lt; shape[<span class="number">1</span>]; j++) &#123;</span><br><span class="line">region_img.at&lt;cv::Vec3b&gt;(i, j - shape[<span class="number">0</span>])[<span class="number">0</span>] = img.at&lt;cv::Vec3b&gt;(i, j)[<span class="number">0</span>];</span><br><span class="line">region_img.at&lt;cv::Vec3b&gt;(i, j - shape[<span class="number">0</span>])[<span class="number">1</span>] = img.at&lt;cv::Vec3b&gt;(i, j)[<span class="number">1</span>];</span><br><span class="line">region_img.at&lt;cv::Vec3b&gt;(i, j - shape[<span class="number">0</span>])[<span class="number">2</span>] = img.at&lt;cv::Vec3b&gt;(i, j)[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> region_img;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的原理跟python差不多，遍历范围内的像素点。<br>至于转灰度和resize可以调用opencv的内置方法：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cvtColor</span>(img_split, img_split, CV_BGR2GRAY);</span><br><span class="line">cv::<span class="built_in">resize</span>(img_split, img_split, cv::<span class="built_in">Size</span>(<span class="number">15</span>, <span class="number">25</span>));</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>感觉拆开来看还是太麻烦了，直接上完整代码吧  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span> (disable:4190)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tensorflow/c/c_api.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/types_c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PREDICT_ERROR <span class="meta-string">&#x27;A&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 初始化TensorFlow</span></span><br><span class="line">TF_Graph* graph = <span class="built_in">TF_NewGraph</span>();</span><br><span class="line">TF_Status* status = <span class="built_in">TF_NewStatus</span>();</span><br><span class="line">TF_SessionOptions* session_opts = <span class="built_in">TF_NewSessionOptions</span>();</span><br><span class="line">TF_Buffer* run_opts = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* saved_model_dir = <span class="string">&quot;saved_model/h5tosaved&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* tags = <span class="string">&quot;serve&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> ntags = <span class="number">1</span>;</span><br><span class="line">TF_Session* session;</span><br><span class="line"><span class="comment">// 记录时间</span></span><br><span class="line"><span class="keyword">clock_t</span> start_time, end_time;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为c++从二值化标签中获取源文本，所以要自定义一个数组</span></span><br><span class="line"><span class="keyword">char</span> letter[<span class="number">36</span>] = &#123;</span><br><span class="line"><span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 分割图片的范围，一个二维数组，两个元素分别代表开始位置和结束位置</span></span><br><span class="line"><span class="keyword">int</span> region[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">16</span>&#125;,&#123;<span class="number">14</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">46</span>&#125;,&#123;<span class="number">44</span>,<span class="number">60</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印tensorflow版本</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">version</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This TensorFlow Version is %s.\n&quot;</span>, <span class="built_in">TF_Version</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数用于创建TF_Tensor时的某个参数，说实话我完全不懂为什么这么写</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DeallocateTensor</span><span class="params">(<span class="keyword">void</span>* data, std::<span class="keyword">size_t</span>, <span class="keyword">void</span>*)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::<span class="built_in">free</span>(data);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Deallocate tensor&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一段是主要的识别逻辑，参数是一个包含15*25个float类型数据的vector</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">predict_letter</span><span class="params">(vector&lt;<span class="keyword">float</span>&gt; vecs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">验证模型是否加载成功，此处为了消除警告，我修改了TF_Code的声明</span></span><br><span class="line"><span class="comment">如果报错，修改为TF_GetCode(status) == TF_OK即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">TF_GetCode</span>(status) == TF_Code::TF_OK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Load success!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">TF_Message</span>(status));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> PREDICT_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入层的数量</span></span><br><span class="line"><span class="keyword">int</span> num_inputs = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 这里有个坑，input却要用TF_Output来声明..之前我不信邪，用TF_Input去声明，结果TF_SessionRun就报错了</span></span><br><span class="line">TF_Output* input = (TF_Output*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(TF_Output) * num_inputs);</span><br><span class="line"><span class="comment">// serving_default_conv2d_input是之前获取到输入层名字，0就是冒号后面跟的数字</span></span><br><span class="line">TF_Output in = &#123; <span class="built_in">TF_GraphOperationByName</span>(graph,<span class="string">&quot;serving_default_conv2d_input&quot;</span>), <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">// 验证Graph是否获取成功</span></span><br><span class="line"><span class="keyword">if</span> (!in.oper) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;load graph input error\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> PREDICT_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;load graph input ok\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line">input[<span class="number">0</span>] = in;</span><br><span class="line"><span class="comment">// 输出层的数量，这一段跟上面没有什么差别</span></span><br><span class="line"><span class="keyword">int</span> num_outputs = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 申请内存</span></span><br><span class="line">TF_Output* output = (TF_Output*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(TF_Output) * num_outputs);</span><br><span class="line"><span class="comment">// StatefulPartitionedCall是之前获取到的输出层名字，0是冒号后面的数字</span></span><br><span class="line">TF_Output out = &#123; <span class="built_in">TF_GraphOperationByName</span>(graph,<span class="string">&quot;StatefulPartitionedCall&quot;</span>), <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">// 验证Graph是否获取成功</span></span><br><span class="line"><span class="keyword">if</span> (!out.oper) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  _DEBUG</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;load graph output error\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> PREDICT_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;load graph output ok\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line">output[<span class="number">0</span>] = out;</span><br><span class="line"><span class="comment">// 申请内存</span></span><br><span class="line">TF_Tensor** input_values = (TF_Tensor**)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(TF_Tensor*) * num_inputs);</span><br><span class="line">TF_Tensor** output_values = (TF_Tensor**)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(TF_Tensor*) * num_outputs);</span><br><span class="line"><span class="comment">// 创建指定大小的数组，这个要和输入层的shape对应</span></span><br><span class="line"><span class="comment">// 可能你注意到saved_model_cli输出的是(-1,25,15,1)，但是这里不能写负数</span></span><br><span class="line"><span class="keyword">const</span> array&lt;<span class="keyword">int64_t</span>, 4&gt; dims =  &#123; <span class="number">1</span>,<span class="number">25</span>,<span class="number">15</span>,<span class="number">1</span> &#125; ;</span><br><span class="line"><span class="comment">// float变量的大小，用于申请内存</span></span><br><span class="line"><span class="keyword">size_t</span> size = <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>);</span><br><span class="line"><span class="comment">// 1*25*15*1*size</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : dims) &#123;</span><br><span class="line">size *= <span class="built_in">abs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 申请一块内存，存放输入层的数据</span></span><br><span class="line"><span class="keyword">auto</span> data = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>*&gt;(<span class="built_in">malloc</span>(size));</span><br><span class="line"><span class="comment">// 将vecs中的数据拷贝给data</span></span><br><span class="line">std::<span class="built_in">copy</span>(vecs.<span class="built_in">begin</span>(), vecs.<span class="built_in">end</span>(),data);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建TF_Tensor，此处为了消除警告，我修改了TF_DataType的声明</span></span><br><span class="line"><span class="comment">如果报错，TF_DataType::TF_FLOAT修改为TF_FLOAT即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">TF_Tensor* tensor = <span class="built_in">TF_NewTensor</span>(TF_DataType::TF_FLOAT,</span><br><span class="line">dims.<span class="built_in">data</span>(),</span><br><span class="line"><span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(dims.<span class="built_in">size</span>()),</span><br><span class="line">data,</span><br><span class="line">size,</span><br><span class="line">DeallocateTensor,</span><br><span class="line"><span class="literal">nullptr</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 验证TensorType是否为FLOAT类型</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">TF_TensorType</span>(tensor) != TF_DataType::TF_FLOAT) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Wrong tensor type&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> PREDICT_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证矩阵维度数是否相符</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">TF_NumDims</span>(tensor) != dims.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Wrong number of dimensions&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> PREDICT_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证图片矩阵的尺寸是否相符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dims.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">TF_Dim</span>(tensor, i) != dims[i]) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Wrong dimensions size for dim: &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> PREDICT_ERROR;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据tensor创建识别用的数据</span></span><br><span class="line"><span class="keyword">auto</span> tf_data = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>*&gt;(<span class="built_in">TF_TensorData</span>(tensor));</span><br><span class="line"><span class="comment">// 验证数据在流转过程中是否发生了变动</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vecs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (tf_data[i] != vecs[i]) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Element: &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;does not match&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> PREDICT_ERROR;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入层数据，看样子可以一次识别多个</span></span><br><span class="line">input_values[<span class="number">0</span>] = tensor;</span><br><span class="line"><span class="comment">// 调用TF_SessionRun，开始识别，识别结果保存到output_values中</span></span><br><span class="line"><span class="built_in">TF_SessionRun</span>(session, <span class="literal">NULL</span>, input, input_values, num_inputs, output, output_values, num_outputs, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, status);</span><br><span class="line"><span class="comment">// 验证状态</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">TF_GetCode</span>(status) == TF_Code::TF_OK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Session is OK\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">TF_Message</span>(status));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> PREDICT_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个float集合用于保存识别结果</span></span><br><span class="line"><span class="keyword">float</span>* result = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>*&gt;(<span class="built_in">TF_TensorData</span>(output_values[<span class="number">0</span>]));</span><br><span class="line"><span class="comment">// 保存result中最大值的索引</span></span><br><span class="line"><span class="keyword">int</span> max_location = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 保存result中的最大值</span></span><br><span class="line"><span class="keyword">float</span> max_value = <span class="number">0.0</span>;</span><br><span class="line"><span class="comment">// 通过一个简单的for循环获取最大值及其下标</span></span><br><span class="line"><span class="comment">// 如果有多个最大值，则取第一个的下标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (result[i] &gt; max_value) &#123;</span><br><span class="line">max_value = result[i];</span><br><span class="line">max_location = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line">cout &lt;&lt; max_value &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; letter[max_location] &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">// 释放内存，这很重要！</span></span><br><span class="line"><span class="built_in">free</span>(input);</span><br><span class="line"><span class="built_in">free</span>(output);</span><br><span class="line"><span class="built_in">free</span>(input_values);</span><br><span class="line"><span class="built_in">free</span>(output_values);</span><br><span class="line"><span class="built_in">free</span>(tensor);</span><br><span class="line"><span class="comment">// 返回预测结果</span></span><br><span class="line"><span class="keyword">return</span> letter[max_location];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于释放TF模型的内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freesession</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">TF_DeleteGraph</span>(graph);</span><br><span class="line"><span class="built_in">TF_DeleteSession</span>(session, status);</span><br><span class="line"><span class="built_in">TF_DeleteSessionOptions</span>(session_opts);</span><br><span class="line"><span class="built_in">TF_DeleteStatus</span>(status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于分割图片</span></span><br><span class="line"><span class="function">cv::Mat <span class="title">split_img</span><span class="params">(cv::Mat img,<span class="keyword">int</span> shape[])</span> </span>&#123;</span><br><span class="line">cv::Mat region_img = cv::<span class="built_in">Mat</span>(cv::<span class="built_in">Size</span>(shape[<span class="number">1</span>]- shape[<span class="number">0</span>],<span class="number">25</span>), CV_8UC3, cv::<span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; img.rows; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = shape[<span class="number">0</span>]; j &lt; shape[<span class="number">1</span>]; j++) &#123;</span><br><span class="line">region_img.at&lt;cv::Vec3b&gt;(i, j - shape[<span class="number">0</span>])[<span class="number">0</span>] = img.at&lt;cv::Vec3b&gt;(i, j)[<span class="number">0</span>];</span><br><span class="line">region_img.at&lt;cv::Vec3b&gt;(i, j - shape[<span class="number">0</span>])[<span class="number">1</span>] = img.at&lt;cv::Vec3b&gt;(i, j)[<span class="number">1</span>];</span><br><span class="line">region_img.at&lt;cv::Vec3b&gt;(i, j - shape[<span class="number">0</span>])[<span class="number">2</span>] = img.at&lt;cv::Vec3b&gt;(i, j)[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> region_img;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于识别完整的验证码，参数为验证码的路径</span></span><br><span class="line"><span class="function">string <span class="title">predict</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* imgpath)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 声明两个Mat，一个用于读取验证码，一个用于存储分割后的字符图片</span></span><br><span class="line">cv::Mat img,img_split;</span><br><span class="line">img = cv::<span class="built_in">imread</span>(imgpath);</span><br><span class="line"><span class="comment">// 用于保存预测结果</span></span><br><span class="line">string result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">// 存储单通道像素点数据的集合</span></span><br><span class="line">vector&lt;<span class="keyword">float</span>&gt; temp = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) &#123;</span><br><span class="line"><span class="comment">// 每一次循环先清空temp中的数据</span></span><br><span class="line">temp.<span class="built_in">clear</span>();</span><br><span class="line"><span class="comment">// 切割图片的指定范围</span></span><br><span class="line">img_split = <span class="built_in">split_img</span>(img, region[r]);</span><br><span class="line"><span class="comment">// img_split转灰度，或许先把验证码整体转为灰度会更快一些，但是要重写分割函数</span></span><br><span class="line"><span class="built_in">cvtColor</span>(img_split, img_split, CV_BGR2GRAY);</span><br><span class="line"><span class="comment">// 调整图片尺寸</span></span><br><span class="line">cv::<span class="built_in">resize</span>(img_split, img_split, cv::<span class="built_in">Size</span>(<span class="number">15</span>, <span class="number">25</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; img_split.cols &lt;&lt; <span class="string">&quot;,&quot;</span> <span class="comment">//宽度</span></span><br><span class="line">&lt;&lt; img_split.rows &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl;    <span class="comment">//高度</span></span><br><span class="line">cout &lt;&lt; img_split.<span class="built_in">channels</span>() &lt;&lt; endl; <span class="comment">//通道数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">// 按顺序遍历img_split中的像素点，并将数据存入集合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; img_split.rows; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; img_split.cols; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> indexs = i * img_split.cols + j;</span><br><span class="line">temp.<span class="built_in">push_back</span>((<span class="keyword">float</span>)img_split.data[indexs]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用上面的函数完成识别</span></span><br><span class="line">result += <span class="built_in">predict_letter</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证是否遇到问题，如果结果字符串中出现了&#x27;A&#x27;，说明一定是哪个环节出错了</span></span><br><span class="line"><span class="keyword">if</span> (result.<span class="built_in">find</span>(PREDICT_ERROR) == result.npos) <span class="comment">//没有找到PREDICT_ERROR</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Error&quot;</span>;</span><br><span class="line"><span class="comment">// 返回识别结果</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> nargv,<span class="keyword">const</span> <span class="keyword">char</span>* argvs[])</span> </span>&#123;</span><br><span class="line"><span class="comment">// 打印版本</span></span><br><span class="line"><span class="built_in">version</span>();</span><br><span class="line"><span class="comment">// 如果是在命令行执行，且传递了图片路径作为参数，则单独进行识别</span></span><br><span class="line"><span class="keyword">if</span> (nargv &gt; <span class="number">1</span>) &#123;</span><br><span class="line">session = <span class="built_in">TF_LoadSessionFromSavedModel</span>(session_opts, run_opts, saved_model_dir, &amp;tags, ntags, graph, <span class="literal">NULL</span>, status);</span><br><span class="line">string result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">result = <span class="built_in">predict</span>(argvs[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* test = result.<span class="built_in">c_str</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, test);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 否则，遍历目标文件夹下的所有png文件进行识别</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 记录开始时间</span></span><br><span class="line">start_time = <span class="built_in">clock</span>();</span><br><span class="line"><span class="comment">// 记录识别正确的验证码数量</span></span><br><span class="line"><span class="keyword">int</span> true_count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 加载模型</span></span><br><span class="line">session = <span class="built_in">TF_LoadSessionFromSavedModel</span>(session_opts, run_opts, saved_model_dir, &amp;tags, ntags, graph, <span class="literal">NULL</span>, status);</span><br><span class="line"><span class="comment">// 遍历文件夹下的所有.png文件</span></span><br><span class="line">std::string inPath = <span class="string">&quot;test\\*.png&quot;</span>;</span><br><span class="line"><span class="comment">// 用于查找的句柄</span></span><br><span class="line"><span class="keyword">intptr_t</span> handle;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">finddata_t</span> <span class="title">fileinfo</span>;</span></span><br><span class="line"><span class="comment">// 第一次查找</span></span><br><span class="line">handle = _findfirst(inPath.<span class="built_in">c_str</span>(), &amp;fileinfo);</span><br><span class="line"><span class="keyword">if</span> (handle == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 根据找到的文件名，补充图片路径(相对路径)</span></span><br><span class="line">string filepath = <span class="string">&quot;test/&quot;</span> + (string)fileinfo.name;</span><br><span class="line"><span class="comment">// 调用上面的函数完成识别</span></span><br><span class="line">string result = <span class="built_in">predict</span>(filepath.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="comment">// 打印识别结果</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;RESULT is: %s, CAPTCHA text is: %s, &quot;</span>, result.<span class="built_in">c_str</span>(), fileinfo.name);</span><br><span class="line"><span class="keyword">if</span> (filepath.<span class="built_in">find</span>(result) != filepath.npos) &#123;</span><br><span class="line">true_count += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;True\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;False\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (!_findnext(handle, &amp;fileinfo));</span><br><span class="line"><span class="comment">// 关闭查找句柄</span></span><br><span class="line">_findclose(handle);</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">end_time = <span class="built_in">clock</span>();</span><br><span class="line"><span class="comment">// 准确率</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;predict rate: %f\n&quot;</span>, (<span class="keyword">float</span>)true_count / <span class="number">100.0</span>);</span><br><span class="line"><span class="comment">// 所用时间</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;time: %fs\n&quot;</span>, (<span class="keyword">float</span>)(end_time - start_time) / CLOCKS_PER_SEC);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="built_in">freesession</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-22%20020449_20210822020502190106.png" alt="C++运行结果" title="C++运行结果"><br>同样是识别100张验证码，耗时仅为0.4s，我的天呐！相比python的11s，速度快了差不多28倍！</p><h2 id="资源整理"><a href="#资源整理" class="headerlink" title="资源整理"></a>资源整理</h2><p>暂无！因为dll文件过大，暂不提供，h5模型和验证集请移步上篇文章末尾获取。如果你需要dll文件，那就留言或者发邮件给我吧~我将尽力为您解决问题。  </p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.zhihu.com/question/428745393/answer/1565848605" title="知乎：怎样使用c/c++部署tensorflow2.0训练的模型?">知乎：怎样使用c/c++部署tensorflow2.0训练的模型?</a><br><a href="https://blog.csdn.net/qq_43702097/article/details/105491723" title="CSDN：c++和opencv小知识：遍历图像像素的常用方法（详细，很全）">CSDN：c++和opencv小知识：遍历图像像素的常用方法（详细，很全）</a><br><a href="https://github.com/Neargye/hello_tf_c_api" title="Github：Example TensorFlow C API">Github：Example TensorFlow C API</a><br>另附几条saved_model_cli命令：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看tag_set</span></span><br><span class="line">saved_model_cli show --dir &lt;path_to_saved_model_folder&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看SignatureDef key</span></span><br><span class="line">saved_model_cli show --dir &lt;path_to_saved_model_folder&gt; --tag_set serve</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看输入输出层</span></span><br><span class="line">saved_model_cli show --dir &lt;path_to_saved_model_folder&gt; --tag_set serve --signature_def serving_default</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>目前还有32位不能调用64位DLL的问题，但是这个可以使用COM口组件解决，有空会写一篇相关的文章。<br>还有一个问题就是libtensorflow的Linux调用，这个也要等有时间再搞。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于深度学习的图片验证码识别</title>
      <link href="/2021/08/21/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
      <url>/2021/08/21/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>做自动化流程的时候会遇到各种各样的验证码，图片验证码无疑是最常见的了，本文记录一下破解验证码的过程。  </p><h2 id="主要环境"><a href="#主要环境" class="headerlink" title="主要环境"></a>主要环境</h2><p><code>Windows 10Pro 64位</code><br><code>PyCharm 2021.2 Community</code><br><code>python3.8.5 64位</code><br><code>tensorflow 2.5.0</code><br><code>keras 2.4.3</code><br><code>opencv-python 4.5.3.56</code><br><code>scikit-learn 0.24.2</code></p><h2 id="目标验证码"><a href="#目标验证码" class="headerlink" title="目标验证码"></a>目标验证码</h2><p>这里训练集（手工标注1000张）和验证集（手工标注100张）使用的都是处理过的验证码，原图因为部分原因无法提供<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-21%20215245_20210821215444438871.png" alt="训练集" title="训练集">  </p><h2 id="分割字符"><a href="#分割字符" class="headerlink" title="分割字符"></a>分割字符</h2><p>主要代码如下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Thu Aug  5 09:28:38 2021</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: ljc545w</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标文件夹</span></span><br><span class="line">CAPTCHA_IMAGE_FOLDER = <span class="string">&#x27;inputs&#x27;</span></span><br><span class="line"><span class="comment"># 分割后的保存路径</span></span><br><span class="line">OUTPUT_FOLDER = <span class="string">&quot;outputs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get a list of all the captcha images we need to process</span></span><br><span class="line"><span class="comment"># 遍历目标文件夹，并存储为列表</span></span><br><span class="line">captcha_image_files = glob.glob(os.path.join(CAPTCHA_IMAGE_FOLDER, <span class="string">&quot;*&quot;</span>))</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="comment"># 分割的大小，将60x25的图片分成四个15*25的图片</span></span><br><span class="line">letter_image_regions = [(<span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">25</span>), (<span class="number">14</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">25</span>), (<span class="number">30</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">25</span>), (<span class="number">44</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">25</span>)]</span><br><span class="line"><span class="comment"># loop over the image paths</span></span><br><span class="line"><span class="comment"># 遍历每一张验证码</span></span><br><span class="line"><span class="keyword">for</span> (i, captcha_image_file) <span class="keyword">in</span> <span class="built_in">enumerate</span>(captcha_image_files):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[INFO] processing image &#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(captcha_image_files)))</span><br><span class="line">    <span class="comment"># 获取标注的文本</span></span><br><span class="line">    filename = os.path.basename(captcha_image_file)</span><br><span class="line">    captcha_correct_text = os.path.splitext(filename)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取图片并转换为灰度，注意图片路径不能包含中文，不然opencv会报错</span></span><br><span class="line">    image = cv2.imread(captcha_image_file)</span><br><span class="line">    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将单独的字符保存为图片</span></span><br><span class="line">    <span class="keyword">for</span> letter_bounding_box, letter_text <span class="keyword">in</span> <span class="built_in">zip</span>(letter_image_regions, captcha_correct_text):</span><br><span class="line">        <span class="comment"># 分割的范围</span></span><br><span class="line">        x, y, w, h = letter_bounding_box</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取目标像素，并在边缘留出2个像素</span></span><br><span class="line">        letter_image = gray[y:h, x:w]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取输出路径</span></span><br><span class="line">        save_path = os.path.join(OUTPUT_FOLDER, letter_text)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果输出路径不存在，则创建</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_path):</span><br><span class="line">            os.makedirs(save_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计数以完善单字符文件名，防止保存覆盖</span></span><br><span class="line">        count = counts.get(letter_text, <span class="number">1</span>)</span><br><span class="line">        p = os.path.join(save_path, <span class="string">&quot;&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(count).zfill(<span class="number">6</span>)))</span><br><span class="line">        <span class="comment"># 写入图片</span></span><br><span class="line">        cv2.imwrite(p, letter_image)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计数加1</span></span><br><span class="line">        counts[letter_text] = count + <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分割后的文件夹示例：<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-21%20220706_20210821220719931030.png" alt="单字符示例" title="单字符示例">  </p><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><p>然后就可以训练我们的模型了，使用Sequential模型来创建一个简单的网络<br>代码如下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> imutils <span class="keyword">import</span> paths</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelBinarizer</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers.convolutional <span class="keyword">import</span> Conv2D, MaxPooling2D</span><br><span class="line"><span class="keyword">from</span> keras.layers.core <span class="keyword">import</span> Flatten, Dense</span><br><span class="line"><span class="keyword">from</span> helpers <span class="keyword">import</span> resize_to_fit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练集的路径</span></span><br><span class="line">LETTER_IMAGES_FOLDER = <span class="string">&quot;outputs&quot;</span></span><br><span class="line"><span class="comment"># 模型保存的名字</span></span><br><span class="line">MODEL_FILENAME = <span class="string">&quot;model.hdf5&quot;</span></span><br><span class="line"><span class="comment"># 用于存储二值化后的标签对象</span></span><br><span class="line">MODEL_LABELS_FILENAME = <span class="string">&quot;labels.dat&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">data = []</span><br><span class="line">labels = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有图片</span></span><br><span class="line"><span class="keyword">for</span> image_file <span class="keyword">in</span> paths.list_images(LETTER_IMAGES_FOLDER):</span><br><span class="line">    <span class="comment"># 读取图片并转换为灰度</span></span><br><span class="line">    image = cv2.imread(image_file)</span><br><span class="line">    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调整图片的尺寸，改为15x25（这个函数下面会写）</span></span><br><span class="line">    image = resize_to_fit(image, <span class="number">15</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为图片增加一个通道</span></span><br><span class="line">    image = np.expand_dims(image, axis=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取标签名</span></span><br><span class="line">    label = image_file.split(os.path.sep)[-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将转换后的图片矩阵和标签添加到对应的列表</span></span><br><span class="line">    data.append(image)</span><br><span class="line">    labels.append(label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缩放像素点</span></span><br><span class="line">data = np.array(data, dtype=<span class="string">&quot;float&quot;</span>) / <span class="number">255.0</span></span><br><span class="line"><span class="comment"># 标签转换为矩阵</span></span><br><span class="line">labels = np.array(labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割训练集、测试集</span></span><br><span class="line">(X_train, X_test, Y_train, Y_test) = train_test_split(data, labels, test_size=<span class="number">0.25</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签二值化</span></span><br><span class="line">lb = LabelBinarizer().fit(Y_train)</span><br><span class="line">Y_train = lb.transform(Y_train)</span><br><span class="line">Y_test = lb.transform(Y_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将二值化后的LabelBinarizer标签以二进制形式存储，方便后续调用</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(MODEL_LABELS_FILENAME, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(lb, f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网络</span></span><br><span class="line">model = Sequential()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一层卷积，input_shape要和上面resize的大小保持一致，但注意宽和高是相反的！</span></span><br><span class="line">model.add(Conv2D(<span class="number">20</span>, (<span class="number">5</span>, <span class="number">5</span>), padding=<span class="string">&quot;same&quot;</span>, input_shape=(<span class="number">25</span>, <span class="number">15</span>, <span class="number">1</span>), activation=<span class="string">&quot;relu&quot;</span>))</span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二层卷积</span></span><br><span class="line">model.add(Conv2D(<span class="number">50</span>, (<span class="number">5</span>, <span class="number">5</span>), padding=<span class="string">&quot;same&quot;</span>, activation=<span class="string">&quot;relu&quot;</span>))</span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具有500个节点的隐藏层</span></span><br><span class="line">model.add(Flatten())</span><br><span class="line">model.add(Dense(<span class="number">500</span>, activation=<span class="string">&quot;relu&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具有36个节点的输出层（0-9+a-z,不含大写字母）</span></span><br><span class="line">model.add(Dense(<span class="number">36</span>, activation=<span class="string">&quot;softmax&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用keras构建tensorflow模型</span></span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&quot;categorical_crossentropy&quot;</span>, optimizer=<span class="string">&quot;adam&quot;</span>, metrics=[<span class="string">&quot;accuracy&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练网络，这里迭代了100次</span></span><br><span class="line">model.fit(X_train, Y_train, validation_data=(X_test, Y_test), batch_size=<span class="number">36</span>, epochs=<span class="number">100</span>, verbose=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存训练好的模型</span></span><br><span class="line">model.save(MODEL_FILENAME)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>helpers.py  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> imutils</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize_to_fit</span>(<span class="params">image, width, height</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param image: 目标图片</span></span><br><span class="line"><span class="string">    :param width: 需要的宽度</span></span><br><span class="line"><span class="string">    :param height: 需要的高度</span></span><br><span class="line"><span class="string">    :return: 调整后的图片</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    (h, w) = image.shape[:<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> w &gt; h:</span><br><span class="line">        image = imutils.resize(image, width=width)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        image = imutils.resize(image, height=height)</span><br><span class="line"></span><br><span class="line">    image = cv2.resize(image, (width, height))</span><br><span class="line">    <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure><p>因为训练集不太多，就算没有GPU，训练速度也是蛮快的，结果如下：<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-21%20223443_20210821223452357666.png" alt="训练模型" title="训练模型"><br>据我猜测，第84次迭代应该已经达到最大拟合。  </p><h2 id="模型验证"><a href="#模型验证" class="headerlink" title="模型验证"></a>模型验证</h2><p>接下来使用100张验证集（未参与训练）来测试一下模型的精度，代码如下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">from</span> helpers <span class="keyword">import</span> resize_to_fit</span><br><span class="line"><span class="keyword">from</span> imutils <span class="keyword">import</span> paths</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">MODEL_FILENAME = <span class="string">&quot;model.hdf5&quot;</span></span><br><span class="line">MODEL_LABELS_FILENAME = <span class="string">&quot;labels.dat&quot;</span></span><br><span class="line"><span class="comment"># 验证集路径</span></span><br><span class="line">CAPTCHA_IMAGE_FOLDER = <span class="string">&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签二进制文件反序列化，如果想了解相关知识，搜索pickle库即可</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(MODEL_LABELS_FILENAME, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lb = pickle.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line">model = load_model(MODEL_FILENAME)</span><br><span class="line"><span class="comment"># 字符分割范围</span></span><br><span class="line">region = [(<span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">25</span>), (<span class="number">14</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">25</span>), (<span class="number">30</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">25</span>), (<span class="number">44</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">25</span>)]</span><br><span class="line"><span class="comment"># 遍历文件夹</span></span><br><span class="line">captcha_image_files = <span class="built_in">list</span>(paths.list_images(CAPTCHA_IMAGE_FOLDER))</span><br><span class="line"><span class="comment"># 验证集总数</span></span><br><span class="line">total = <span class="number">100</span></span><br><span class="line"><span class="comment"># 随机选取total个图片进行验证，因为验证集只有100张，相当于全选</span></span><br><span class="line">captcha_image_files = np.random.choice(captcha_image_files, size=(total,), replace=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 正确识别的验证码数量</span></span><br><span class="line">true_count = <span class="number">0</span></span><br><span class="line"><span class="comment"># 记录开始时间</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="comment"># 循环识别</span></span><br><span class="line"><span class="keyword">for</span> image_file <span class="keyword">in</span> captcha_image_files:</span><br><span class="line">    <span class="comment"># 读取图片</span></span><br><span class="line">    image = cv2.imread(image_file)</span><br><span class="line">    <span class="comment"># 从文件名获取标注的文本</span></span><br><span class="line">    result = image_file.split(<span class="string">&#x27;\\&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 图片转换为灰度</span></span><br><span class="line">    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="comment"># 保存单字符识别结果</span></span><br><span class="line">    predictions = []</span><br><span class="line">    <span class="comment"># 逐个字符进行识别</span></span><br><span class="line">    <span class="keyword">for</span> reg <span class="keyword">in</span> region:</span><br><span class="line">        <span class="comment"># 获取目标范围的像素</span></span><br><span class="line">        letter_image = image[:, reg[<span class="number">0</span>]:reg[<span class="number">2</span>]]</span><br><span class="line">        <span class="comment"># 调整图片尺寸</span></span><br><span class="line">        letter_image = resize_to_fit(letter_image, <span class="number">15</span>, <span class="number">25</span>)</span><br><span class="line">        <span class="comment"># 改变图片矩阵的维度，以契合输入层</span></span><br><span class="line">        letter_image = np.expand_dims(letter_image, axis=<span class="number">2</span>)</span><br><span class="line">        letter_image = np.expand_dims(letter_image, axis=<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 调用模型进行识别，返回的是1x36的矩阵</span></span><br><span class="line">        prediction = model.predict(letter_image)</span><br><span class="line">        <span class="comment"># 二值化标签还原</span></span><br><span class="line">        letter = lb.inverse_transform(prediction)</span><br><span class="line">        <span class="comment"># 还原的字符添加到列表</span></span><br><span class="line">        predictions.append(letter[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 转换为字符串</span></span><br><span class="line">    captcha_text = <span class="string">&quot;&quot;</span>.join(predictions)</span><br><span class="line">    <span class="comment"># 判断识别是否正确</span></span><br><span class="line">    <span class="keyword">if</span> captcha_text == result:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;RESULT is: &#123;&#125;, CAPTCHA text is: &#123;&#125;, True&quot;</span>.<span class="built_in">format</span>(result, captcha_text))</span><br><span class="line">        true_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;RESULT is: &#123;&#125;, CAPTCHA text is: &#123;&#125;, False&quot;</span>.<span class="built_in">format</span>(result, captcha_text))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录结束时间</span></span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="comment"># 计算准确率</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;predict rate: &quot;</span>, true_count / total)</span><br><span class="line"><span class="comment"># 所用时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;time: &#123;:.6f&#125;s&#x27;</span>.<span class="built_in">format</span>(end_time - start_time))</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-21%20224946_20210821224947702146.png" alt="验证集识别结果" title="验证集识别结果"><br>识别率达到了95%，还是很不错的，对吧~顺便再放一张训练集的识别结果:<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-08-21%20225201_20210821225211612243.png" alt="训练集识别结果" title="训练集识别结果"><br>唯一一个错误是没有分清字母l和数字1，如果按照字符的识别率，误差仅有0.25%!  </p><h2 id="资源整理"><a href="#资源整理" class="headerlink" title="资源整理"></a>资源整理</h2><p>链接: <a href="https://pan.baidu.com/s/1cuMX_anhdSX7oFWatiofhw" title="深度学习-验证码">深度学习-验证码</a><br>提取码: utum</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/shebao3333/article/details/78808066" title="CSDN：15分钟实战机器学习：验证码（CAPTCHA）识别">CSDN：15分钟实战机器学习：验证码（CAPTCHA）识别</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium中的几个骚操作</title>
      <link href="/2021/07/03/selenium%E4%B8%AD%E7%9A%84%E5%87%A0%E4%B8%AA%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/07/03/selenium%E4%B8%AD%E7%9A%84%E5%87%A0%E4%B8%AA%E9%AA%9A%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>随着业务需求的增多，遇到的难题也越来越多了，所以想写篇文章记录一下<br>目前我手上没有代码，我一时半会儿也想不起来，等上班了再copy过来吧<br>先写一下解决了哪些问题  </p><h2 id="problems"><a href="#problems" class="headerlink" title="problems"></a>problems</h2><p>1、控制chrome自动清空缓存  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问这个地址会弹出清空缓存确认框</span></span><br><span class="line">browser.get(<span class="string">&#x27;chrome://settings/clearBrowserData&#x27;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这串代码可以获取确认到确认按钮元素</span></span><br><span class="line">Button = driver.execute_script(<span class="string">&quot;return document.querySelector(&#x27;settings-ui&#x27;).shadowRoot.querySelector(&#x27;settings-main&#x27;).shadowRoot.querySelector(&#x27;settings-basic-page&#x27;).shadowRoot.querySelector(&#x27;settings-section &gt; settings-privacy-page&#x27;).shadowRoot.querySelector(&#x27;settings-clear-browsing-data-dialog&#x27;).shadowRoot.querySelector(&#x27;#clearBrowsingDataDialog&#x27;).querySelector(&#x27;#clearBrowsingDataConfirm&#x27;)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击确认按钮</span></span><br><span class="line">Button.click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>2、下载exe等类型的文件时，需确认保存  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个Options</span></span><br><span class="line">chromeoptions = Options()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于定义下载不弹窗和默认下载地址</span></span><br><span class="line">prefs = &#123;<span class="string">&quot;download.default_directory&quot;</span>: <span class="string">&quot;D:\download&quot;</span>,<span class="string">&quot;download.prompt_for_download&quot;</span>: <span class="literal">False</span>&#125;</span><br><span class="line">chromeoptions.add_experimental_option(<span class="string">&quot;prefs&quot;</span>, prefs)</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(chrome_options=chromeoptions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这串代码发挥主要作用，但其中原理目前还没有搞清楚</span></span><br><span class="line">browser.command_executor._commands[<span class="string">&quot;send_command&quot;</span>] = (<span class="string">&quot;POST&quot;</span>, <span class="string">&#x27;/session/$sessionId/chromium/send_command&#x27;</span>)</span><br><span class="line">params = &#123;<span class="string">&#x27;cmd&#x27;</span>: <span class="string">&#x27;Page.setDownloadBehavior&#x27;</span>, <span class="string">&#x27;params&#x27;</span>: &#123;<span class="string">&#x27;behavior&#x27;</span>: <span class="string">&#x27;allow&#x27;</span>, <span class="string">&#x27;downloadPath&#x27;</span>: <span class="string">&quot;D:\download&quot;</span>&#125;&#125;</span><br><span class="line">command_result = browser.execute(<span class="string">&quot;send_command&quot;</span>, params)</span><br></pre></td></tr></table></figure><p>3、脚本打包成exe后，运行时出现cmd黑窗<br>说下这个的解决方案，使用ctypes调用WindowsAPI隐藏掉console窗口，最简单的方法是修改selenium的源码，但是这样把demo交给别人的时候，还要让别人去做修改，这样就不是很方便，所以重写相关类的某个方法，这样会好一些。<br><code>webdriver.py</code>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> errno</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> PIPE</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> WebDriverException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service <span class="keyword">as</span> ChromeService</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.remote.webdriver <span class="keyword">import</span> WebDriver <span class="keyword">as</span> RemoteWebDriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.remote_connection <span class="keyword">import</span> ChromeRemoteConnection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于隐藏程序运行时的cmd窗口</span></span><br><span class="line"><span class="keyword">from</span> win32process <span class="keyword">import</span> CREATE_NO_WINDOW</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span>(<span class="params">ChromeService</span>):</span> </span><br><span class="line">    <span class="comment"># 重写start方法，为self.process添加creationflags参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = [self.path]</span><br><span class="line">            cmd.extend(self.command_line_args())</span><br><span class="line">            self.process = subprocess.Popen(cmd, env=self.env,</span><br><span class="line">                                            close_fds=platform.system() != <span class="string">&#x27;Windows&#x27;</span>,</span><br><span class="line">                                            stdout=self.log_file,</span><br><span class="line">                                            stderr=self.log_file,</span><br><span class="line">                                            stdin=PIPE,</span><br><span class="line">                                            creationflags=CREATE_NO_WINDOW)</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> err:</span><br><span class="line">            <span class="keyword">if</span> err.errno == errno.ENOENT:</span><br><span class="line">                <span class="keyword">raise</span> WebDriverException(</span><br><span class="line">                    <span class="string">&quot;&#x27;%s&#x27; executable needs to be in PATH. %s&quot;</span> % (</span><br><span class="line">                        os.path.basename(self.path), self.start_error_message)</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">elif</span> err.errno == errno.EACCES:</span><br><span class="line">                <span class="keyword">raise</span> WebDriverException(</span><br><span class="line">                    <span class="string">&quot;&#x27;%s&#x27; executable may have wrong permissions. %s&quot;</span> % (</span><br><span class="line">                        os.path.basename(self.path), self.start_error_message)</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> WebDriverException(</span><br><span class="line">                <span class="string">&quot;The executable %s needs to be available in the path. %s\n%s&quot;</span> %</span><br><span class="line">                (os.path.basename(self.path), self.start_error_message, <span class="built_in">str</span>(e)))</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.assert_process_still_running()</span><br><span class="line">            <span class="keyword">if</span> self.is_connectable():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">30</span>:</span><br><span class="line">                <span class="keyword">raise</span> WebDriverException(<span class="string">&quot;Can not connect to the Service %s&quot;</span> % self.path)</span><br><span class="line"></span><br><span class="line"><span class="comment">##  重写webdriver.Chrome中的init方法，实例化self.service时使用上面定义的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyChrome</span>(<span class="params">webdriver.Chrome</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,executable_path=<span class="string">&quot;chromedriver&quot;</span>, port=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                 options=<span class="literal">None</span>, service_args=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                 desired_capabilities=<span class="literal">None</span>, service_log_path=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                 chrome_options=<span class="literal">None</span>, keep_alive=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> chrome_options:</span><br><span class="line">            warnings.warn(<span class="string">&#x27;use options instead of chrome_options&#x27;</span>,</span><br><span class="line">                          DeprecationWarning, stacklevel=<span class="number">2</span>)</span><br><span class="line">            options = chrome_options</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> options <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># desired_capabilities stays as passed in</span></span><br><span class="line">            <span class="keyword">if</span> desired_capabilities <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                desired_capabilities = self.create_options().to_capabilities()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> desired_capabilities <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                desired_capabilities = options.to_capabilities()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                desired_capabilities.update(options.to_capabilities())</span><br><span class="line">                </span><br><span class="line">        self.service = Service(</span><br><span class="line">            executable_path,</span><br><span class="line">            port=port,</span><br><span class="line">            service_args=service_args,</span><br><span class="line">            log_path=service_log_path)</span><br><span class="line">        self.service.start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            RemoteWebDriver.__init__(</span><br><span class="line">                self,</span><br><span class="line">                command_executor=ChromeRemoteConnection(</span><br><span class="line">                    remote_server_addr=self.service.service_url,</span><br><span class="line">                    keep_alive=keep_alive),</span><br><span class="line">                desired_capabilities=desired_capabilities)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            self.quit()</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        self._is_remote = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>保存上述文件，然后使用以下方式声明chromedriver  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> webdriver <span class="keyword">import</span> MyChrome</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">chrome_options = Options()</span><br><span class="line">browser = MyChrome(options = chrome_options)</span><br></pre></td></tr></table></figure><p>脚本打包成exe后不会再出现控制台窗口。<br>4、为chromedriver设置cookie  、</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 一定要先打开一次网站</span></span><br><span class="line">browser.get(<span class="string">&#x27;http://mp.weixin.qq.com&#x27;</span>)</span><br><span class="line">Cookie = &#123;</span><br><span class="line">    <span class="string">&quot;appmsglist_action_3925214187&quot;</span>:<span class="string">&quot;list&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mm_lang&quot;</span>:<span class="string">&quot;zh_CN&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 逐个设置cookie，name和value是指定的两个key</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> Cookie.keys():</span><br><span class="line">    cookie_dict = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:key,</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>:Cookie[key]</span><br><span class="line">        &#125;</span><br><span class="line">    browser.add_cookie(cookie_dict=cookie_dict)</span><br><span class="line"><span class="comment"># 再次打开网站，会发现已经登录成功</span></span><br><span class="line">browser.get(<span class="string">&#x27;http://mp.weixin.qq.com&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>就先写这三个吧，之前还有个擦除chromedriver指纹的，不过在另一篇文章有记录了<br>1和2是因为chrome更新换代，一些方法已经不再适用了，多搜一下还是能找到办法滴<br>至于3，主要是重写了类的某个方法，隐藏掉运行时的黑窗  </p><h2 id="2021-07-11更新"><a href="#2021-07-11更新" class="headerlink" title="2021-07-11更新"></a>2021-07-11更新</h2><p>目前1和2写上去了，姿势均来自CSDN，下面放链接，3和4等等再写<br><a href="https://blog.csdn.net/weixin_41812940/article/details/82423892" title="Selenium 如何使用webdriver下载文件（chrome浏览器）">Selenium 如何使用webdriver下载文件（chrome浏览器）</a><br><a href="https://blog.csdn.net/qq_49442278/article/details/116301468" title="python + selenium清除Chrome缓存">python + selenium清除Chrome缓存</a>  </p><h2 id="2021-07-12更新"><a href="#2021-07-12更新" class="headerlink" title="2021-07-12更新"></a>2021-07-12更新</h2><p>更新完毕~~</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++控制USB根集线器的启停</title>
      <link href="/2021/07/03/C++%E6%8E%A7%E5%88%B6USB%E6%A0%B9%E9%9B%86%E7%BA%BF%E5%99%A8%E7%9A%84%E5%90%AF%E5%81%9C/"/>
      <url>/2021/07/03/C++%E6%8E%A7%E5%88%B6USB%E6%A0%B9%E9%9B%86%E7%BA%BF%E5%99%A8%E7%9A%84%E5%90%AF%E5%81%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在此之前先想想做这件事的原因，哦，我想起来了，上周自动化测试好像有关于网银盾的，业务方不接受手工辅助插拔<br>虽然他们的要求有点难搞，不过正所谓不查一下资料就不知道真的能搞，搜了两天的资料，终于拼凑出了这篇文章<br>主要功能是实现USB根集线器的自动启停，在这个过程中，USB设备会重新挂载（ps：鼠标也会短暂失灵）  </p><h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><p>在查资料的时候，发现Windows提供了一系列SetUPDi函数，可以操作设备管理器  </p><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><p><strong>FormatGUID</strong><br>这个没什么好说的，主要是格式化输出设备类GUID（注意那个“类”字）  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatGUID</span><span class="params">(GUID guid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout.<span class="built_in">fill</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">cout.<span class="built_in">width</span>(<span class="number">8</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">setiosflags</span>(ios::uppercase) &lt;&lt; hex &lt;&lt; guid.Data1</span><br><span class="line">&lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; guid.Data2 &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; guid.Data3 &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout.<span class="built_in">fill</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">cout.<span class="built_in">width</span>(<span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; (<span class="keyword">int</span>)guid.Data4[j];</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ChangeStatus</strong><br>启停设备的主要代码段<br>传入了三个参数，第一个是要修改为的状态，DICS_DISABLE（停用）或DICS_ENABLE（启用）<br>第二个是在枚举设备过程中得到的参数，用于快速获取设备信息<br>第三个参数类似设备句柄，有了它才能进行相应的操作  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ChangeStatus</span><span class="params">(DWORD NewStatus, DWORD SelectedItem, HDEVINFO hDevInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//两个结构体，一个用于修改设备参数，一个用于存储设备信息</span></span><br><span class="line">SP_PROPCHANGE_PARAMS PropChangeParams = &#123; <span class="built_in"><span class="keyword">sizeof</span></span>(SP_CLASSINSTALL_HEADER) &#125;;</span><br><span class="line">SP_DEVINFO_DATA DeviceInfoData = &#123; <span class="built_in"><span class="keyword">sizeof</span></span>(SP_DEVINFO_DATA) &#125;;</span><br><span class="line"><span class="comment">// 通过SelectedItem重新获取hDevInfo.</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">SetupDiEnumDeviceInfo</span>(hDevInfo, SelectedItem, &amp;DeviceInfoData))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SetupDiEnumDeviceInfo errorcode = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改设备的参数.</span></span><br><span class="line">PropChangeParams.ClassInstallHeader.InstallFunction = DIF_PROPERTYCHANGE;</span><br><span class="line">PropChangeParams.Scope = DICS_FLAG_GLOBAL;</span><br><span class="line"><span class="comment">// 启用或停用设备</span></span><br><span class="line">PropChangeParams.StateChange = NewStatus;</span><br><span class="line"><span class="comment">// 修改后的参数添加到hDevInfo</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">SetupDiSetClassInstallParams</span>(hDevInfo, &amp;DeviceInfoData, (SP_CLASSINSTALL_HEADER*)&amp;PropChangeParams, <span class="built_in"><span class="keyword">sizeof</span></span>(PropChangeParams)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SetupDiSetClassInstallParams errorcode = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用API使更改生效.</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">SetupDiCallClassInstaller</span>(DIF_PROPERTYCHANGE, hDevInfo, &amp;DeviceInfoData))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SetupDiCallClassInstaller errorcode = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GetDevInfo</strong><br>程序入口函数<br>根据GUID枚举设备信息，获取设备的SPDRP_SERVICE，即服务名<br>与根集线器作比较，如果一致，则执行启/停操作<br>引入三个参数，分别是设备类GUID（这里需要通用串行总线控制器的GUID）<br>要修改为的状态(0:停用/1:启用)，以及根集线器服务名  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetDevInfo</span><span class="params">(<span class="keyword">char</span>* guidstring, <span class="keyword">int</span> nStatus, <span class="keyword">char</span>* Service_Name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 这行代码可以用于枚举所有设备</span></span><br><span class="line"><span class="comment">//HDEVINFO hDevinfo = SetupDiGetClassDevs(NULL, 0, 0, DIGCF_ALLCLASSES | DIGCF_PRESENT);</span></span><br><span class="line">GUID devGUID;</span><br><span class="line"><span class="built_in">ZeroMemory</span>(&amp;devGUID, <span class="built_in"><span class="keyword">sizeof</span></span>(GUID));</span><br><span class="line">TCHAR* GUIDString = <span class="literal">NULL</span>;</span><br><span class="line">GUIDString = (TCHAR*)(guidstring);</span><br><span class="line">BOOL FOUND = FALSE;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">UuidFromString</span>((RPC_CSTR)GUIDString, &amp;devGUID))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据类GUID获取设备句柄</span></span><br><span class="line">HDEVINFO hDevinfo = <span class="built_in">SetupDiGetClassDevs</span>(&amp;devGUID, <span class="number">0</span>, <span class="number">0</span>, DIGCF_PRESENT);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (hDevinfo == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">SP_DEVINFO_DATA data;</span><br><span class="line">DWORD nindex;</span><br><span class="line">LPTSTR szBuf = <span class="literal">NULL</span>;</span><br><span class="line">DWORD DataT;</span><br><span class="line">DWORD buffsize = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(&amp;data, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(SP_DEVINFO_DATA));</span><br><span class="line">data.cbSize = <span class="built_in"><span class="keyword">sizeof</span></span>(SP_DEVINFO_DATA);</span><br><span class="line"><span class="comment">// 枚举设备类下的所有设备</span></span><br><span class="line"><span class="keyword">for</span> (nindex = <span class="number">0</span>; <span class="built_in">SetupDiEnumDeviceInfo</span>(hDevinfo, nindex, &amp;data); ++nindex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 获取设备的信息</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">SetupDiGetDeviceRegistryProperty</span>(hDevinfo, &amp;data, SPDRP_SERVICE, &amp;DataT, (PBYTE)szBuf, buffsize, &amp;buffsize))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">GetLastError</span>() == ERROR_INSUFFICIENT_BUFFER) &#123;</span><br><span class="line"><span class="keyword">if</span> (szBuf) &#123;</span><br><span class="line"><span class="built_in">LocalFree</span>(szBuf);</span><br><span class="line">&#125;</span><br><span class="line">szBuf = (LPTSTR)<span class="built_in">LocalAlloc</span>(LPTR, buffsize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> This_Service[<span class="built_in"><span class="keyword">sizeof</span></span>(szBuf) * <span class="number">4</span>]; <span class="keyword">int</span> n;</span><br><span class="line">n = <span class="built_in">sprintf_s</span>(This_Service, <span class="string">&quot;%s&quot;</span>, szBuf);</span><br><span class="line"><span class="comment">// 与预设的服务名进行比较</span></span><br><span class="line"><span class="keyword">if</span> (szBuf &amp;&amp; (string)Service_Name == (string)This_Service)</span><br><span class="line">&#123;</span><br><span class="line">FOUND = TRUE;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;已发现通用串行总线控制器，GUID：&quot;</span>);</span><br><span class="line"><span class="built_in">FormatGUID</span>(data.ClassGuid);</span><br><span class="line">SP_PROPCHANGE_PARAMS procChange = &#123; <span class="built_in"><span class="keyword">sizeof</span></span>(SP_CLASSINSTALL_HEADER) &#125;;</span><br><span class="line">procChange.ClassInstallHeader.InstallFunction = DIF_PROPERTYCHANGE;</span><br><span class="line">procChange.Scope = DICS_FLAG_GLOBAL;</span><br><span class="line">procChange.StateChange = DICS_DISABLE;</span><br><span class="line"><span class="keyword">if</span> (nStatus == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;即将禁用USB根集线器，目标服务：%s\n&quot;</span>, szBuf);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 禁用设备</span></span><br><span class="line">res = <span class="built_in">ChangeStatus</span>(DICS_DISABLE, nindex, hDevinfo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nStatus == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;即将启用USB根集线器，目标服务：%s\n&quot;</span>, szBuf);</span><br><span class="line"><span class="comment">// 启用设备</span></span><br><span class="line">res = <span class="built_in">ChangeStatus</span>(DICS_ENABLE, nindex, hDevinfo);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;已启用USB根集线器\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (res) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;启停过程异常，请在设备管理器中查看集线器状态\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作失败!枚举或设置参数过程引发异常\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前改动已生效\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!FOUND)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;通用串行总线控制器中未发现相关设备&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><strong>setupditest.h</strong><br>需要的头可能没有那么多，可以试着去掉几个2333  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;setupapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Rpc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;devguid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;usbiodef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlstr.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">&quot;setupapi.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">&quot;Rpcrt4.lib&quot;</span>)</span></span><br></pre></td></tr></table></figure><p><strong>main.cpp</strong>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;setupditest.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetDevInfo</span><span class="params">(<span class="keyword">char</span>* guidstring,<span class="keyword">int</span> nStatus,<span class="keyword">char</span>* Service_Name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatGUID</span><span class="params">(GUID guid)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ChangeStatus</span><span class="params">(DWORD NewStatus, DWORD SelectedItem, HDEVINFO hDevInfo)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatGUID</span><span class="params">(GUID guid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout.<span class="built_in">fill</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">cout.<span class="built_in">width</span>(<span class="number">8</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">setiosflags</span>(ios::uppercase) &lt;&lt; hex &lt;&lt; guid.Data1</span><br><span class="line">&lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; guid.Data2 &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; guid.Data3 &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout.<span class="built_in">fill</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">cout.<span class="built_in">width</span>(<span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; (<span class="keyword">int</span>)guid.Data4[j];</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ChangeStatus</span><span class="params">(DWORD NewStatus, DWORD SelectedItem, HDEVINFO hDevInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SP_PROPCHANGE_PARAMS PropChangeParams = &#123; <span class="built_in"><span class="keyword">sizeof</span></span>(SP_CLASSINSTALL_HEADER) &#125;;</span><br><span class="line">SP_DEVINFO_DATA DeviceInfoData = &#123; <span class="built_in"><span class="keyword">sizeof</span></span>(SP_DEVINFO_DATA) &#125;;</span><br><span class="line"><span class="comment">// Get a handle to the Selected Item.</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">SetupDiEnumDeviceInfo</span>(hDevInfo, SelectedItem, &amp;DeviceInfoData))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SetupDiEnumDeviceInfo errorcode = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Set the PropChangeParams structure.</span></span><br><span class="line">PropChangeParams.ClassInstallHeader.InstallFunction = DIF_PROPERTYCHANGE;</span><br><span class="line">PropChangeParams.Scope = DICS_FLAG_GLOBAL;</span><br><span class="line">PropChangeParams.StateChange = NewStatus;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">SetupDiSetClassInstallParams</span>(hDevInfo, &amp;DeviceInfoData, (SP_CLASSINSTALL_HEADER*)&amp;PropChangeParams, <span class="built_in"><span class="keyword">sizeof</span></span>(PropChangeParams)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SetupDiSetClassInstallParams errorcode = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Call the ClassInstaller and perform the change.</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">SetupDiCallClassInstaller</span>(DIF_PROPERTYCHANGE, hDevInfo, &amp;DeviceInfoData))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SetupDiCallClassInstaller errorcode = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetDevInfo</span><span class="params">(<span class="keyword">char</span>* guidstring, <span class="keyword">int</span> nStatus, <span class="keyword">char</span>* Service_Name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//HDEVINFO hDevinfo = SetupDiGetClassDevs(NULL, 0, 0, DIGCF_ALLCLASSES | DIGCF_PRESENT);</span></span><br><span class="line">GUID devGUID;</span><br><span class="line"><span class="built_in">ZeroMemory</span>(&amp;devGUID, <span class="built_in"><span class="keyword">sizeof</span></span>(GUID));</span><br><span class="line">TCHAR* GUIDString = <span class="literal">NULL</span>;</span><br><span class="line">GUIDString = (TCHAR*)(guidstring);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">UuidFromString</span>((RPC_CSTR)GUIDString, &amp;devGUID))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">HDEVINFO hDevinfo = <span class="built_in">SetupDiGetClassDevs</span>(&amp;devGUID, <span class="number">0</span>, <span class="number">0</span>, DIGCF_PRESENT);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (hDevinfo == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">SP_DEVINFO_DATA data;</span><br><span class="line">DWORD nindex;</span><br><span class="line">LPTSTR szBuf = <span class="literal">NULL</span>;</span><br><span class="line">DWORD DataT;</span><br><span class="line">DWORD buffsize = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(&amp;data, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(SP_DEVINFO_DATA));</span><br><span class="line">data.cbSize = <span class="built_in"><span class="keyword">sizeof</span></span>(SP_DEVINFO_DATA);</span><br><span class="line"><span class="keyword">for</span> (nindex = <span class="number">0</span>; <span class="built_in">SetupDiEnumDeviceInfo</span>(hDevinfo, nindex, &amp;data); ++nindex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;%d %Id\n&quot;, data.DevInst,data.Reserved);</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">SetupDiGetDeviceRegistryProperty</span>(hDevinfo, &amp;data, SPDRP_SERVICE, &amp;DataT, (PBYTE)szBuf, buffsize, &amp;buffsize))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">GetLastError</span>() == ERROR_INSUFFICIENT_BUFFER) &#123;</span><br><span class="line"><span class="keyword">if</span> (szBuf) &#123;</span><br><span class="line"><span class="built_in">LocalFree</span>(szBuf);</span><br><span class="line">&#125;</span><br><span class="line">szBuf = (LPTSTR)<span class="built_in">LocalAlloc</span>(LPTR, buffsize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> This_Service[<span class="built_in"><span class="keyword">sizeof</span></span>(szBuf) * <span class="number">4</span>]; <span class="keyword">int</span> n;</span><br><span class="line">n = <span class="built_in">sprintf_s</span>(This_Service, <span class="string">&quot;%s&quot;</span>, szBuf);</span><br><span class="line"><span class="keyword">if</span> (szBuf &amp;&amp; (string)Service_Name == (string)This_Service)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;已发现通用串行总线控制器，GUID：&quot;</span>);</span><br><span class="line"><span class="built_in">FormatGUID</span>(data.ClassGuid);</span><br><span class="line">SP_PROPCHANGE_PARAMS procChange = &#123; <span class="built_in"><span class="keyword">sizeof</span></span>(SP_CLASSINSTALL_HEADER) &#125;;</span><br><span class="line">procChange.ClassInstallHeader.InstallFunction = DIF_PROPERTYCHANGE;</span><br><span class="line">procChange.Scope = DICS_FLAG_GLOBAL;</span><br><span class="line">procChange.StateChange = DICS_DISABLE;</span><br><span class="line"><span class="keyword">if</span> (nStatus == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;即将禁用USB根集线器，目标服务：%s\n&quot;</span>, szBuf);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line">res = <span class="built_in">ChangeStatus</span>(DICS_DISABLE, nindex, hDevinfo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nStatus == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;即将启用USB根集线器，目标服务：%s\n&quot;</span>, szBuf);</span><br><span class="line">res = <span class="built_in">ChangeStatus</span>(DICS_ENABLE, nindex, hDevinfo);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;已启用USB根集线器\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (res) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;启停过程异常，请在设备管理器中查看集线器状态\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作失败!枚举或设置参数过程引发异常\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前改动已生效\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GetDevInfo</span>((<span class="keyword">char</span>*)<span class="string">&quot;36FC9E60-C465-11CF-8056-444553540000&quot;</span>,<span class="number">0</span>, (<span class="keyword">char</span>*)<span class="string">&quot;iusb3hub&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">GetDevInfo</span>((<span class="keyword">char</span>*)<span class="string">&quot;36FC9E60-C465-11CF-8056-444553540000&quot;</span>,<span class="number">1</span>, (<span class="keyword">char</span>*)<span class="string">&quot;iusb3hub&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h2><p>如果要生成动态链接库，需要修改函数的声明与定义方式<br>如下所示：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个宏，直接使用也是可以的</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLLEXPORT extern <span class="meta-string">&quot;C&quot;</span> __declspec(dllexport)</span></span><br><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="function">DLLEXPORT <span class="keyword">void</span> <span class="title">FormatGUID</span><span class="params">(GUID guid)</span></span>;</span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="function">DLLEXPORT <span class="keyword">void</span> <span class="title">FormatGUID</span><span class="params">(GUID guid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout.<span class="built_in">fill</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">cout.<span class="built_in">width</span>(<span class="number">8</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">setiosflags</span>(ios::uppercase) &lt;&lt; hex &lt;&lt; guid.Data1</span><br><span class="line">&lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; guid.Data2 &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; guid.Data3 &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout.<span class="built_in">fill</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">cout.<span class="built_in">width</span>(<span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; (<span class="keyword">int</span>)guid.Data4[j];</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用DLL"><a href="#调用DLL" class="headerlink" title="调用DLL"></a>调用DLL</h2><p>生成动态链接库后可以在python中调用，以下是一个例子:<br>ps:在cmd以外的地方运行py时，无法看到C代码中printf的输出  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">UsbControl = ctypes.cdll.LoadLibrary(<span class="string">&quot;DllUSB.DLL&quot;</span>)</span><br><span class="line"><span class="comment"># 一定要注意参数类型，不能直接传递字符串</span></span><br><span class="line">GUID = ctypes.c_char_p(<span class="string">b&#x27;36FC9E60-C465-11CF-8056-444553540000&#x27;</span>)</span><br><span class="line">Service_Name = ctypes.c_char_p(<span class="string">b&#x27;iusb3hub&#x27;</span>)</span><br><span class="line">UsbControl.GetDevInfo(GUID,<span class="number">0</span>,Service_Name)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">UsbControl.GetDevInfo(GUID,<span class="number">1</span>,Service_Name)</span><br></pre></td></tr></table></figure><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>如何获取GUID?<br>右击我的电脑，点击管理，点击设备管理器，找到目标设备，右键，点击属性，点击详细信息，选择设备类GUID即可看到<br>如果你懒得手打，可以使用WMIC或者RW工具，此外devguid.h和usbiodef.h两个头文件中也存储有设备的GUID</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 黑白科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用系统代理时python和go无法获取依赖</title>
      <link href="/2021/06/18/%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%E6%97%B6python%E5%92%8Cgo%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E4%BE%9D%E8%B5%96/"/>
      <url>/2021/06/18/%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%E6%97%B6python%E5%92%8Cgo%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>python的依赖管理工具是pip，需要什么包时在命令行敲pip install xxx即可。go获取依赖可以使用go get xxx，都是比较方便的，但是如果把敲代码的环境换到公司，使用http代理的情况下，会遇到ssl错误，记录下如何方便的获取依赖，不至于次次开热点..  </p><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>因为会报ssl错误，所以折衷的方法是使用http镜像，国内可以使用的是阿里云镜像<br><code>http://mirrors.aliyun.com/pypi/simple/</code><br>当然，它也有https版本<br><strong>主要解决方案</strong><br>在用户文件夹下新建<code>pip</code>目录，在其中新建<code>pip.ini</code>，贴入以下内容：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url=http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h2 id="go"><a href="#go" class="headerlink" title="go"></a>go</h2><p>解决go的问题花费了更多的时间去检索，因为经常搜索到的是使用国内镜像，阿里云或者七牛云啥的…实际上根本不对应我的问题<br><strong>主要解决方案</strong><br>开启go代理模式（命令行）：<br><code>go env -w GO111MODULE=on</code><br>切换镜像（命令行）：<br><code>go env -w GOPROXY=https://proxy.golang.com.cn,direct</code><br>添加两个环境变量（请根据实际情况填写代理服务器）：<br>http_proxy(变量名):<code>http://127.0.0.1:8080</code><br>https_proxy(变量名):<code>http://127.0.0.1:8080</code>  </p><h2 id="over"><a href="#over" class="headerlink" title="over"></a>over</h2>]]></content>
      
      
      <categories>
          
          <category> 技术至上 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决vs2019无法下载安装</title>
      <link href="/2021/05/20/%E8%A7%A3%E5%86%B3vs2019%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/"/>
      <url>/2021/05/20/%E8%A7%A3%E5%86%B3vs2019%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>好久没有更新文章，自己的网站都有点不认识了，实在是有点点忙<br>最近安装python依赖的时候遇到需要visual C++ 14.0工具集，因此需要visual studio installer来安装<br>可是因为dns问题一直无法下载，翻遍全网，今天终于找到了解决方案  </p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>无法正确解析到aka.ms<br>在命令行ping了一下，发现访问的是127.0.0.1。。<br>在ipaddress找对应的dns，结果也都不对  </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>修改IPV4协议，手动获取dns，首选dns设置为4.2.2.1，备用dns设置为4.2.2.2<br>然后在命令行刷新dns：<code>ipconfig /flushdns</code><br>再ping aka.ms应该就能得到正确的ip<br>你可以下载完把dns改回去，或者把这个ip添加到本地hosts里面，位置在<code>C:\Windows\System32\drivers\etc\hosts</code><br>添加完毕就可以把dns设置为自动获取，然后再刷新dns即可</p>]]></content>
      
      
      <categories>
          
          <category> 技术至上 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译Linux内核并添加系统调用</title>
      <link href="/2021/04/18/%E7%BC%96%E8%AF%91Linux%E5%86%85%E6%A0%B8%E5%B9%B6%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
      <url>/2021/04/18/%E7%BC%96%E8%AF%91Linux%E5%86%85%E6%A0%B8%E5%B9%B6%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天无聊。。好像我一直都很无聊，想着用VS2019为Linux开发应用程序，过程比较顺利，安装完相应的组件直接建立解决方案就OK了。<br>然而我觉得用图形化的Linux来作为调试客户端有点占内存（这里用的是本地的虚拟机），所以我就去Ubuntu官网下载了server版，只有命令行窗口，内存分配了2G，暂时解决了我的问题<br>可是新的疑问产生了，Linux是最伟大的开源软件，可以很方便的得到它的源代码，那么要经过什么样的过程，这些源代码才会变成供我们使用的操作系统呢？<br>带着这个疑问，我打开了百度搜索，结果耗费了6个小时，不过好在编译成功了  </p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p><a href="https://www.virtualbox.org/wiki/Downloads" title="Oracle VM VirtualBox">Oracle VM VirtualBox</a><br><a href="https://ubuntu.com/download/server" title="Ubuntu-Server">Ubuntu20.04-Server</a><br><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/" title="linux-5.12-rc7">linux-5.12-rc7</a><br>如何在VM Box中安装Ubuntu Server还请充分利用网络资源</p><h2 id="Let’s-Go"><a href="#Let’s-Go" class="headerlink" title="Let’s Go!"></a>Let’s Go!</h2><p><strong>传输内核</strong><br>你可以直接使用wget命令获取Linux内核，当然这需要你的虚拟机联网，命令如下：<br><code>wget https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/linux-5.12-rc7.tar.gz</code><br>介于国内和谐的网络环境，你可以使用迅雷下载，然后使用scp命令传输上去，命令如下：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">需要终端连接工具，这里推荐git bash，安装Windows版本的git就可以得到</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ljc545w是我所使用的用户名，后面的IP是虚拟机地址，请替换成你自己的内容</span></span><br><span class="line">scp linux-5.12-rc7.tar.gz ljc545w@192.168.1.4:~/</span><br></pre></td></tr></table></figure><p><strong>解压缩</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar xvzf linux-5.12-rc7.tar.gz -C /usr/src/</span><br></pre></td></tr></table></figure><p><strong>安装依赖</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">执行该命令后可以解决大多数问题</span></span><br><span class="line">sudo apt-get install git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison</span><br></pre></td></tr></table></figure><p><strong>配置文件</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/src/linux-5.12-rc7</span><br><span class="line"><span class="meta">#</span><span class="bash">可以使用已有的配置文件，但编译时间会很久</span></span><br><span class="line">sudo cp /boot/config-5.4.0-72-generic .config</span><br><span class="line"><span class="meta">#</span><span class="bash">执行以下命令，在弹出的菜单里先选择save再<span class="built_in">exit</span></span></span><br><span class="line">sudo make menuconfig</span><br><span class="line"><span class="meta">#</span><span class="bash">或者使用默认配置，编译时间会大幅缩短</span></span><br><span class="line">sudo make defconfig</span><br></pre></td></tr></table></figure><p><em><strong>一个错误</strong></em><br>如果使用已有的配置文件，需要注释掉一条语句，不然编译过程会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim .config</span><br><span class="line"><span class="meta">#</span><span class="bash">在倒数200行左右找到如下语句并注释掉，在开头加<span class="comment">#即可</span></span></span><br><span class="line">CONFIG_SYSTEM_TRUSTED_KEYS=&quot;debian/canonical-certs.pem&quot;</span><br></pre></td></tr></table></figure><p>注意：在按i进入编辑模式前按shift+g可以快速跳到尾行</p><h3 id="添加系统调用"><a href="#添加系统调用" class="headerlink" title="添加系统调用"></a>添加系统调用</h3><p><strong>修改sys.c</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/src/linux-5.12-rc7/kernel/sys.c</span><br></pre></td></tr></table></figure><p>在末尾贴入以下代码：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SYSCALL_DEFINE1</span>(ljc545w,<span class="keyword">char</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printk</span>(<span class="string">&quot;ljc545w的系统调用!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(n&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;n&lt;=<span class="string">&#x27;9&#x27;</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;n&lt;=<span class="string">&#x27;z&#x27;</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改syscalls.h</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/src/linux-5.12-rc7/include/linux/syscalls.h</span><br><span class="line"><span class="meta">#</span><span class="bash">在末尾添加</span></span><br><span class="line">asmlinkage long sys_ljc545w(char n);</span><br></pre></td></tr></table></figure><p><strong>修改syscall_64.tbl</strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/src/linux-5.12-rc7/arch/x86/entry/syscalls/syscall_64.tbl</span><br></pre></td></tr></table></figure><p>添加一个系统调用号，如图所示，443就是我添加的，注意不要与已有调用号重复了<br><img src="https://www.ljczero.top/media/editor/%E6%8D%95%E8%8E%B7_20210418211103079550.JPG" alt="添加系统调用号">  </p><h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h3><p>可以使用如下命令开始编译：<br><code>sudo make</code><br>或者使用多线程，n表示cpu核数*2，如果是两核就写j4：<br><code>sudo make -jn</code><br>如果你使用现有的配置文件，这会是一个漫长的过程…   </p><hr><p>two years later…<br>OK，现在你已经编译完成了，使用如下命令来安装吧~  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">为内核安装模块</span></span><br><span class="line">sudo make modules_install</span><br><span class="line"><span class="meta">#</span><span class="bash">将内核安装到当前系统</span></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>这一步也许会很久，也许一下就好了  </p><h3 id="启用引导菜单"><a href="#启用引导菜单" class="headerlink" title="启用引导菜单"></a>启用引导菜单</h3><p>内核安装完毕会自动更新grub2配置文件，但是引导菜单默认是跳过的，现在我们启用它  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/default/grub</span><br><span class="line"><span class="meta">#</span><span class="bash">这一行要注释掉</span></span><br><span class="line">GRUB_TIMEOUT_STYLE=hidden</span><br><span class="line"><span class="meta">#</span><span class="bash">将等待时间设为10</span></span><br><span class="line">GRUB_TIMEOUT=10</span><br><span class="line"><span class="meta">#</span><span class="bash">更新配置文件</span></span><br><span class="line">sudo update-grub2</span><br></pre></td></tr></table></figure><p>然后使用<code>sudo reboot</code>命令重启虚拟机，就可以看到引导菜单了<br><img src="https://www.ljczero.top/media/editor/%E6%8D%95%E8%8E%B71_20210418212511764363.JPG" alt="引导菜单"><br>选择Advanced options，点击Enter，可以看到下图：<br><img src="https://www.ljczero.top/media/editor/%E6%8D%95%E8%8E%B72_20210418212605769552.JPG" alt="内核列表"><br>选择自己编译的内核，回车即可进入系统<br>文章写完我试了一下，好像Ubuntu那个选项就是刚编译的内核  </p><h3 id="校验系统调用"><a href="#校验系统调用" class="headerlink" title="校验系统调用"></a>校验系统调用</h3><p>这里提供两种方案，第一种是查询关键字  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/kallsyms | grep ljc545w</span><br></pre></td></tr></table></figure><p>或者写一个C程序，<code>vim mycall.c</code>，内容如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;error.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> n;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please Enter a symbol:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;n);</span><br><span class="line">        <span class="comment">//这里用到了系统调用号</span></span><br><span class="line">        t=syscall(<span class="number">443</span>,n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;System call sys_ljc545w_syscall return %ld\n&quot;</span>,t);</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;This is a number.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;This is a small letter.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;This is another notation.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用gcc编译</strong><br><code>gcc -o mycall.out mycall.c</code><br><strong>执行</strong><br><code>./mycall.out</code><br>根据提示输入一个字符，即可看到系统调用的返回值即相应的判断结果:<br><img src="https://www.ljczero.top/media/editor/%E6%8D%95%E8%8E%B73_20210418213352162562.JPG" alt="返回结果"><br><strong>查看printk信息</strong><br>在系统调用里面我们添加一行printk打印调用日志，这一行默认是不显示在命令行窗口的，可以使用dmesg来查看：<br><img src="https://www.ljczero.top/media/editor/%E6%8D%95%E8%8E%B74_20210418222541704076.JPG" alt="dmesg"></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>一下午踩了不少坑，主要是sys.c中的声明方式，跟网上多数教程提到的不太一样，所以编译过程中报错了，不过幸好，一个下午搞定，以后可以为Linux添加一些自己的想法了。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用superisor管理进程</title>
      <link href="/2021/03/13/%E4%BD%BF%E7%94%A8superisor%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B/"/>
      <url>/2021/03/13/%E4%BD%BF%E7%94%A8superisor%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天想使用supevisor管理Linux中的进程，主要是uwsgi，因为我现在的服务器上有三个web应用同时在运行，其中一个是wordpress，由nginx独立运行，另外两个采用nginx+uwsgi的方式，这样如果对其中一个作出修改，难免会连带着停掉另外一个的服务，及其不方便，所以想到用supervisor来管理，意外的解决了困扰我很久的缓存问题。</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>安装与启动：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装服务</span></span><br><span class="line">sudo apt install supervisor -y</span><br></pre></td></tr></table></figure><p>查看状态：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service supervisor status</span><br></pre></td></tr></table></figure><p>修改配置文件：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/supervisor/supervisor.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">打开末尾两行的注释</span></span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure><p>添加个人配置：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建文件</span></span><br><span class="line">sudo vim /etc/supervisor/conf.d/myconf.conf</span><br></pre></td></tr></table></figure><p>贴入以下内容：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">;程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class="line">[program:DjangoBlog]</span><br><span class="line">;这是uwsgi的命令，作为参考，分号用于注释该行</span><br><span class="line">;command =/usr/local/bin/uwsgi /home/server/python/DjangoBlog_uwsgi/DjangoBlog.ini</span><br><span class="line">;这条用于启动gunicorn脚本</span><br><span class="line">command = /home/server/python/gunicorn/DjangoBlog.sh</span><br><span class="line">;在 supervisord 启动的时候也自动启动</span><br><span class="line">autostart = true</span><br><span class="line">;进程停止信号</span><br><span class="line">stopsignal=QUIT</span><br><span class="line">;选择执行的用户</span><br><span class="line">user=server</span><br><span class="line">;五秒无异常则认为启动成功</span><br><span class="line">startsecs = 5</span><br><span class="line">;异常退出时的重启次数</span><br><span class="line">startretries = 3</span><br><span class="line">;异常退出自动重启</span><br><span class="line">autorestart = true</span><br><span class="line">;把 stderr 重定向到 stdout，默认 false</span><br><span class="line">redirect_stderr = true</span><br><span class="line">;日志文件最大值</span><br><span class="line">stdout_logfile_maxbytes = 20MB</span><br><span class="line">stdout_logfile = /var/log/DjangoBlog_stdout.log</span><br><span class="line">stderr_logfile = /var/log/DjangoBlog_err.log</span><br></pre></td></tr></table></figure><p>在使用supervisor时需要注释掉uwsgi和gunicorn的deamon选项。<br>其他关于gunicorn和uwsgi、nginx的配置本文不再叙述  </p><h2 id="管理进程"><a href="#管理进程" class="headerlink" title="管理进程"></a>管理进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">更新配置</span></span><br><span class="line">sudo supervisorctl update</span><br><span class="line"><span class="meta">#</span><span class="bash">重启，所有进程会一并重启</span></span><br><span class="line">sudo supervisorctl reload</span><br><span class="line"><span class="meta">#</span><span class="bash">查看进程运行状态</span></span><br><span class="line">sudo supervisorctl status</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭某个服务</span></span><br><span class="line">sudo supervisorctl stop DjangoBlog</span><br><span class="line"><span class="meta">#</span><span class="bash">启动某个服务</span></span><br><span class="line">sudo supervisorctl start DjangoBlog</span><br><span class="line"><span class="meta">#</span><span class="bash">重启某个服务</span></span><br><span class="line">sudo supervisorctl restart DjangoBlog</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭|启动|重启supervisor服务</span></span><br><span class="line">sudo service supervisor stop | start | restart</span><br></pre></td></tr></table></figure><p>此外，<code>sudo supervisorctl</code>回车可以进入shell模式进行管理  </p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>关于缓存问题的解决，就是把多线程替换为单线程，多线程下一个线程的内容更新了，但是其他的线程还是原来的样子，页面刷新的时候就会出现缓存问题。<br>如果发现没有superisor配置文件，请搜索如何安装supervisor（雾），请参考下面的内容：<br>1、使用命令创建：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建,如果提示权限不够请加sudo，还不行的话可以创建到普通目录，然后用mv命令移过去</span></span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">选择该文件，权限不够请加sudo</span></span><br><span class="line">supervisord -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure><p>2、自行创建：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure><p>贴入以下内容：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">; supervisor config file</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file=/var/run/supervisor.sock   ; (the path to the socket file)</span><br><span class="line">chmod=0700                       ; sockef file mode (default 0700)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)</span><br><span class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">childlogdir=/var/log/supervisor            ; (&#x27;AUTO&#x27; child log dir, default $TEMP)</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket</span><br><span class="line"></span><br><span class="line">; The [include] section can just contain the &quot;files&quot; setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace or</span><br><span class="line">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class="line">; interpreted as relative to this file.  Included files *cannot*</span><br><span class="line">; include files themselves.</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure><p>再使用<code>supervisord -c /etc/supervisor/supervisord.conf</code>命令</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu虚拟机中让apt使用代理</title>
      <link href="/2021/03/11/ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E8%AE%A9apt%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/"/>
      <url>/2021/03/11/ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E8%AE%A9apt%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>有时候办公会用到Ubuntu虚拟机做测试，可是仅仅使用系统设置的代理，浏览器能够上网，无法安装需要的各种服务和第三方包，百度后得到方法，可以让apt也走代理。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><code>sudo vim /etc/apt/apt.conf.d/proxy.conf</code><br>贴入以下内容：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意修改用户名和密码、服务器和端口</span></span><br><span class="line">Acquire::http::Proxy &quot;http://user:password@proxy.server:port/&quot;;</span><br><span class="line">Acquire::https::Proxy &quot;http://user:password@proxy.server:port/&quot;;</span><br></pre></td></tr></table></figure><h2 id="为git配置代理："><a href="#为git配置代理：" class="headerlink" title="为git配置代理："></a>为git配置代理：</h2><p>使用如下命令：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">socks5</span></span><br><span class="line">git config --global http.proxy &#x27;socks5://127.0.0.1:1080&#x27;</span><br><span class="line">git config --global https.proxy &#x27;socks5://127.0.0.1:1080&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">http</span></span><br><span class="line">git config --global http.proxy &#x27;http://127.0.0.1:1080&#x27;</span><br><span class="line">git config --global https.proxy &#x27;http://127.0.0.1:1080&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>取消代理：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>只对github设置代理：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">socks5</span></span><br><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</span><br><span class="line"><span class="meta">#</span><span class="bash">http</span></span><br><span class="line">git config --global http.https://github.com.proxy http://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>取消代理：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.https://github.com.proxy</span><br></pre></td></tr></table></figure><p>如果代理需要验证，则写为如下形式：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://username:password@host:port</span><br></pre></td></tr></table></figure><h2 id="为ssh配置代理"><a href="#为ssh配置代理" class="headerlink" title="为ssh配置代理"></a>为ssh配置代理</h2><p>socks：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">socks4</span></span><br><span class="line">ssh -p port -o &quot;ProxyCommand=nc -X 4 -x proxyhost:proxyport %h %p&quot; username@ipaddress</span><br><span class="line"><span class="meta">#</span><span class="bash">socks5</span></span><br><span class="line">ssh -p port -o &quot;ProxyCommand=nc -X 5 -x proxyhost:proxyport %h %p&quot; username@ipaddress</span><br><span class="line"><span class="meta">#</span><span class="bash">https</span></span><br><span class="line">ssh -p port -o &quot;ProxyCommand=nc -X connect -x proxyhost:proxyport %h %p&quot; username@ipaddress</span><br></pre></td></tr></table></figure><p>http：<br>安装corkscrew：<br><code>sudo apt install corkscrew</code><br>创建配置文件：<br><code>sudo vim ~/.ssh/config</code><br>贴入以下内容：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">*代表对所有主机执行代理</span></span><br><span class="line">Host *</span><br><span class="line">ProxyCommand corkscrew http-proxy.example.com 8080 %h %p</span><br></pre></td></tr></table></figure><p>或者对部分主机执行代理：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host aliyun</span><br><span class="line">Hostname 1.1.1.1</span><br><span class="line">User ubuntu</span><br><span class="line">ProxyCommand corkscrew http-proxy.example.com 8080 %h %p</span><br></pre></td></tr></table></figure><h2 id="配置ssh免密登录"><a href="#配置ssh免密登录" class="headerlink" title="配置ssh免密登录"></a>配置ssh免密登录</h2><p>生成密钥对：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -P &#x27;&#x27; -f id_rsa</span><br></pre></td></tr></table></figure><p>ls发现多了两个文件，将id_rsa.pub中的内容(以文本方式打开)贴进远程主机的authorized_keys文件里<br>连接远程主机：<br><code>ssh user@host</code><br>编辑目标文件：<br><code>sudo vim ~/.ssh/authorized_keys</code><br>将公钥内容粘贴进去即可，如有多个请换行输入</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下配置appium自动化测试环境</title>
      <link href="/2021/03/03/Windows%E4%B8%8B%E9%85%8D%E7%BD%AEappium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/03/03/Windows%E4%B8%8B%E9%85%8D%E7%BD%AEappium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近看猪八戒，想接单赚点外快，看了半天没有爬虫需求，看到什么制作算命网站、微信朋友圈采集。ok，来了点兴趣，之前做app爬虫使用的fiddler+xposed，可惜这种方法对于混淆+双向证书校验无效。在搜索过程中看到appium，对应网页端的selenium，本文记录下配置环境的过程。</p><h2 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h2><p><a href="https://developer.android.google.cn/studio/" title="下载地址">下载地址</a><br><a href="https://blog.csdn.net/qq_41976613/article/details/91432304" title="安装教程">安装教程</a><br>注意配置好SDK的安装目录，并且务必记住此目录，等下需要添加虚拟环境   </p><h2 id="Appium"><a href="#Appium" class="headerlink" title="Appium"></a>Appium</h2><p>安装python包<br><code>pip install Appium-Python-Client</code>  </p><hr><p>安装appium-desktop<br><a href="https://github.com/appium/appium-desktop/releases/tag/v1.20.2" title="Github地址">Github地址</a><br>选择exe版本下载安装<br>如果下载速度过慢请使用手机流量下载，再传文件到电脑<br>安装过程也没有什么坑，只是会默认安装到C盘  </p><hr><p>添加虚拟环境：<br>在系统变量里添加变量名<code>ANDROID_HOME</code>，变量值为Android studio的SDK安装根目录<br>在系统变量Path里面添加<code>%ANDROID_HOME%\platform-tools</code>，注意与前一个值之间要有分号间隔<br>添加完成后按Win+R打开cmd，输入adb version验证是否配置成功  </p><hr><p>其余环境：<br>Microsoft .NET Framework 4.5<br>node.js<br>Java JDK  </p><h2 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h2><p>我使用的是MuMu模拟器，adb连接使用如下命令：<br><code>adb connect 127.0.0.1:7555</code><br>再输入<code>adb devices</code>查看设备<br>输入<code>adb shell</code>进入shell环境  </p><hr><p>获取app包名：<br><a href="https://blog.csdn.net/ezconn/article/details/90712895" title="csdn">csdn</a><br>如果已经安装该app，使用adb连接模拟器，然后在模拟器中启动，再在命令行中执行：<br><code>adb shell dumpsys window w |findstr \/ |findstr name=</code><br>或<br><code>adb shell dumpsys window | findstr mCurrentFocus</code><br>不要进入shell环境执行，findstr是windows命令<br>获取activity<br><a href="https://blog.csdn.net/ezconn/article/details/99885715" title="csdn">csdn</a><br>启动app，执行下列命令<br><code>adb shell dumpsys window w | grep mCurrent</code><br>注意有些app加载完成后获取的activity可能无用，需要loading界面的activity<br>命令行启动app：<br><code>adb shell  am start +包名/.Activity</code><br>执行上述命令即可看到模拟器启动了对应的app，如果失败请查找错误  </p><hr><p>配置Appium Desired Capabilities<br>首先启动Appium-desktop，点击右上角搜索样式按钮  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">#text，操作系统</span></span><br><span class="line">  <span class="string">&quot;platformName&quot;</span>: <span class="string">&quot;Android&quot;</span>,</span><br><span class="line">  <span class="comment">#text，系统版本</span></span><br><span class="line">  <span class="string">&quot;platformVersion&quot;</span>: <span class="string">&quot;6.0.1&quot;</span>,</span><br><span class="line">  <span class="comment">#text，名称（没有硬性要求）</span></span><br><span class="line">  <span class="string">&quot;deviceName&quot;</span>: <span class="string">&quot;MuMu&quot;</span>,</span><br><span class="line">  <span class="comment">#text，app包名（某灵魂交友app）</span></span><br><span class="line">  <span class="string">&quot;appPackage&quot;</span>: <span class="string">&quot;cn.soulapp.android&quot;</span>,</span><br><span class="line">  <span class="comment">#text，对应的activity</span></span><br><span class="line">  <span class="string">&quot;appActivity&quot;</span>: <span class="string">&quot;.ui.splash.SplashActivity&quot;</span>,</span><br><span class="line">  <span class="comment">#bool，在启动时不重置应用</span></span><br><span class="line">  <span class="string">&quot;noReset&quot;</span>: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击右下角Start Session将启动该app并进入调试界面  </p><h2 id="python脚本样例"><a href="#python脚本样例" class="headerlink" title="python脚本样例"></a>python脚本样例</h2><p>需打开模拟器，adb连接，启动appium-desktop（无需点击搜索框）  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入webdriver模块</span></span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#TouchAction执行辅助操作</span></span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.touch_action <span class="keyword">import</span> TouchAction</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造配置文件，与上面写的作用一致</span></span><br><span class="line">caps = &#123;&#125;</span><br><span class="line">caps[<span class="string">&quot;platformName&quot;</span>] = <span class="string">&quot;Android&quot;</span></span><br><span class="line">caps[<span class="string">&quot;platformVersion&quot;</span>] = <span class="string">&quot;6.0.1&quot;</span></span><br><span class="line">caps[<span class="string">&quot;deviceName&quot;</span>] = <span class="string">&quot;MuMu&quot;</span></span><br><span class="line">caps[<span class="string">&quot;appPackage&quot;</span>] = <span class="string">&quot;cn.soulapp.android&quot;</span></span><br><span class="line">caps[<span class="string">&quot;appActivity&quot;</span>] = <span class="string">&quot;.ui.splash.SplashActivity&quot;</span></span><br><span class="line">caps[<span class="string">&quot;noReset&quot;</span>] = <span class="literal">True</span></span><br><span class="line">caps[<span class="string">&quot;ensureWebviewsHavePages&quot;</span>] = <span class="literal">True</span></span><br><span class="line"><span class="comment">#此项可以防止appium在无操作后退出，可以保留600秒</span></span><br><span class="line">caps[<span class="string">&#x27;newCommandTimeout&#x27;</span>]=<span class="number">600</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#连接到appium-desktop，使用caps字典作为配置文件</span></span><br><span class="line">driver = webdriver.Remote(<span class="string">&quot;http://localhost:4723/wd/hub&quot;</span>, caps)</span><br><span class="line"></span><br><span class="line"><span class="comment">#该行代码将执行向上滑动操作，如果无效，可以尝试将long_press替换为press</span></span><br><span class="line">TouchAction(driver).long_press(x=<span class="number">400</span>, y=<span class="number">800</span>).move_to(x=<span class="number">400</span>,y=<span class="number">100</span>).release().perform()</span><br><span class="line"><span class="comment">#该语句执行后app将会退出</span></span><br><span class="line"><span class="comment">#driver.quit()</span></span><br></pre></td></tr></table></figure><p>更多操作请根据需要在网络中检索，总会找到你想要的答案  </p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>配置环境忙活了半天，刷了两三条瞬间就完事儿了，说好的微信朋友圈采集也没有搞</p>]]></content>
      
      
      <categories>
          
          <category> 技术至上 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑白科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>simpleui美化admin+Admin自定义action</title>
      <link href="/2021/02/19/simpleui%E7%BE%8E%E5%8C%96admin+Admin%E8%87%AA%E5%AE%9A%E4%B9%89action/"/>
      <url>/2021/02/19/simpleui%E7%BE%8E%E5%8C%96admin+Admin%E8%87%AA%E5%AE%9A%E4%B9%89action/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天在检索Django开源项目的时候发现了一个漂亮的管理后台，而且只需要pip安装一下，再将app注册到settings.py中，原本简陋的后台就被取代了，简直是不能更贴心。</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://gitee.com/tompeppa/simpleui" title="Gitee">Gitee</a><br><a href="https://github.com/newpanjing/simpleui" title="Github">Github</a><br><a href="https://simpleui.72wo.com/docs/simpleui/doc.html" title="simpleui官方文档">simpleui官方文档</a>  </p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>安装:<br><code>pip install django-simpleui</code><br>注册app:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#settings.py，注意要放到第一行</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">      <span class="string">&#x27;simpleui&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">      ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>是不是很简单~感谢开源世界，我们才可以免费用上这么棒的轮子！  </p><h2 id="我的回合"><a href="#我的回合" class="headerlink" title="我的回合"></a>我的回合</h2><p>当你登录后台，会发现首页有一块内容展示simpleui的版本、项目地址等，也许你想把它隐藏掉（雾），毕竟不是在前端，能看到的也就一小撮人  </p><hr><p>作者应该老早就想到有些不太可爱的用户会去动这个，为了不让大家翻箱倒柜的去改html代码，只需要在settings.py中添加一行：<br><code>SIMPLEUI_HOME_INFO = False</code><br>想要展示的时候再改为True</p><hr><h3 id="自定义action"><a href="#自定义action" class="headerlink" title="自定义action"></a>自定义action</h3><p>将需要的命令以函数的形式写到admin.py中，以下是我写的三个修改music模型的action  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#禁用选中的音乐，在APlayer的播放列表中将不再显示</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_music_status</span>(<span class="params">modeladmin,request,queryset</span>):</span></span><br><span class="line">    queryset.update(status=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#启用选中的音乐</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_music_status</span>(<span class="params">modeladmin,request,queryset</span>):</span></span><br><span class="line">    queryset.update(status=<span class="literal">True</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">变更音乐性质，纯音乐/非纯音乐</span></span><br><span class="line"><span class="string">因为是布尔值，所以更改起来较为简单</span></span><br><span class="line"><span class="string">上面“启用/禁用”功能也可以整合到一起</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_music_status</span>(<span class="params">modeladmin,request,queryset</span>):</span></span><br><span class="line">    <span class="keyword">for</span> music <span class="keyword">in</span> queryset:</span><br><span class="line">        music.peace_music = <span class="keyword">not</span> music.peace_music</span><br><span class="line">        music.save()</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改描述</span></span><br><span class="line">close_music_status.short_description = <span class="string">&#x27;禁用所选音乐&#x27;</span></span><br><span class="line">open_music_status.short_description = <span class="string">&#x27;启用所选音乐&#x27;</span></span><br><span class="line">change_music_status.short_description = <span class="string">&#x27;变更所选音乐性质&#x27;</span></span><br></pre></td></tr></table></figure><p>启用自定义action：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    actions = [open_music_status,close_music_status,change_music_status]</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>上网冲冲浪就能找到好用的东西，真不错。之前费了好大劲去改xadmin，最后还是放弃了。</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用get_queryset控制admin中内容展示</title>
      <link href="/2021/02/19/%E4%BD%BF%E7%94%A8get_queryset%E6%8E%A7%E5%88%B6admin%E4%B8%AD%E5%86%85%E5%AE%B9%E5%B1%95%E7%A4%BA/"/>
      <url>/2021/02/19/%E4%BD%BF%E7%94%A8get_queryset%E6%8E%A7%E5%88%B6admin%E4%B8%AD%E5%86%85%E5%AE%B9%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为本站的文章创作是在后台进行（不要问我为什么不搬到前台来，问就是懒），那如果有多个作者，应该限制该作者仅可以修改自己发布的文章<br>而且作者在修改自己的个人信息时，不应该将权限模块呈现出来，不然人均superuser，那我这个管理员就废废的了<br>由此引发了另外一个问题，本站是开源的，如果有人根据源码写了脚本，获取cookie和csrf_token，带上参数发起post请求更改权限呢？如果这么做有效的话，那就是一个严重的安全漏洞，所幸，测试之后发现除了展示给用户的部分，其他参数都是无效的<br>当然，对我而言担心是多余的，目前网站的用户只有我一个。<br>如果你想把本站源码修改为开放的博客平台，还有一个缓存问题需要解决。  </p><h2 id="筛选文章"><a href="#筛选文章" class="headerlink" title="筛选文章"></a>筛选文章</h2><p>每一篇文章都有对应的change_url，重写以下方法后，如果作者根据文章id构造不属于自己的文章url，进行访问会提示文章不存在。安全性具有保证  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">重写ArticleAdmin的get_queryset方法</span></span><br><span class="line"><span class="string">根据请求的用户返回不同的内容</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        qs = <span class="built_in">super</span>(ArticlelAdmin, self).get_queryset(request)</span><br><span class="line">        <span class="comment">#如果是管理员，则返回所有文章</span></span><br><span class="line">        <span class="keyword">if</span> request.user.is_superuser:</span><br><span class="line">            <span class="keyword">return</span> qs</span><br><span class="line">        <span class="comment">#否则返回该用户的文章</span></span><br><span class="line">        <span class="keyword">return</span> qs.<span class="built_in">filter</span>(author=request.user)</span><br></pre></td></tr></table></figure><h2 id="用户资料"><a href="#用户资料" class="headerlink" title="用户资料"></a>用户资料</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在UserAdmin中，如果要限定可修改的内容，使用fields或exclude是无效的</span></span><br><span class="line"><span class="string">通过dir(模块名)，发现可以通过修改fieldset来实现想要的结果</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        users = <span class="built_in">super</span>(BlogUserAdmin,self).get_queryset(request)</span><br><span class="line">        <span class="comment">#如果是管理员，则可以修改用户的全部属性，并返回全部用户条目</span></span><br><span class="line">        <span class="keyword">if</span> request.user.is_superuser:</span><br><span class="line">            self.fieldsets = ((<span class="string">&#x27;账号信息&#x27;</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>, <span class="string">&#x27;email&#x27;</span>,<span class="string">&#x27;password&#x27;</span>)&#125;), (<span class="string">&#x27;权限&#x27;</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;is_active&#x27;</span>, <span class="string">&#x27;is_staff&#x27;</span>, <span class="string">&#x27;is_superuser&#x27;</span>, <span class="string">&#x27;groups&#x27;</span>, <span class="string">&#x27;user_permissions&#x27;</span>)&#125;), (<span class="string">&#x27;重要日期&#x27;</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;last_login&#x27;</span>, <span class="string">&#x27;date_joined&#x27;</span>)&#125;))</span><br><span class="line">            <span class="keyword">return</span> users</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#如果非管理员，则只允许访问和修改部分信息</span></span><br><span class="line">            self.fieldsets = ((<span class="string">&#x27;账号信息&#x27;</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)&#125;),)</span><br><span class="line">            <span class="comment">#用户条目只返回本人</span></span><br><span class="line">            <span class="keyword">return</span> users.<span class="built_in">filter</span>(<span class="built_in">id</span>=request.user.<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><h2 id="关于缓存"><a href="#关于缓存" class="headerlink" title="关于缓存"></a>关于缓存</h2><p>本站的缓存机制是memcached，缓存对于提高网站的访问速度有重要作用，但作为管理者，我们希望缓存是可控的。原作者提供了一个用于清除缓存的接口，经过尝试发现作用不大，我开始怀疑是不是nginx或者uwsgi的缓存，重启nginx发现缓存仍然存在，再尝试uwsgi的reload命令，ok，缓存全没了，到这里仍然不能确定问题的症结所在，我在作者提供的接口里<code>import uwsgi</code>，然后执行uwsgi.cache_clear()，再次调用接口，发现新生成缓存并未被清理掉，或许还能考虑下是不是浏览器缓存。。好吧，这个问题暂且搁置。如果找到解决办法我再来更新。</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之socket搭建静态页面服务器</title>
      <link href="/2021/02/18/python%E4%B9%8Bsocket%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2021/02/18/python%E4%B9%8Bsocket%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近在学习Django，对于底层的信息交换产生了些许兴趣，而且前段时间看一个同事使用c++写socket，今天我查了点资料，自己也写写试试  </p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#socket相关</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#线程相关</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="comment">#系统模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#正则匹配，从请求中匹配html文件路径</span></span><br><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h2 id="筛查请求"><a href="#筛查请求" class="headerlink" title="筛查请求"></a>筛查请求</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_request_name_from_http</span>(<span class="params">http:<span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line"><span class="comment">#从请求中匹配静态文件地址</span></span><br><span class="line">    r = re.search(<span class="string">r&quot;GET /(.+?) &quot;</span>,http)</span><br><span class="line">    filename = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> r != <span class="literal">None</span>:</span><br><span class="line">        filename = r.group(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#返回相对路径的文件地址</span></span><br><span class="line">    <span class="keyword">return</span> filename</span><br></pre></td></tr></table></figure><h2 id="服务器数据"><a href="#服务器数据" class="headerlink" title="服务器数据"></a>服务器数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建Response header和Response数据，并从服务器发送给用户</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeHtml</span>(<span class="params">client,filename</span>):</span></span><br><span class="line">    rspHead = <span class="literal">None</span></span><br><span class="line">    rspBody = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">        rspHead = <span class="string">&quot;HTTP/1.1 404 error\r\nServer: foreverServer\r\n\r\n&quot;</span></span><br><span class="line">        rspBody = <span class="string">&quot;file not found&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rspHead = <span class="string">&quot;HTTP/1.1 200 OK\r\nServer: foreverServer\r\n\r\n&quot;</span></span><br><span class="line">        html = <span class="built_in">open</span>(filename,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">        rspBody = html.read()</span><br><span class="line">    client.send((rspHead + rspBody).encode(<span class="string">&#x27;UTF-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="线程调用函数"><a href="#线程调用函数" class="headerlink" title="线程调用函数"></a>线程调用函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_socket</span>(<span class="params">client</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#1024代表请求的最大字节数</span></span><br><span class="line">        data = client.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">0</span>:</span><br><span class="line"><span class="comment">#获取目标html文件地址</span></span><br><span class="line">            fileName = get_request_name_from_http(data.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="comment">#获取Response信息后发送到客户端</span></span><br><span class="line">            writeHtml(client, fileName)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line"><span class="comment">#关闭连接</span></span><br><span class="line">        client.close()</span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="comment">#初始化socket服务</span></span><br><span class="line">    server = socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    server.setsockopt(SOL_SOCKET, SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"><span class="comment">#ip和端口，默认为localhost(127.0.0.1)</span></span><br><span class="line">    address = (<span class="string">&#x27;&#x27;</span>,<span class="number">8000</span>)</span><br><span class="line"><span class="comment">#与端口绑定</span></span><br><span class="line">    server.bind(address)</span><br><span class="line"><span class="comment">#监听，括号内为限制连接数量</span></span><br><span class="line">    server.listen(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="comment">#初始化连接</span></span><br><span class="line">            client,client_address = server.accept()</span><br><span class="line"><span class="comment">#输出服务器ip和端口</span></span><br><span class="line">            <span class="built_in">print</span>(client_address)</span><br><span class="line"><span class="comment">#初始化一个线程</span></span><br><span class="line">            p = Thread(target=deal_socket,args=(client,))</span><br><span class="line"><span class="comment">#启动线程</span></span><br><span class="line">            p.start()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line"><span class="comment">#关闭服务器</span></span><br><span class="line">        server.close()</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Thu Feb 18 18:40:58 2021</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Administrator</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_request_name_from_http</span>(<span class="params">http:<span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    r = re.search(<span class="string">r&quot;GET /(.+?) &quot;</span>,http)</span><br><span class="line">    filename = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> r != <span class="literal">None</span>:</span><br><span class="line">        filename = r.group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeHtml</span>(<span class="params">client,filename</span>):</span></span><br><span class="line">    rspHead = <span class="literal">None</span></span><br><span class="line">    rspBody = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">        rspHead = <span class="string">&quot;HTTP/1.1 404 error\r\nServer: foreverServer\r\n\r\n&quot;</span></span><br><span class="line">        rspBody = <span class="string">&quot;file not found&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rspHead = <span class="string">&quot;HTTP/1.1 200 OK\r\nServer: foreverServer\r\n\r\n&quot;</span></span><br><span class="line">        html = <span class="built_in">open</span>(filename,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">        rspBody = html.read()</span><br><span class="line">    client.send((rspHead + rspBody).encode(<span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_socket</span>(<span class="params">client</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = client.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">0</span>:</span><br><span class="line">            fileName = get_request_name_from_http(data.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">            writeHtml(client, fileName)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        client.close()</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    server = socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    server.setsockopt(SOL_SOCKET, SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    address = (<span class="string">&#x27;&#x27;</span>,<span class="number">8000</span>)</span><br><span class="line">    server.bind(address)</span><br><span class="line">    server.listen(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client,client_address = server.accept()</span><br><span class="line">            <span class="built_in">print</span>(client_address)</span><br><span class="line">            p = Thread(target=deal_socket,args=(client,))</span><br><span class="line">            p.start()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        server.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="html和访问"><a href="#html和访问" class="headerlink" title="html和访问"></a>html和访问</h2><p>在py文件同目录下新建index.html:  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行py文件，在浏览器访问<code>127.0.0.1:8000/index.html</code>即可  </p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>代码是从<a href="https://www.jianshu.com/p/4221c2b835a3?tdsourcetag=s_pcqq_aiomsg" title="简书">简书</a>抄来的，下午的时候用的是另一个代码，使用的是Process而非Thread，但是在这里发现了一个小问题，代码封装成类后无法正常访问，明天有空再Debug。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>即将拓展的功能</title>
      <link href="/2021/02/13/%E5%8D%B3%E5%B0%86%E6%8B%93%E5%B1%95%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
      <url>/2021/02/13/%E5%8D%B3%E5%B0%86%E6%8B%93%E5%B1%95%E7%9A%84%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>2月份的博客更新频率降低了很多（小声BB：这是第三篇）<br>目前拓展了几个简单的功能，其一是目录，原作者本来就设计了目录模块，但没有成功渲染目录，我在他工作的基础上作了一些修改，将目录展现出来，但有个棘手的问题，目录是强制增加的，不以文章作者的意志为转移<br>另外，我对后台权限做了细微的修改，可以拓展一些用户组，比如游客、作者、管理员，作者同样可以登录后台进行创作，但只对自己发布的内容有删改权限<br>目前上面两个功能已经在我的虚拟机里完美呈现了，，，好吧，还有另外一个bug，登录admin进行身份验证时，如果is_staff为否，会提示密码错误，正常应该提示权限不足才对！不过这个bug不是特别严重。有空的时候，我就会将上面的功能移植到服务器，届时如果有人愿意在本站进行创作，请与我联系<br>大概是不会有人的~</p>]]></content>
      
      
      <categories>
          
          <category> 技术至上 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>今天过年呢</title>
      <link href="/2021/02/11/%E4%BB%8A%E5%A4%A9%E8%BF%87%E5%B9%B4%E5%91%A2/"/>
      <url>/2021/02/11/%E4%BB%8A%E5%A4%A9%E8%BF%87%E5%B9%B4%E5%91%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="随便敲几个字吧"><a href="#随便敲几个字吧" class="headerlink" title="随便敲几个字吧"></a>随便敲几个字吧</h2><p>博客好久没更新了，趁着除夕夜，敲几个字，缓解一下心情。<br>这个年过的并不怎么开心，情绪被各种琐事把控着<br>其一是上火，从武汉回家后就开始出现嘴皮干、鼻孔干，现在好了很多，睡一觉，明天应该完全好了<br>其二是网络传递的信息，我现在常用的社交平台是贴吧和Soul，都在向我推荐我完全不想费心思去关注、但是却又让人很好奇的的内容<br>比如说，贴吧向我推荐的都是“女拳”做了什么，比如冲了英雄联盟官方赛事和B站，抗吧老哥们一直吐槽。。Soul推荐的是男孩子做了什么事情让女孩子反感（大多物质相关），然而我觉得有些事情还是挺正常的。我感觉那些推荐的内容都是在挑起男女之间的矛盾，作为一个男孩子，我不可避免的会站在男生的角度去想问题，我想怒斥那些“女拳”和无理取闹的女孩子，如果这么做又感觉像是着了某些人的道。谁也不知道是何种势力在引导舆论，又是什么把人们的价值观带偏了，中华田园女权泛滥成灾，资本家们对女孩子的捧杀，一石激起千层浪，社会的矛盾就这样凸显出来，矛盾积累到一定程度必须要转移，向内消化或者向外入侵，中国人民一贯热爱和平，向外入侵是不可能的，那该怎么向内消化呢，这似乎不是我这平头老百姓该思考的问题。<br>以后要多站在女孩子的立场，换位思考去想事情，这样才不会陷入极端男权的漩涡。但是那些拳师什么的，赶紧远离我的生活，求求了。<br>再说说别的事情吧，最近睡觉老是梦到悦悦，大概是她正在慢慢忘记我，这样也好。。<br>另外，我布下了一盘棋，开局还不错，但是我很鄙夷自己的做法，偏偏要去考验人性，怕不是疯了，这件事暂且不便详述。<br>等过完年，就考虑换工作啦，或者辞职考研，必须早做打算才好。<br>不得不说，敲完这些字，心中的阴霾一扫而空，世界又变得美好起来了。<br>小周今天还给俺发了拜年红包来着，开心~</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为网站添加APlayer控件</title>
      <link href="/2021/02/01/%E4%B8%BA%E7%BD%91%E7%AB%99%E6%B7%BB%E5%8A%A0APlayer%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/02/01/%E4%B8%BA%E7%BD%91%E7%AB%99%E6%B7%BB%E5%8A%A0APlayer%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="源代码和文档"><a href="#源代码和文档" class="headerlink" title="源代码和文档"></a>源代码和文档</h2><p><a href="https://github.com/DIYgod/APlayer" title="Github">Github</a><br><a href="https://aplayer.js.org/#/zh-Hans/" title="APlayer中文文档">APlayer中文文档</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我默认你拥有Django基础知识，并且设备中安装了python和Django环境，会使用pip包管理工具  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装Django</span></span><br><span class="line">pip install django</span><br><span class="line"><span class="comment">#创建项目和app</span></span><br><span class="line">django-admin startproject myproject</span><br><span class="line">cd myproject</span><br><span class="line">python manage.py startapp myplayer</span><br><span class="line"><span class="comment">#创建超级用户</span></span><br><span class="line">python manage.py createsuperuser</span><br><span class="line"><span class="comment">#如果报错先迁移一下数据库</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>myproject/urls.py  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> myplayer.views <span class="keyword">import</span> AplayerView</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;myplayer/&#x27;</span>,AplayerView.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>myproject/settings.py  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">...</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="comment">#---------修改内容-----------</span></span><br><span class="line">    <span class="string">&#x27;myplayer&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">...</span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="comment">#-------修改内容--------</span></span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR,<span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line">...</span><br><span class="line"><span class="comment">#添加内容</span></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static&#x27;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="模型与视图"><a href="#模型与视图" class="headerlink" title="模型与视图"></a>模型与视图</h2><p>myplayer/models.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils.timezone <span class="keyword">import</span> now</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Music</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    created_time = models.DateTimeField(<span class="string">&#x27;创建时间&#x27;</span>, default=now)</span><br><span class="line">    music_name = models.CharField(verbose_name=<span class="string">&#x27;歌曲&#x27;</span>,max_length=<span class="number">100</span>)</span><br><span class="line">    artist = models.CharField(verbose_name=<span class="string">&#x27;歌手&#x27;</span>,max_length=<span class="number">40</span>)</span><br><span class="line">    music_url = models.CharField(verbose_name=<span class="string">&#x27;播放链接&#x27;</span>,max_length=<span class="number">200</span>)</span><br><span class="line">    image_url = models.CharField(verbose_name=<span class="string">&#x27;图片链接&#x27;</span>,max_length=<span class="number">200</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    lrc = models.TextField(verbose_name=<span class="string">&#x27;歌词&#x27;</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    status = models.BooleanField(verbose_name=<span class="string">&#x27;是否启用&#x27;</span>,default=<span class="literal">True</span>)</span><br><span class="line">    peace_music = models.BooleanField(verbose_name=<span class="string">&#x27;纯音乐&#x27;</span>,default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;音乐&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.lrc <span class="keyword">and</span> <span class="keyword">not</span> self.peace_music:</span><br><span class="line">            self.lrc = <span class="string">&#x27;[00:00.000] 暂无歌词\\n[00:01.000] 暂无歌词\\n[00:02.000] 暂无歌词\\n&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> self.lrc <span class="keyword">and</span> self.peace_music:</span><br><span class="line">            self.lrc = <span class="string">&#x27;[00:00.000] 纯音乐，请欣赏\\n[00:01.000] 纯音乐，请欣赏\\n[00:02.000] 纯音乐，请欣赏\\n&#x27;</span></span><br><span class="line">        <span class="built_in">super</span>(Music,self).save(*args,**kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.music_name + <span class="string">&quot;-&quot;</span> + self.artist</span><br></pre></td></tr></table></figure><p>myplayer/views.py  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> myplayer.models <span class="keyword">import</span> Music</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AplayerView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span></span><br><span class="line">        musics = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> Music.objects.<span class="built_in">filter</span>(status=<span class="literal">True</span>):</span><br><span class="line">            musics.append(&#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>:i.music_name,</span><br><span class="line">                <span class="string">&#x27;artist&#x27;</span>:i.artist,</span><br><span class="line">                <span class="string">&#x27;url&#x27;</span>:i.music_url,</span><br><span class="line">                <span class="string">&#x27;cover&#x27;</span>:i.image_url,</span><br><span class="line">                <span class="string">&#x27;lrc&#x27;</span>:i.lrc,</span><br><span class="line">            &#125;)</span><br><span class="line">        context = &#123;<span class="string">&#x27;musics&#x27;</span>:<span class="built_in">str</span>(musics)[<span class="number">1</span>:-<span class="number">1</span>].replace(<span class="string">&#x27;&#125;, &#x27;</span>,<span class="string">&#x27;&#125;*#&#x27;</span>)&#125;</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;APlayer/myplayer.html&#x27;</span>,context=context)</span><br></pre></td></tr></table></figure><h2 id="管理后台"><a href="#管理后台" class="headerlink" title="管理后台"></a>管理后台</h2><p>myplayer/admin.py  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Music</span><br><span class="line"><span class="keyword">from</span> django.utils.html <span class="keyword">import</span> format_html</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    exclude = (<span class="string">&#x27;created_time&#x27;</span>,)</span><br><span class="line">    list_display = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;music_name&#x27;</span>,<span class="string">&#x27;artist&#x27;</span>,<span class="string">&#x27;created_time&#x27;</span>,<span class="string">&#x27;image_link&#x27;</span>,<span class="string">&#x27;audio_link&#x27;</span>,<span class="string">&#x27;status&#x27;</span>,<span class="string">&#x27;peace_music&#x27;</span>)</span><br><span class="line">    list_display_links = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;music_name&#x27;</span>)</span><br><span class="line">    list_filter = [<span class="string">&#x27;artist&#x27;</span>,<span class="string">&#x27;created_time&#x27;</span>,<span class="string">&#x27;status&#x27;</span>,<span class="string">&#x27;peace_music&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">image_link</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">return</span> format_html(<span class="string">&#x27;&lt;a href=&quot;%s&quot; target=&quot;_blank&quot;&gt;%s&lt;/a&gt;&#x27;</span> % (obj.image_url, <span class="string">&#x27;查看&#x27;</span>))</span><br><span class="line">    image_link.short_description = <span class="string">&#x27;专辑图片&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">audio_link</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">return</span> format_html(<span class="string">&#x27;&lt;a href=&quot;%s&quot; target=&quot;_blank&quot;&gt;%s&lt;/a&gt;&#x27;</span> % (obj.music_url, <span class="string">&#x27;播放&#x27;</span>))</span><br><span class="line">    audio_link.short_description = <span class="string">&#x27;音乐外链&#x27;</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Music,MusicAdmin)</span><br></pre></td></tr></table></figure><h2 id="编写模板"><a href="#编写模板" class="headerlink" title="编写模板"></a>编写模板</h2><p>在此之前需要引入静态文件，APlayer.min.js和APlayer.min.css<br>在项目根目录下新建static和templates文件夹，在两个文件夹下分别新建APlayer目录<br>将Github仓库的dist目录下的四个文件保存到static/APlayer目录中<br>新建templates/APlayer/myplayer.html:  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">&#123;% load static%&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>myplayer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;APlayer/APlayer.min.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;APlayer/APlayer.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aplayer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:600px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">music_list</span>(<span class="params">musics</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = [];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;musics.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">        p = <span class="built_in">JSON</span>.parse(musics[i].replaceAll(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;\&quot;&quot;</span>));</span></span><br><span class="line"><span class="javascript">        a[i] = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:p[<span class="string">&#x27;name&#x27;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">artist</span>:p[<span class="string">&#x27;artist&#x27;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>:p[<span class="string">&#x27;url&#x27;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">cover</span>:p[<span class="string">&#x27;cover&#x27;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">lrc</span>:p[<span class="string">&#x27;lrc&#x27;</span>]</span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> a;</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> APlayer(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">container</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;aplayer&#x27;</span>),</span></span><br><span class="line"><span class="javascript">    <span class="attr">loop</span>: <span class="string">&#x27;all&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">theme</span>: <span class="string">&#x27;#F57F17&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">lrcType</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">listFolded</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">audio</span>: music_list(<span class="string">&#x27;&#123;&#123; musics &#125;&#125;&#x27;</span>.replaceAll(<span class="string">&#x27;&amp;#x27;&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>).split(<span class="string">&#x27;*#&#x27;</span>))</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#迁移数据库</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>访问127.0.0.1:8000/admin在后台添加音乐<br>访问127.0.0.0:8000/myplayer/即可看到播放器<br>更多配置请参考<a href="https://aplayer.js.org/#/zh-Hans/" title="APlayer中文文档">APlayer中文文档</a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>自己在配置的时候踩了两个坑，把解决办法放在这里，方便各位可爱的读者<br>1：列表高度<br>当有多首音乐时，会自动渲染为一个播放列表，随着音乐增多列表高度也会发生变化，这不符合我们的期望<br>官方文档中提到<code>listMaxHeight</code>参数可以自定义列表高度，该参数的默认值为250。一首歌的高度大概是33px，如果你想显示十首音乐，建议设置为330<br>设置完成后你会发现然并软，列表会无限度的变高，连默认值都失效了，经过多番尝试，发现导致该问题的是模板文件中的<code>&lt;!DOCTYPE html&gt;</code>，删掉这一行设置就生效了。<br>在生产环境中，也许你的模板会继承自别的html文件，为了解决该问题，你可以在extends语句之前加上<code>&lt;!DOCTYPE&gt;</code>，舍弃后面的html<br>2：歌词<br>歌词的引入方式有三种，详见官方文档，本文中采用的方式是在js中引入。在测试过程中我添加了一首纯音乐，因为没有歌词，所以在循环过程中引起函数错误，尝试添加“暂无歌词”字段后异常仍然存在，不死心的我看了一下官方文档，发现歌词是三句一组的，所以，将歌词改成如下形式：<br><code>[00:00.000] 纯音乐，请欣赏\n[00:01.000] 纯音乐，请欣赏\n[00:02.000] 纯音乐，请欣赏\n</code><br>这一次OK了，循环过程不再因异常而中止。在本文的代码中，我已经帮你完成了一部分工作，如果暂时没有歌词，把歌词部分留空即可，如果是纯音乐，还需要勾选“是否纯音乐”前面的框框  </p><h2 id="可优化内容"><a href="#可优化内容" class="headerlink" title="可优化内容"></a>可优化内容</h2><p>目前从视图向模板传递数据采用的是字符串，用js代码来处理，这种方法不尽如人意，可选的方法是以json格式传递数据，当然，仍然需要一段js代码将其渲染为列表<br>可以在models.py中写一个方法，判断音乐外链是否可用，在音乐很多时，该方法将会为你提供极大的便利</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看看最近都做了些什么</title>
      <link href="/2021/01/30/%E7%9C%8B%E7%9C%8B%E6%9C%80%E8%BF%91%E9%83%BD%E5%81%9A%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
      <url>/2021/01/30/%E7%9C%8B%E7%9C%8B%E6%9C%80%E8%BF%91%E9%83%BD%E5%81%9A%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h2 id="两图流"><a href="#两图流" class="headerlink" title="两图流"></a>两图流</h2><p><img src="https://www.ljczero.top/media/editor/1_20210130204851146437.png"><br><img src="https://www.ljczero.top/media/editor/2_20210130204950642909.png"><br>疫情大数据模块几周前就做好了，不再赘述<br>主要是引入了音乐播放控件，简单定制了一个管理后台，方便我添加歌曲，或者把不想给你们听的歌藏起来<br>浮世万千是随机获取一句暖心情话的API，放在我另一个网站上。情话是要说给谁听呢，我也不知道，大概率不是屏幕前的你<br>留言板模块还没有着手去做，既然放在解忧杂货店里，肯定要做的像话一点，过年期间也许就做好了</p>]]></content>
      
      
      <categories>
          
          <category> 编程之路 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>音乐模块添加完毕</title>
      <link href="/2021/01/27/%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97%E6%B7%BB%E5%8A%A0%E5%AE%8C%E6%AF%95/"/>
      <url>/2021/01/27/%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97%E6%B7%BB%E5%8A%A0%E5%AE%8C%E6%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="简单说两句"><a href="#简单说两句" class="headerlink" title="简单说两句"></a>简单说两句</h2><p>使用的是APlayer<br>项目见<a href="https://github.com/DIYgod/APlayer" title="Github">Github</a><br>文档见<a href="https://aplayer.js.org/#/zh-Hans/" title="APlayer中文文档">APlayer中文文档</a><br>我在后台添加了一个简单的音乐model，存储歌曲名、歌手、专辑图片链接、歌曲播放外链以及歌词<br>为文章关联一个音乐外键，再简单修改模板文件就大功告成了  </p><h2 id="试试效果"><a href="#试试效果" class="headerlink" title="试试效果"></a>试试效果</h2><p>点击左下角的播放按钮试试看~</p><h2 id="下一步工作"><a href="#下一步工作" class="headerlink" title="下一步工作"></a>下一步工作</h2><p>想添加一个留言板，如果有人来看我，就可以给我留言了</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生活不能没有音乐</title>
      <link href="/2021/01/24/%E7%94%9F%E6%B4%BB%E4%B8%8D%E8%83%BD%E6%B2%A1%E6%9C%89%E9%9F%B3%E4%B9%90/"/>
      <url>/2021/01/24/%E7%94%9F%E6%B4%BB%E4%B8%8D%E8%83%BD%E6%B2%A1%E6%9C%89%E9%9F%B3%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<h2 id="这是一个标题"><a href="#这是一个标题" class="headerlink" title="这是一个标题"></a>这是一个标题</h2><p>最近半年三十多首歌来回听，来记录下我都听了些什么吧，说不定哪天我又换歌单了。<br><img src="https://www.ljczero.top/media/editor/%E6%8D%95%E8%8E%B7_20210124201450694898.JPG"></p><hr><p><img src="https://www.ljczero.top/media/editor/%E6%8D%95%E8%8E%B71_20210124201507146932.JPG"></p><hr><p><img src="https://www.ljczero.top/media/editor/%E6%8D%95%E8%8E%B72_20210124201519689452.JPG"></p><hr><p>感觉我的黑胶都浪费了，不过听的还算开心吧。<br>我现在有一个想法，为博客添加背景音乐。<br>什么时候闲下来就做吧~加油！</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Django做一个简单的文件服务器</title>
      <link href="/2021/01/24/%E4%BD%BF%E7%94%A8Django%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2021/01/24/%E4%BD%BF%E7%94%A8Django%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>有时候想把资料存在云端，我们可以选择百度云，但是它给的实在太多了，而且下载的时候还限速，我就想要简单的上传下载功能，所以尝试用Django做了一个，在此记录一下。<br>本文主要讲models和admin的写法，前端只有很少一部分内容。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建项目</span></span><br><span class="line">django-admin startproject myproject</span><br><span class="line"><span class="meta">#</span><span class="bash">创建app</span></span><br><span class="line">python manage.py startapp uploader</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>settings.py<br>添加以下路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uploader&#x27;</span>,<span class="comment">#添加app</span></span><br><span class="line">]</span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR,<span class="string">&#x27;templates&#x27;</span>)],<span class="comment">#主要是这一行</span></span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">#以下为添加的部分</span></span><br><span class="line"><span class="comment">#静态文件路径</span></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static&#x27;</span>),</span><br><span class="line">)</span><br><span class="line"><span class="comment">#上传文件的保存路径</span></span><br><span class="line">MEDIA_URL = <span class="string">&#x27;/media/&#x27;</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR,<span class="string">&#x27;media/&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="定义models"><a href="#定义models" class="headerlink" title="定义models"></a>定义models</h2><p>uploader/models.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uploader</span>(<span class="params">models.Model</span>):</span></span><br><span class="line"><span class="comment">#文件id，作为主键</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#文件标题，可以理解为文件的描述</span></span><br><span class="line">    title = models.CharField(verbose_name = <span class="string">&#x27;标题&#x27;</span>,max_length = <span class="number">100</span>)</span><br><span class="line"><span class="comment">#文件主体，在后面定义保存的路径，通过日期来区分</span></span><br><span class="line">    file = models.FileField(verbose_name=<span class="string">&#x27;文件&#x27;</span>, upload_to=<span class="string">&#x27;uploader/files/%Y%m%d/&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#上传时间</span></span><br><span class="line">    created = models.DateTimeField(verbose_name = <span class="string">&#x27;创建时间&#x27;</span>,default = timezone.now)</span><br><span class="line"><span class="comment">#文件大小</span></span><br><span class="line">    size = models.CharField(verbose_name=<span class="string">&#x27;大小&#x27;</span>,max_length=<span class="number">50</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#上传者</span></span><br><span class="line">author = models.ForeignKey(</span><br><span class="line">        <span class="string">&#x27;auth.User&#x27;</span>,</span><br><span class="line">        verbose_name=<span class="string">&#x27;用户&#x27;</span>,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        default=<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#为了后台上传时也能计算文件大小，重写save方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self,*args,**kwargs</span>):</span></span><br><span class="line">        size = <span class="built_in">round</span>(self.file.size / <span class="number">1024</span> ** <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.size = <span class="built_in">str</span>(size) + <span class="string">&quot;MB&quot;</span> <span class="keyword">if</span> size &lt; <span class="number">1024</span> <span class="keyword">else</span> <span class="built_in">str</span>(<span class="built_in">round</span>(size / <span class="number">1024</span>, <span class="number">2</span>)) + <span class="string">&quot;GB&quot;</span></span><br><span class="line"><span class="comment">#大小计算完毕后重新将文件保存</span></span><br><span class="line">        <span class="built_in">super</span>(Uploader, self).save(*args,**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line"><span class="comment">#文件排序方式，上传时间倒序</span></span><br><span class="line">        ordering = (<span class="string">&#x27;-created&#x27;</span>,)</span><br><span class="line"><span class="comment">#自定义model名称</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;附件&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment">#显示文件标题</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><h2 id="定义admin"><a href="#定义admin" class="headerlink" title="定义admin"></a>定义admin</h2><p>uploader/admin.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Uploader</span><br><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext_lazy <span class="keyword">as</span> _</span><br><span class="line"><span class="keyword">from</span> django.utils.html <span class="keyword">import</span> format_html</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_delete</span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="comment">#以下为自定义过滤器，通过上传者进行过滤</span></span><br><span class="line"><span class="comment">#写法参考本站的后端代码，这里没有注释</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageFilter</span>(<span class="params">admin.SimpleListFilter</span>):</span></span><br><span class="line">    title = _(<span class="string">&quot;用户&quot;</span>)</span><br><span class="line">    parameter_name = <span class="string">&#x27;author&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lookups</span>(<span class="params">self, request, model_admin</span>):</span></span><br><span class="line">        authors = <span class="built_in">list</span>(<span class="built_in">set</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x.author, Uploader.objects.<span class="built_in">all</span>())))</span><br><span class="line">        <span class="keyword">for</span> author <span class="keyword">in</span> authors:</span><br><span class="line">            <span class="keyword">yield</span> author.<span class="built_in">id</span>, _(author.username)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">queryset</span>(<span class="params">self, request, queryset</span>):</span></span><br><span class="line">        id_ = self.value()</span><br><span class="line">        <span class="keyword">if</span> id_:</span><br><span class="line">            <span class="keyword">return</span> queryset.<span class="built_in">filter</span>(author__id__exact=id_)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> queryset</span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义admin后台</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploaderAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line"><span class="comment">#显示的信息，download_link为下载链接</span></span><br><span class="line">    list_display = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;author&#x27;</span>,<span class="string">&#x27;created&#x27;</span>,<span class="string">&#x27;size&#x27;</span>,<span class="string">&#x27;download_link&#x27;</span>)</span><br><span class="line"><span class="comment">#可以作为超链接的选项（转向model的更改页面）</span></span><br><span class="line">    list_display_links = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="comment">#过滤器，通过创建时间过滤</span></span><br><span class="line">    list_filter = [ImageFilter,<span class="string">&#x27;created&#x27;</span>]</span><br><span class="line"><span class="comment">#修改页面显示的内容</span></span><br><span class="line">    fields = [<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;author&#x27;</span>,<span class="string">&#x27;created&#x27;</span>,<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#下载链接，将其渲染为HTML</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download_link</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">return</span> format_html(<span class="string">&#x27;&lt;a href=&quot;%s&quot;&gt;%s&lt;/a&gt;&#x27;</span> % (obj.file.url, <span class="string">&#x27;下载&#x27;</span>))</span><br><span class="line">    <span class="comment">#据说allow_tags在django2.x以上被停用了，但是我这里用的还可以</span></span><br><span class="line"><span class="comment">#如果遇到问题可以使用mark_safe</span></span><br><span class="line">    download_link.allow_tags = <span class="literal">True</span></span><br><span class="line">    download_link.short_description = <span class="string">&#x27;下载&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义一个方法，当文件在后台被删除时一并删除服务器中的资源</span></span><br><span class="line"><span class="meta">    @receiver(<span class="params">post_delete, sender=Uploader</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_upload_files</span>(<span class="params">sender, instance, **kwargs</span>):</span></span><br><span class="line">        files = <span class="built_in">getattr</span>(instance, <span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> files:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        fname = os.path.join(settings.MEDIA_ROOT, <span class="built_in">str</span>(files))</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(fname):</span><br><span class="line">            os.remove(fname)</span><br><span class="line"><span class="comment">#将model注册到后台</span></span><br><span class="line">admin.site.register(Uploader,UploaderAdmin)</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先迁移数据库：<br><code>python manage.py makemigrations</code><br><code>python manage.py migrate</code><br>创建超级用户：<br><code>python manage.py createsuperuser</code><br>启动服务：<br><code>python manage.py runserver</code><br>访问：<br><code>127.0.0.1:8000/admin/</code></p><h2 id="前端使用"><a href="#前端使用" class="headerlink" title="前端使用"></a>前端使用</h2><p>myproject/urls.py:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;upload/&#x27;</span>,include(<span class="string">&#x27;uploader.urls&#x27;</span>,namespace =<span class="string">&#x27;upload&#x27;</span>)),</span><br><span class="line">]</span><br><span class="line">urlpatterns += static(settings.MEDIA_URL,document_root = settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><p>uploader/forms.py:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Uploader</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadForm</span>(<span class="params">forms.ModelForm</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Uploader</span><br><span class="line">        fields = (<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;file&#x27;</span>)</span><br></pre></td></tr></table></figure><p>uploader/views.py:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> UploadForm</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="meta">@login_required(<span class="params">login_url=<span class="string">&#x27;/admin/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadview</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        upload_form = UploadForm(request.POST,request.FILES)</span><br><span class="line">        <span class="keyword">if</span> upload_form.is_valid():</span><br><span class="line">            new_upload = upload_form.save(commit = <span class="literal">False</span>)</span><br><span class="line">            new_upload.author = User.objects.get(<span class="built_in">id</span> = request.user.<span class="built_in">id</span>)</span><br><span class="line">            new_upload.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;上传成功&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;表单内容有误，请重新填写&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        upload_form = UploadForm()</span><br><span class="line">        context = &#123;<span class="string">&#x27;upload_form&#x27;</span>:upload_form&#125;</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;uploader/file.html&#x27;</span>,context = context)</span><br></pre></td></tr></table></figure><p>uploader/urls.py:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;uploader&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;files/&#x27;</span>,views.uploadview,name=<span class="string">&#x27;files&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="编写模版："><a href="#编写模版：" class="headerlink" title="编写模版："></a>编写模版：</h2><p>根目录下新建templates文件夹，其中新建uploader文件夹：<br>templates/base.html:  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYEP <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/css/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-expand-lg navbar-dark bg-dark&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block item %&#125;&#123;% endblock item %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;jquery/jquery-3.5.1.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block content %&#125;&#123;% endblock content %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">od</span>=<span class="string">&quot;push&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% block script %&#125;&#123;% endblock script %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>templates/uploader/file.html:  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">        上传文件</span><br><span class="line">&#123;% endblock title %&#125;</span><br><span class="line">&#123;% block item %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;navbar-nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;upload:files&#x27; %&#125;&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock item %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.upload</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">top</span>:<span class="number">220px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;.&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group col-md-4&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;title&quot;</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group col-md-4&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control-file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:220px;&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% block script %&#125;</span><br><span class="line">&#123;% endblock script %&#125;</span><br><span class="line">&#123;% endblock content%&#125;</span><br></pre></td></tr></table></figure><p>bootstrap和jquery等文件可以去官网下载。。真的需要的话，也可以给我发邮件，我通过邮箱发给你。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>以上内容，后端应该是OK的，至于前端，我没有仔细检索，我那个项目里有两个app，我只选择这一部分粘贴了过来，前端可能有跟另一个app交叉的部分。<br>如果功能再次优化，我会将其传到github，到时候会附上地址。</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化测试之淘宝下单</title>
      <link href="/2021/01/18/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%B7%98%E5%AE%9D%E4%B8%8B%E5%8D%95/"/>
      <url>/2021/01/18/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%B7%98%E5%AE%9D%E4%B8%8B%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近猎头给我推荐了一份工作，有一道笔试题需要实现淘宝的自动登录、搜索、下单、付款。<br>提供了三个选项，UI自动化、接口自动化、移动自动化。<br>对我来说最简单有效的是使用selenium做UI自动化，接口自动化也可以写，但是登录可能就要一整天，移动自动化则是完全不会。  </p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#时间模块，用于delay以等待网页响应</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#从config中读取密码</span></span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="comment">#加载selenium相关库</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="comment">#配置chromedriver</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line"><span class="comment">#虚拟浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome(executable_path = <span class="string">&#x27;chromedriver.exe&#x27;</span>,options = chrome_options)</span><br><span class="line"><span class="comment">#擦除浏览器指纹，如果不添加如下代码在登录的时候会一直出验证码</span></span><br><span class="line">browser.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;</span><br><span class="line">              <span class="string">&quot;source&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;</span></span><br><span class="line"><span class="string">                  get: () =&gt; undefined</span></span><br><span class="line"><span class="string">                &#125;)</span></span><br><span class="line"><span class="string">              &quot;&quot;&quot;</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="comment">#访问登录页面</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://login.taobao.com/member/login.jhtml&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#获取用户名和密码框句柄</span></span><br><span class="line">username = browser.find_element_by_name(<span class="string">&#x27;fm-login-id&#x27;</span>)</span><br><span class="line">password = browser.find_element_by_name(<span class="string">&#x27;fm-login-password&#x27;</span>)</span><br><span class="line"><span class="comment">#传递用户名和密码</span></span><br><span class="line">username.send_keys(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">password.send_keys(config.taobaopassword)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#尝试绕过滑动验证码，擦除浏览器指纹后滑动条不再出现</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.switch_to.frame(<span class="string">&#x27;baxia-dialog-content&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    dragElement = browser.find_element_by_id(<span class="string">&#x27;nc_1__bg&#x27;</span>)</span><br><span class="line">    ac2 = ActionChains(browser)</span><br><span class="line">    ac2.drag_and_drop_by_offset(dragElement,<span class="number">258</span>,<span class="number">0</span>).perform()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#点击登录按钮</span></span><br><span class="line">browser.find_element_by_class_name(<span class="string">&quot;fm-btn&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#访问淘宝首页</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.taobao.com/?spm=a1z02.1.1581860521.1.XAddPD&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#向搜索框传值</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&quot;q&quot;</span>).send_keys(<span class="string">&quot;三只松鼠&quot;</span>)</span><br><span class="line"><span class="comment">#点击搜索框</span></span><br><span class="line">browser.find_element_by_class_name(<span class="string">&quot;search-button&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#为了在同一窗口打开页面，首先获取商品的url</span></span><br><span class="line">item = browser.find_element_by_xpath(<span class="string">&quot;//div[@class=&#x27;items&#x27;]//div[@data-index=&#x27;0&#x27;]//div//div//a&quot;</span>)</span><br><span class="line"><span class="comment">#访问商品详情页</span></span><br><span class="line">browser.get(item.get_attribute(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#点击“立即购买”</span></span><br><span class="line">browser.find_element_by_class_name(<span class="string">&quot;tb-btn-buy tb-btn-sku&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#选择商品类型</span></span><br><span class="line">browser.find_element_by_xpath(<span class="string">&quot;//div[@class=&#x27;tb-sku&#x27;]//dl//dd//ul//li[@data-value=&#x27;31560:11582287408&#x27;]&quot;</span>).click()</span><br><span class="line"><span class="comment">#点击确定</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&quot;J_LinkBuy&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#提交订单</span></span><br><span class="line">browser.find_element_by_xpath(<span class="string">&quot;//div[@class=&#x27;submitOrder-container&#x27;]//div&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#支付密码，此处请务必小心，建议使用扫码付款</span></span><br><span class="line">Paypasswd = browser.find_element_by_xpath(<span class="string">&quot;//div[@class=&#x27;sixDigitPassword&#x27;]&quot;</span>)</span><br><span class="line">Paypasswd.send_keys(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"><span class="comment">#点击确定，整个流程执行完毕</span></span><br><span class="line">browser.find_element_by_xpath(<span class="string">&quot;//div[@class=&#x27;ui-fm-item ui-fm-action j-submit&#x27;]//input&quot;</span>).click()</span><br><span class="line"><span class="comment">#退出模拟浏览器</span></span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>正如面试官所问的一样，这段代码有很大的优化空间，可以将整个流程封装成类，类中写四个方法，分别负责登录、搜索、下单、付款。<br>更重要的问题是信息的安全，密码不应该以明文进行存储，我想到的方法是用户不登录，在下单页面使用扫码付款。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django删除超级用户</title>
      <link href="/2021/01/17/Django%E5%88%A0%E9%99%A4%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7/"/>
      <url>/2021/01/17/Django%E5%88%A0%E9%99%A4%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入shell</span></span><br><span class="line">python manage.py shell</span><br><span class="line"><span class="comment">#用户数据库</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="comment">#查询用户</span></span><br><span class="line">User.objects.<span class="built_in">filter</span>()</span><br><span class="line"><span class="comment">#删除，如果超级用户状态被取消则把True改为False</span></span><br><span class="line">User.objects.get(username=<span class="string">&quot;name&quot;</span>, is_superuser=<span class="literal">True</span>).delete()</span><br></pre></td></tr></table></figure><h2 id="本站"><a href="#本站" class="headerlink" title="本站"></a>本站</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入shell</span></span><br><span class="line">python manage.py shell</span><br><span class="line"><span class="comment">#引入数据库</span></span><br><span class="line"><span class="keyword">from</span> accounts.models <span class="keyword">import</span> BlogUser</span><br><span class="line"><span class="comment">#查询</span></span><br><span class="line">BlogUser.objects.<span class="built_in">filter</span>()</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">BlogUser.objects.get(username=<span class="string">&#x27;test&#x27;</span>,is_superuser=<span class="literal">True</span>).delete()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的疫情可视化Django应用</title>
      <link href="/2021/01/17/%E7%AE%80%E5%8D%95%E7%9A%84%E7%96%AB%E6%83%85%E5%8F%AF%E8%A7%86%E5%8C%96Django%E5%BA%94%E7%94%A8/"/>
      <url>/2021/01/17/%E7%AE%80%E5%8D%95%E7%9A%84%E7%96%AB%E6%83%85%E5%8F%AF%E8%A7%86%E5%8C%96Django%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>以前本站的疫情可视化只是一个简单的html页面，使用crontab定时任务更新数据，每天早上八点更新一次，这种方式存在诸多弊端，主要是无法拓展更多功能，但也有明显的好处，占用资源很少，不会影响服务器性能，也不会对网站安全造成影响，添加或移除该功能的时候也简单。总之，使用静态页面更像是在混吃等死。三天前我在查找资料的时候翻到了<a href="https://pyecharts.org/#/zh-cn/intro" title="pyecharts中文文档">pyecharts中文文档</a>，文档中介绍了如何将pyecharts整合到web框架，而且很贴心的给出前后端分离的教程，所以，我就依葫芦画瓢的搞了一通，替换掉了原本的静态页面。  </p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建虚拟环境</span></span><br><span class="line">py -3 -m venv myproject_env #Windows</span><br><span class="line">Virtualenv -p /usr/bin/python3 myproject_env #Linux</span><br><span class="line"><span class="meta">#</span><span class="bash">启动虚拟环境</span></span><br><span class="line">\myproject_env\Scripts\activate #Windows</span><br><span class="line">source myproject_env/bin/activate #Linux</span><br><span class="line"><span class="meta">#</span><span class="bash">安装Django</span></span><br><span class="line">pip install Django==3.1.3</span><br><span class="line"><span class="meta">#</span><span class="bash">创建项目</span></span><br><span class="line">django-admin startproject myproject</span><br></pre></td></tr></table></figure><h2 id="创建APP"><a href="#创建APP" class="headerlink" title="创建APP"></a>创建APP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换目录</span></span><br><span class="line">cd myproject</span><br><span class="line"><span class="meta">#</span><span class="bash">创建app</span></span><br><span class="line">python manage.py startapp echarts</span><br></pre></td></tr></table></figure><p>创建完成后修改myproject/settings.py，将echarts添加到INSTALLED_APPS中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;echarts&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>#其他依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">djangorestframework==3.12.2</span><br><span class="line">lxml==4.6.2</span><br><span class="line">openpyxl==3.0.5</span><br><span class="line">pyecharts==1.9.0</span><br><span class="line">requests==2.25.1</span><br></pre></td></tr></table></figure><h2 id="更改主路由"><a href="#更改主路由" class="headerlink" title="更改主路由"></a>更改主路由</h2><p>myproject/urls.py  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;echarts/&#x27;</span>,include(<span class="string">&#x27;echarts.urls&#x27;</span>,namespace = <span class="string">&#x27;echarts&#x27;</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="更改app视图"><a href="#更改app视图" class="headerlink" title="更改app视图"></a>更改app视图</h2><p>echarts/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#网页向导与重定向</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect</span><br><span class="line"><span class="comment">#json字典</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#网页响应</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="comment">#前后端分离需要使用该类视图</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="comment">#爬虫代码，抓取数据</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> data_get</span><br><span class="line"><span class="comment">#绘图</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> data_map</span><br><span class="line"><span class="comment">#将文本中的数据渲染为字典</span></span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="comment">#以下三个函数来自pyecharts文档，主要作用是渲染绘图数据</span></span><br><span class="line"><span class="comment">#json_error未使用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response_as_json</span>(<span class="params">data</span>):</span></span><br><span class="line">    json_str = json.dumps(data)</span><br><span class="line">    response = HttpResponse(</span><br><span class="line">        json_str,</span><br><span class="line">        content_type = <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">    response[<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_response</span>(<span class="params">data,code=<span class="number">200</span></span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;code&quot;</span>:code,</span><br><span class="line">        <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>:data,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response_as_json(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_error</span>(<span class="params">error_string = <span class="string">&#x27;error&#x27;</span>,code=<span class="number">500</span>,**kwargs</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;code&quot;</span>:code,</span><br><span class="line">        <span class="string">&quot;msg&quot;</span>:error_string,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>:&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    data.update(kwargs)</span><br><span class="line">    <span class="keyword">return</span> response_as_json(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取绘图数据，定义为全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_map</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">global</span> ct_map, cs_map,fi_map,gt_map,gs_map,fte_map</span><br><span class="line">    <span class="comment">#获取数据表</span></span><br><span class="line">    wb_china = data_get.china_total_data(data)</span><br><span class="line">    wb_global = data_get.global_total_data(data)</span><br><span class="line">    <span class="comment">#获取地图对象</span></span><br><span class="line">    ct_map, cs_map = data_map.china_total_map(wb_china)</span><br><span class="line">    fi_map = data_map.china_daily_map(wb_china)</span><br><span class="line">    gt_map, gs_map = data_map.global_total_map(wb_global)</span><br><span class="line">    fte_map = data_map.foreign_daily_map(wb_global)</span><br><span class="line"></span><br><span class="line">JsonResponse = json_response</span><br><span class="line">JsonError = json_error</span><br><span class="line"><span class="comment">#不需要更新时从json文本中读取数据</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;./echarts/covid_19.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment">#渲染为字典</span></span><br><span class="line">data = ast.literal_eval(f.read())</span><br><span class="line"><span class="comment">#释放文件</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#得到绘图对象</span></span><br><span class="line">plot_map(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#点击更新时从百度获取最新数据，并在外部更新json文本，同时重新获取绘图对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">request</span>):</span></span><br><span class="line">    data = data_get.init()</span><br><span class="line">    plot_map(data)</span><br><span class="line">    <span class="comment">#重定向页面</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;echarts:covid_19&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制中国累计确诊地图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CtView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">global</span> ct_map</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(json.loads(ct_map))</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制中国现有确诊地图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CsView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">global</span> cs_map</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(json.loads(cs_map))</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制中国疫情走势地图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CdView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">global</span> fi_map</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(json.loads(fi_map))</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制全球累计确诊地图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GtView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="keyword">global</span> gt_map</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(json.loads(gt_map))</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制全球现有确诊地图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GsView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gs_map</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(json.loads(gs_map))</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制境外疫情走势（不含中国）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GdView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gs_map</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(json.loads(fte_map))</span><br><span class="line"></span><br><span class="line"><span class="comment">#主页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;echarts/covid_19.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="爬虫代码"><a href="#爬虫代码" class="headerlink" title="爬虫代码"></a>爬虫代码</h2><p>在echarts目录下新建data_get.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://voice.baidu.com/act/newpneumonia/newpneumonia/&#x27;</span></span><br><span class="line">    response = requests.get(url = url,headers = headers)</span><br><span class="line">    tree = etree.HTML(response.text)</span><br><span class="line">    dict1 = tree.xpath(<span class="string">&#x27;//script[@id=&quot;captain-config&quot;]/text()&#x27;</span>)</span><br><span class="line">    dict2 = json.loads(dict1[<span class="number">0</span>])</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;./echarts/covid_19.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(dict2))</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> dict2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">china_total_data</span>(<span class="params">data</span>):</span></span><br><span class="line">    wb = openpyxl.Workbook()</span><br><span class="line">    ws_china = wb.active</span><br><span class="line">    ws_china.title = <span class="string">&#x27;中国省份疫情数据&#x27;</span></span><br><span class="line">    ws_china.append([<span class="string">&#x27;省/直辖市/自治区/行政区&#x27;</span>,<span class="string">&#x27;现有确诊&#x27;</span>,<span class="string">&#x27;累计确诊&#x27;</span>,<span class="string">&#x27;累计治愈&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;累计死亡&#x27;</span>,<span class="string">&#x27;现有确诊增量&#x27;</span>,<span class="string">&#x27;累计确诊增量&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;累计治愈增量&#x27;</span>,<span class="string">&#x27;累计死亡增量&#x27;</span>])</span><br><span class="line">    china = data[<span class="string">&#x27;component&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;caseList&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> province <span class="keyword">in</span> china:</span><br><span class="line">        ws_china.append([</span><br><span class="line">            province[<span class="string">&#x27;area&#x27;</span>],</span><br><span class="line">            province[<span class="string">&#x27;curConfirm&#x27;</span>],</span><br><span class="line">            province[<span class="string">&#x27;confirmed&#x27;</span>],</span><br><span class="line">            province[<span class="string">&#x27;crued&#x27;</span>],</span><br><span class="line">            province[<span class="string">&#x27;died&#x27;</span>],</span><br><span class="line">            province[<span class="string">&#x27;curConfirmRelative&#x27;</span>],</span><br><span class="line">            province[<span class="string">&#x27;confirmedRelative&#x27;</span>],</span><br><span class="line">            province[<span class="string">&#x27;curedRelative&#x27;</span>],</span><br><span class="line">            province[<span class="string">&#x27;diedRelative&#x27;</span>]</span><br><span class="line">            ])</span><br><span class="line">    ws_city = wb.create_sheet(<span class="string">&#x27;中国城市疫情数据&#x27;</span>)</span><br><span class="line">    ws_city.append([</span><br><span class="line">        <span class="string">&#x27;城市&#x27;</span>,<span class="string">&#x27;现有确诊&#x27;</span>,<span class="string">&#x27;累计确诊&#x27;</span>,<span class="string">&#x27;累计治愈&#x27;</span>,<span class="string">&#x27;累计死亡&#x27;</span>,<span class="string">&#x27;累计确诊增量&#x27;</span></span><br><span class="line">        ])</span><br><span class="line">    <span class="keyword">for</span> province <span class="keyword">in</span> china:</span><br><span class="line">        <span class="keyword">for</span> city <span class="keyword">in</span> province[<span class="string">&#x27;subList&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;curConfirm&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> city:</span><br><span class="line">                city[<span class="string">&#x27;curConfirm&#x27;</span>] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> city[<span class="string">&#x27;crued&#x27;</span>] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                city[<span class="string">&#x27;crued&#x27;</span>] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> city[<span class="string">&#x27;died&#x27;</span>] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                city[<span class="string">&#x27;died&#x27;</span>] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;confirmedRelative&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> city:</span><br><span class="line">                city[<span class="string">&#x27;confirmedRelative&#x27;</span>] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">            ws_city.append([</span><br><span class="line">                city[<span class="string">&#x27;city&#x27;</span>],<span class="string">&#x27;0&#x27;</span>,city[<span class="string">&#x27;confirmed&#x27;</span>],</span><br><span class="line">                city[<span class="string">&#x27;crued&#x27;</span>],city[<span class="string">&#x27;died&#x27;</span>],city[<span class="string">&#x27;confirmedRelative&#x27;</span>]</span><br><span class="line">                ])</span><br><span class="line">    time_domestic = data[<span class="string">&#x27;component&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;mapLastUpdatedTime&#x27;</span>]</span><br><span class="line">    ws_time = wb.create_sheet(<span class="string">&#x27;中国疫情数据更新时间&#x27;</span>)</span><br><span class="line">    ws_time.column_dimensions[<span class="string">&#x27;A&#x27;</span>].width = <span class="number">22</span></span><br><span class="line">    ws_time.append([<span class="string">&#x27;中国疫情数据更新时间&#x27;</span>])</span><br><span class="line">    ws_time.append([time_domestic])</span><br><span class="line">    <span class="keyword">return</span> china_daily_data(data,wb)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">global_total_data</span>(<span class="params">data</span>):</span></span><br><span class="line">    wb = openpyxl.Workbook()</span><br><span class="line">    ws_global = wb.active</span><br><span class="line">    ws_global.title = <span class="string">&#x27;全球各国疫情数据&#x27;</span></span><br><span class="line">    </span><br><span class="line">    countries = data[<span class="string">&#x27;component&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;caseOutsideList&#x27;</span>]</span><br><span class="line">    ws_global.append([<span class="string">&#x27;国家&#x27;</span>,<span class="string">&#x27;现有确诊&#x27;</span>,<span class="string">&#x27;累计确诊&#x27;</span>,<span class="string">&#x27;累计治愈&#x27;</span>,<span class="string">&#x27;累计死亡&#x27;</span>,<span class="string">&#x27;累计确诊增量&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> country <span class="keyword">in</span> countries:</span><br><span class="line">        ws_global.append([</span><br><span class="line">            country[<span class="string">&#x27;area&#x27;</span>],</span><br><span class="line">            country[<span class="string">&#x27;curConfirm&#x27;</span>],</span><br><span class="line">            country[<span class="string">&#x27;confirmed&#x27;</span>],</span><br><span class="line">            country[<span class="string">&#x27;crued&#x27;</span>],</span><br><span class="line">            country[<span class="string">&#x27;died&#x27;</span>],</span><br><span class="line">            country[<span class="string">&#x27;confirmedRelative&#x27;</span>]</span><br><span class="line">            ])</span><br><span class="line">    continent = data[<span class="string">&#x27;component&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;globalList&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> area <span class="keyword">in</span> continent:</span><br><span class="line">        ws_foreign = wb.create_sheet(area[<span class="string">&#x27;area&#x27;</span>] + <span class="string">&#x27;疫情数据&#x27;</span>)</span><br><span class="line">        ws_foreign.append([<span class="string">&#x27;国家&#x27;</span>,<span class="string">&#x27;现有确诊&#x27;</span>,<span class="string">&#x27;累计确诊&#x27;</span>,<span class="string">&#x27;累计治愈&#x27;</span>,<span class="string">&#x27;累计死亡&#x27;</span>,<span class="string">&#x27;累计确诊增量&#x27;</span>])</span><br><span class="line">        <span class="keyword">for</span> country <span class="keyword">in</span> area[<span class="string">&#x27;subList&#x27;</span>]:</span><br><span class="line">            ws_foreign.append([</span><br><span class="line">                country[<span class="string">&#x27;country&#x27;</span>],</span><br><span class="line">                country[<span class="string">&#x27;curConfirm&#x27;</span>],</span><br><span class="line">                country[<span class="string">&#x27;confirmed&#x27;</span>],</span><br><span class="line">                country[<span class="string">&#x27;crued&#x27;</span>],</span><br><span class="line">                country[<span class="string">&#x27;died&#x27;</span>],</span><br><span class="line">                country[<span class="string">&#x27;confirmedRelative&#x27;</span>]</span><br><span class="line">                ])</span><br><span class="line">    ws1,ws2 = wb[<span class="string">&#x27;全球各国疫情数据&#x27;</span>],wb[<span class="string">&#x27;亚洲疫情数据&#x27;</span>]</span><br><span class="line">    original_data = data[<span class="string">&#x27;component&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;summaryDataIn&#x27;</span>]</span><br><span class="line">    add_china_data = [<span class="string">&#x27;中国&#x27;</span>,</span><br><span class="line">                      original_data[<span class="string">&#x27;curConfirm&#x27;</span>],</span><br><span class="line">                      original_data[<span class="string">&#x27;confirmed&#x27;</span>],</span><br><span class="line">                      original_data[<span class="string">&#x27;cured&#x27;</span>],</span><br><span class="line">                      original_data[<span class="string">&#x27;died&#x27;</span>],</span><br><span class="line">                      original_data[<span class="string">&#x27;confirmedRelative&#x27;</span>]</span><br><span class="line">                      ]</span><br><span class="line">    ws1.append(add_china_data)</span><br><span class="line">    ws2.append(add_china_data)</span><br><span class="line">    time_foreign = data[<span class="string">&#x27;component&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;foreignLastUpdatedTime&#x27;</span>]</span><br><span class="line">    ws_time = wb.create_sheet(<span class="string">&#x27;全球疫情数据更新时间&#x27;</span>)</span><br><span class="line">    ws_time.column_dimensions[<span class="string">&#x27;A&#x27;</span>].width = <span class="number">22</span></span><br><span class="line">    ws_time.append([<span class="string">&#x27;全球疫情数据更新时间&#x27;</span>])</span><br><span class="line">    ws_time.append([time_foreign])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> foreign_daily_data(data,wb)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">china_daily_data</span>(<span class="params">data,wb</span>):</span></span><br><span class="line">    ccd_dict = data[<span class="string">&#x27;component&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;trend&#x27;</span>]</span><br><span class="line">    update_date = ccd_dict[<span class="string">&#x27;updateDate&#x27;</span>]</span><br><span class="line">    china_confirmed = ccd_dict[<span class="string">&#x27;list&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    china_crued = ccd_dict[<span class="string">&#x27;list&#x27;</span>][<span class="number">2</span>][<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    china_died = ccd_dict[<span class="string">&#x27;list&#x27;</span>][<span class="number">3</span>][<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    china_surplus = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(update_date)):</span><br><span class="line">        surplus = china_confirmed[i] - china_crued[i] - china_died[i]</span><br><span class="line">        china_surplus.append(surplus)</span><br><span class="line">    </span><br><span class="line">    ws_china_surplus = wb.create_sheet(<span class="string">&#x27;中国每日现有确诊数据&#x27;</span>)</span><br><span class="line">    ws_china_surplus.append([<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;数据&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> <span class="built_in">zip</span>(update_date,china_surplus):</span><br><span class="line">        ws_china_surplus.append(data)</span><br><span class="line">    </span><br><span class="line">    ws_china_confirmed = wb.create_sheet(<span class="string">&#x27;中国每日累计确诊数据&#x27;</span>)</span><br><span class="line">    ws_china_confirmed.append([<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;数据&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> <span class="built_in">zip</span>(update_date,china_confirmed):</span><br><span class="line">        ws_china_confirmed.append(data)</span><br><span class="line">        </span><br><span class="line">    ws_china_crued = wb.create_sheet(<span class="string">&#x27;中国每日累计治愈数据&#x27;</span>)</span><br><span class="line">    ws_china_crued.append([<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;数据&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> <span class="built_in">zip</span>(update_date,china_crued):</span><br><span class="line">        ws_china_crued.append(data)</span><br><span class="line">        </span><br><span class="line">    ws_china_died = wb.create_sheet(<span class="string">&#x27;中国每日累计死亡数据&#x27;</span>)</span><br><span class="line">    ws_china_died.append([<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;数据&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> <span class="built_in">zip</span>(update_date,china_died):</span><br><span class="line">        ws_china_died.append(data)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> wb</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreign_daily_data</span>(<span class="params">data,wb</span>):</span></span><br><span class="line">    te_dict = data[<span class="string">&#x27;component&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;allForeignTrend&#x27;</span>]</span><br><span class="line">    update_date = te_dict[<span class="string">&#x27;updateDate&#x27;</span>]</span><br><span class="line">    foreign_confirmed = te_dict[<span class="string">&#x27;list&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    foreign_crued = te_dict[<span class="string">&#x27;list&#x27;</span>][<span class="number">1</span>][<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    foreign_died = te_dict[<span class="string">&#x27;list&#x27;</span>][<span class="number">2</span>][<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    foreign_surplus = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(update_date)):</span><br><span class="line">        surplus = foreign_confirmed[i] - foreign_crued[i] - foreign_died[i]</span><br><span class="line">        foreign_surplus.append(surplus)</span><br><span class="line">    </span><br><span class="line">    ws_foreign_surplus = wb.create_sheet(<span class="string">&#x27;境外每日现有确诊数据&#x27;</span>)</span><br><span class="line">    ws_foreign_surplus.append([<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;数据&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> <span class="built_in">zip</span>(update_date,foreign_surplus):</span><br><span class="line">        ws_foreign_surplus.append(data)</span><br><span class="line">    </span><br><span class="line">    ws_foreign_confirmed = wb.create_sheet(<span class="string">&#x27;境外每日累计确诊数据&#x27;</span>)</span><br><span class="line">    ws_foreign_confirmed.append([<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;数据&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> <span class="built_in">zip</span>(update_date,foreign_confirmed):</span><br><span class="line">        ws_foreign_confirmed.append(data)</span><br><span class="line">        </span><br><span class="line">    ws_foreign_crued = wb.create_sheet(<span class="string">&#x27;境外每日累计治愈数据&#x27;</span>)</span><br><span class="line">    ws_foreign_crued.append([<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;数据&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> <span class="built_in">zip</span>(update_date,foreign_crued):</span><br><span class="line">        ws_foreign_crued.append(data)</span><br><span class="line">    </span><br><span class="line">    ws_foreign_died = wb.create_sheet(<span class="string">&#x27;境外每日累计死亡数据&#x27;</span>)</span><br><span class="line">    ws_foreign_died.append([<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;数据&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> <span class="built_in">zip</span>(update_date,foreign_died):</span><br><span class="line">        ws_foreign_died.append(data)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> wb</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    init()</span><br></pre></td></tr></table></figure><hr><p>新建data_map.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map,Page,Line</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> CurrentConfig</span><br><span class="line"><span class="keyword">import</span> pyecharts.options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">import</span> pyecharts.<span class="built_in">globals</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">pyecharts.<span class="built_in">globals</span>._WarningControl.ShowWarning = <span class="literal">False</span></span><br><span class="line">CurrentConfig.ONLINE_HOST = <span class="string">&quot;./static/js/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">china_total_map</span>(<span class="params">wb</span>):</span></span><br><span class="line">    ws_time = wb[<span class="string">&#x27;中国疫情数据更新时间&#x27;</span>]</span><br><span class="line">    ws_data = wb[<span class="string">&#x27;中国省份疫情数据&#x27;</span>]</span><br><span class="line">    ws_data.delete_rows(<span class="number">1</span>)</span><br><span class="line">    province = []</span><br><span class="line">    curconfirm = []</span><br><span class="line">    surplus = []</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> ws_data.values:</span><br><span class="line">        province.append(data[<span class="number">0</span>])</span><br><span class="line">        surplus.append(data[<span class="number">1</span>])</span><br><span class="line">        curconfirm.append(data[<span class="number">2</span>])    </span><br><span class="line">    time_china = ws_time[<span class="string">&#x27;A2&#x27;</span>].value</span><br><span class="line">    </span><br><span class="line">    pieces = [</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#FFFFFF&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">9</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;1-9&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#FFE5DB&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">99</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;10-99&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#FF9985&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">999</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;100-999&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#F57567&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">9999</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">1000</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;1000-9999&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#E64546&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">99999</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">10000</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;&gt;=10000&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#B80909&#x27;</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    ct_map = (</span><br><span class="line">        Map()</span><br><span class="line">        .add(series_name = <span class="string">&#x27;累计确诊人数&#x27;</span>,data_pair = [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(province,curconfirm)],maptype = <span class="string">&quot;china&quot;</span>,is_map_symbol_show = <span class="literal">False</span>)</span><br><span class="line">        .set_global_opts(</span><br><span class="line">            title_opts = opts.TitleOpts(</span><br><span class="line">                title = <span class="string">&quot;中国疫情数据（累计确诊）&quot;</span>,</span><br><span class="line">                subtitle = <span class="string">&#x27;数据更新至：&#x27;</span> + time_china + <span class="string">&#x27;\n\n来源：百度疫情实时大数据报告&#x27;</span>),</span><br><span class="line">            visualmap_opts = opts.VisualMapOpts(max_ = <span class="number">300</span>,is_piecewise = <span class="literal">True</span>,pieces = pieces)</span><br><span class="line">            )</span><br><span class="line">            .dump_options_with_quotes()</span><br><span class="line">        )</span><br><span class="line">    cs_map = (</span><br><span class="line">        Map()</span><br><span class="line">        .add(series_name = <span class="string">&#x27;现有确诊人数&#x27;</span>,data_pair = [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(province,surplus)],maptype = <span class="string">&quot;china&quot;</span>,is_map_symbol_show = <span class="literal">False</span>)</span><br><span class="line">        .set_global_opts(</span><br><span class="line">            title_opts = opts.TitleOpts(</span><br><span class="line">                title = <span class="string">&quot;中国疫情数据（现有确诊）&quot;</span>,</span><br><span class="line">                subtitle = <span class="string">&#x27;数据更新至：&#x27;</span> + time_china + <span class="string">&#x27;\n\n来源：百度疫情实时大数据报告&#x27;</span>),</span><br><span class="line">            visualmap_opts = opts.VisualMapOpts(max_ = <span class="number">300</span>,is_piecewise = <span class="literal">True</span>,pieces = pieces)</span><br><span class="line">            )</span><br><span class="line">        .dump_options_with_quotes()</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> ct_map,cs_map</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">global_total_map</span>(<span class="params">wb</span>):</span></span><br><span class="line">    ws_time = wb[<span class="string">&#x27;全球疫情数据更新时间&#x27;</span>]</span><br><span class="line">    ws_data = wb[<span class="string">&#x27;全球各国疫情数据&#x27;</span>]</span><br><span class="line">    ws_data.delete_rows(<span class="number">1</span>)</span><br><span class="line">    country = []</span><br><span class="line">    surplus = []</span><br><span class="line">    curconfirm = []</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> ws_data.values:</span><br><span class="line">        country.append(data[<span class="number">0</span>])</span><br><span class="line">        surplus.append(data[<span class="number">1</span>])</span><br><span class="line">        curconfirm.append(data[<span class="number">2</span>])    </span><br><span class="line">    time_global = ws_time[<span class="string">&#x27;A2&#x27;</span>].value</span><br><span class="line">    </span><br><span class="line">    pieces = [</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#FFFFFF&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">49</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;1-49&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#FFE5DB&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">99</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">50</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;50-99&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#FFC4B3&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">999</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;100-999&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#FF9985&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">9999</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">1000</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;1000-9999&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#F57567&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">99999</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">10000</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;10000-99999&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#E64546&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">999999</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">100000</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;100000-999999&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#B80909&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">9999999</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">1000000</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;1000000-9999999&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#BA0808&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>:<span class="number">99999999</span>,<span class="string">&#x27;min&#x27;</span>:<span class="number">10000000</span>,<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;&gt;=10000000&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;#F00000&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    name_map = &#123;</span><br><span class="line">        <span class="string">&quot;Somalia&quot;</span>: <span class="string">&quot;索马里&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Liechtenstein&quot;</span>: <span class="string">&quot;列支敦士登&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Morocco&quot;</span>: <span class="string">&quot;摩洛哥&quot;</span>,</span><br><span class="line">        <span class="string">&quot;W. Sahara&quot;</span>: <span class="string">&quot;西撒哈拉&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Serbia&quot;</span>: <span class="string">&quot;塞尔维亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Afghanistan&quot;</span>: <span class="string">&quot;阿富汗&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Angola&quot;</span>: <span class="string">&quot;安哥拉&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Albania&quot;</span>: <span class="string">&quot;阿尔巴尼亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Andorra&quot;</span>: <span class="string">&quot;安道尔共和国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;United Arab Emirates&quot;</span>: <span class="string">&quot;阿拉伯联合酋长国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Argentina&quot;</span>: <span class="string">&quot;阿根廷&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Armenia&quot;</span>: <span class="string">&quot;亚美尼亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Australia&quot;</span>: <span class="string">&quot;澳大利亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Austria&quot;</span>: <span class="string">&quot;奥地利&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Azerbaijan&quot;</span>: <span class="string">&quot;阿塞拜疆&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Burundi&quot;</span>: <span class="string">&quot;布隆迪&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Belgium&quot;</span>: <span class="string">&quot;比利时&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Benin&quot;</span>: <span class="string">&quot;贝宁&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Burkina Faso&quot;</span>: <span class="string">&quot;布基纳法索&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Bangladesh&quot;</span>: <span class="string">&quot;孟加拉国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Bulgaria&quot;</span>: <span class="string">&quot;保加利亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Bahrain&quot;</span>: <span class="string">&quot;巴林&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Bahamas&quot;</span>: <span class="string">&quot;巴哈马&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Bosnia and Herz.&quot;</span>: <span class="string">&quot;波斯尼亚和黑塞哥维那&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Belarus&quot;</span>: <span class="string">&quot;白俄罗斯&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Belize&quot;</span>: <span class="string">&quot;伯利兹&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Bermuda&quot;</span>: <span class="string">&quot;百慕大&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Bolivia&quot;</span>: <span class="string">&quot;玻利维亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Brazil&quot;</span>: <span class="string">&quot;巴西&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Barbados&quot;</span>: <span class="string">&quot;巴巴多斯&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Brunei&quot;</span>: <span class="string">&quot;文莱&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Bhutan&quot;</span>: <span class="string">&quot;不丹&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Botswana&quot;</span>: <span class="string">&quot;博茨瓦纳&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Central African Rep.&quot;</span>: <span class="string">&quot;中非共和国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Canada&quot;</span>: <span class="string">&quot;加拿大&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Switzerland&quot;</span>: <span class="string">&quot;瑞士&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Chile&quot;</span>: <span class="string">&quot;智利&quot;</span>,</span><br><span class="line">        <span class="string">&quot;China&quot;</span>: <span class="string">&quot;中国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Côte d&#x27;Ivoire&quot;</span>: <span class="string">&quot;科特迪瓦&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cameroon&quot;</span>: <span class="string">&quot;喀麦隆&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Dem. Rep. Congo&quot;</span>: <span class="string">&quot;刚果（布）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Congo&quot;</span>: <span class="string">&quot;刚果（金）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Colombia&quot;</span>: <span class="string">&quot;哥伦比亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cape Verde&quot;</span>: <span class="string">&quot;佛得角&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Costa Rica&quot;</span>: <span class="string">&quot;哥斯达黎加&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cuba&quot;</span>: <span class="string">&quot;古巴&quot;</span>,</span><br><span class="line">        <span class="string">&quot;N. Cyprus&quot;</span>: <span class="string">&quot;北塞浦路斯&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cyprus&quot;</span>: <span class="string">&quot;塞浦路斯&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Czech Rep.&quot;</span>: <span class="string">&quot;捷克&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Germany&quot;</span>: <span class="string">&quot;德国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Djibouti&quot;</span>: <span class="string">&quot;吉布提&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Denmark&quot;</span>: <span class="string">&quot;丹麦&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Dominican Rep.&quot;</span>: <span class="string">&quot;多米尼加&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Algeria&quot;</span>: <span class="string">&quot;阿尔及利亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Ecuador&quot;</span>: <span class="string">&quot;厄瓜多尔&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Egypt&quot;</span>: <span class="string">&quot;埃及&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Eritrea&quot;</span>: <span class="string">&quot;厄立特里亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Spain&quot;</span>: <span class="string">&quot;西班牙&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Estonia&quot;</span>: <span class="string">&quot;爱沙尼亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Ethiopia&quot;</span>: <span class="string">&quot;埃塞俄比亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Finland&quot;</span>: <span class="string">&quot;芬兰&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Fiji&quot;</span>: <span class="string">&quot;斐济&quot;</span>,</span><br><span class="line">        <span class="string">&quot;France&quot;</span>: <span class="string">&quot;法国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Gabon&quot;</span>: <span class="string">&quot;加蓬&quot;</span>,</span><br><span class="line">        <span class="string">&quot;United Kingdom&quot;</span>: <span class="string">&quot;英国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Georgia&quot;</span>: <span class="string">&quot;格鲁吉亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Ghana&quot;</span>: <span class="string">&quot;加纳&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Guinea&quot;</span>: <span class="string">&quot;几内亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Gambia&quot;</span>: <span class="string">&quot;冈比亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Guinea-Bissau&quot;</span>: <span class="string">&quot;几内亚比绍&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Eq. Guinea&quot;</span>: <span class="string">&quot;赤道几内亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Greece&quot;</span>: <span class="string">&quot;希腊&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Grenada&quot;</span>: <span class="string">&quot;格林纳达&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Greenland&quot;</span>: <span class="string">&quot;格陵兰岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Guatemala&quot;</span>: <span class="string">&quot;危地马拉&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Guam&quot;</span>: <span class="string">&quot;关岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Guyana&quot;</span>: <span class="string">&quot;圭亚那合作共和国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Honduras&quot;</span>: <span class="string">&quot;洪都拉斯&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Croatia&quot;</span>: <span class="string">&quot;克罗地亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Haiti&quot;</span>: <span class="string">&quot;海地&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Hungary&quot;</span>: <span class="string">&quot;匈牙利&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Indonesia&quot;</span>: <span class="string">&quot;印度尼西亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;India&quot;</span>: <span class="string">&quot;印度&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Br. Indian Ocean Ter.&quot;</span>: <span class="string">&quot;英属印度洋领土&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Ireland&quot;</span>: <span class="string">&quot;爱尔兰&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Iran&quot;</span>: <span class="string">&quot;伊朗&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Iraq&quot;</span>: <span class="string">&quot;伊拉克&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Iceland&quot;</span>: <span class="string">&quot;冰岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Israel&quot;</span>: <span class="string">&quot;以色列&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Italy&quot;</span>: <span class="string">&quot;意大利&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Jamaica&quot;</span>: <span class="string">&quot;牙买加&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Jordan&quot;</span>: <span class="string">&quot;约旦&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Japan&quot;</span>: <span class="string">&quot;日本&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Siachen Glacier&quot;</span>: <span class="string">&quot;锡亚琴冰川&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Kazakhstan&quot;</span>: <span class="string">&quot;哈萨克斯坦&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Kenya&quot;</span>: <span class="string">&quot;肯尼亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Kyrgyzstan&quot;</span>: <span class="string">&quot;吉尔吉斯斯坦&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cambodia&quot;</span>: <span class="string">&quot;柬埔寨&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Korea&quot;</span>: <span class="string">&quot;韩国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Kuwait&quot;</span>: <span class="string">&quot;科威特&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Lao PDR&quot;</span>: <span class="string">&quot;老挝&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Lebanon&quot;</span>: <span class="string">&quot;黎巴嫩&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Liberia&quot;</span>: <span class="string">&quot;利比里亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Libya&quot;</span>: <span class="string">&quot;利比亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Sri Lanka&quot;</span>: <span class="string">&quot;斯里兰卡&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Lesotho&quot;</span>: <span class="string">&quot;莱索托&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Lithuania&quot;</span>: <span class="string">&quot;立陶宛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Luxembourg&quot;</span>: <span class="string">&quot;卢森堡&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Latvia&quot;</span>: <span class="string">&quot;拉脱维亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Moldova&quot;</span>: <span class="string">&quot;摩尔多瓦&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Madagascar&quot;</span>: <span class="string">&quot;马达加斯加&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mexico&quot;</span>: <span class="string">&quot;墨西哥&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Macedonia&quot;</span>: <span class="string">&quot;马其顿&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mali&quot;</span>: <span class="string">&quot;马里&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Malta&quot;</span>: <span class="string">&quot;马耳他&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Myanmar&quot;</span>: <span class="string">&quot;缅甸&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Montenegro&quot;</span>: <span class="string">&quot;黑山&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mongolia&quot;</span>: <span class="string">&quot;蒙古国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozambique&quot;</span>: <span class="string">&quot;莫桑比克&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mauritania&quot;</span>: <span class="string">&quot;毛里塔尼亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mauritius&quot;</span>: <span class="string">&quot;毛里求斯&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Malawi&quot;</span>: <span class="string">&quot;马拉维&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Malaysia&quot;</span>: <span class="string">&quot;马来西亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Namibia&quot;</span>: <span class="string">&quot;纳米比亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;New Caledonia&quot;</span>: <span class="string">&quot;新喀里多尼亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Niger&quot;</span>: <span class="string">&quot;尼日尔&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Nigeria&quot;</span>: <span class="string">&quot;尼日利亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Nicaragua&quot;</span>: <span class="string">&quot;尼加拉瓜&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Netherlands&quot;</span>: <span class="string">&quot;荷兰&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Norway&quot;</span>: <span class="string">&quot;挪威&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Nepal&quot;</span>: <span class="string">&quot;尼泊尔&quot;</span>,</span><br><span class="line">        <span class="string">&quot;New Zealand&quot;</span>: <span class="string">&quot;新西兰&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Oman&quot;</span>: <span class="string">&quot;阿曼&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Pakistan&quot;</span>: <span class="string">&quot;巴基斯坦&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Panama&quot;</span>: <span class="string">&quot;巴拿马&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Peru&quot;</span>: <span class="string">&quot;秘鲁&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Philippines&quot;</span>: <span class="string">&quot;菲律宾&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Papua New Guinea&quot;</span>: <span class="string">&quot;巴布亚新几内亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Poland&quot;</span>: <span class="string">&quot;波兰&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Puerto Rico&quot;</span>: <span class="string">&quot;波多黎各&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Dem. Rep. Korea&quot;</span>: <span class="string">&quot;朝鲜&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Portugal&quot;</span>: <span class="string">&quot;葡萄牙&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Paraguay&quot;</span>: <span class="string">&quot;巴拉圭&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Palestine&quot;</span>: <span class="string">&quot;巴勒斯坦&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Qatar&quot;</span>: <span class="string">&quot;卡塔尔&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Romania&quot;</span>: <span class="string">&quot;罗马尼亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Russia&quot;</span>: <span class="string">&quot;俄罗斯&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Rwanda&quot;</span>: <span class="string">&quot;卢旺达&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Saudi Arabia&quot;</span>: <span class="string">&quot;沙特阿拉伯&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Sudan&quot;</span>: <span class="string">&quot;苏丹&quot;</span>,</span><br><span class="line">        <span class="string">&quot;S. Sudan&quot;</span>: <span class="string">&quot;南苏丹&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Senegal&quot;</span>: <span class="string">&quot;塞内加尔&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Singapore&quot;</span>: <span class="string">&quot;新加坡&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Solomon Is.&quot;</span>: <span class="string">&quot;所罗门群岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Sierra Leone&quot;</span>: <span class="string">&quot;塞拉利昂&quot;</span>,</span><br><span class="line">        <span class="string">&quot;El Salvador&quot;</span>: <span class="string">&quot;萨尔瓦多&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Suriname&quot;</span>: <span class="string">&quot;苏里南&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Slovakia&quot;</span>: <span class="string">&quot;斯洛伐克&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Slovenia&quot;</span>: <span class="string">&quot;斯洛文尼亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Sweden&quot;</span>: <span class="string">&quot;瑞典&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Swaziland&quot;</span>: <span class="string">&quot;斯威士兰&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Seychelles&quot;</span>: <span class="string">&quot;塞舌尔&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Syria&quot;</span>: <span class="string">&quot;叙利亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Chad&quot;</span>: <span class="string">&quot;乍得&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Togo&quot;</span>: <span class="string">&quot;多哥&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Thailand&quot;</span>: <span class="string">&quot;泰国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Tajikistan&quot;</span>: <span class="string">&quot;塔吉克斯坦&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Turkmenistan&quot;</span>: <span class="string">&quot;土库曼斯坦&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Timor-Leste&quot;</span>: <span class="string">&quot;东帝汶&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Tonga&quot;</span>: <span class="string">&quot;汤加&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Trinidad and Tobago&quot;</span>: <span class="string">&quot;特立尼达和多巴哥&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Tunisia&quot;</span>: <span class="string">&quot;突尼斯&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Turkey&quot;</span>: <span class="string">&quot;土耳其&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Tanzania&quot;</span>: <span class="string">&quot;坦桑尼亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Uganda&quot;</span>: <span class="string">&quot;乌干达&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Ukraine&quot;</span>: <span class="string">&quot;乌克兰&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Uruguay&quot;</span>: <span class="string">&quot;乌拉圭&quot;</span>,</span><br><span class="line">        <span class="string">&quot;United States&quot;</span>: <span class="string">&quot;美国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Uzbekistan&quot;</span>: <span class="string">&quot;乌兹别克斯坦&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Venezuela&quot;</span>: <span class="string">&quot;委内瑞拉&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Vietnam&quot;</span>: <span class="string">&quot;越南&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Vanuatu&quot;</span>: <span class="string">&quot;瓦努阿图&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Yemen&quot;</span>: <span class="string">&quot;也门&quot;</span>,</span><br><span class="line">        <span class="string">&quot;South Africa&quot;</span>: <span class="string">&quot;南非&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Zambia&quot;</span>: <span class="string">&quot;赞比亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Zimbabwe&quot;</span>: <span class="string">&quot;津巴布韦&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Aland&quot;</span>: <span class="string">&quot;奥兰群岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;American Samoa&quot;</span>: <span class="string">&quot;美属萨摩亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Fr. S. Antarctic Lands&quot;</span>: <span class="string">&quot;南极洲&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Antigua and Barb.&quot;</span>: <span class="string">&quot;安提瓜和巴布达&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Comoros&quot;</span>: <span class="string">&quot;科摩罗&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Curaçao&quot;</span>: <span class="string">&quot;库拉索岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cayman Is.&quot;</span>: <span class="string">&quot;开曼群岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Dominica&quot;</span>: <span class="string">&quot;多米尼加&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Falkland Is.&quot;</span>: <span class="string">&quot;福克兰群岛马尔维纳斯&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Faeroe Is.&quot;</span>: <span class="string">&quot;法罗群岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Micronesia&quot;</span>: <span class="string">&quot;密克罗尼西亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Heard I. and McDonald Is.&quot;</span>: <span class="string">&quot;赫德岛和麦克唐纳群岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Isle of Man&quot;</span>: <span class="string">&quot;曼岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Jersey&quot;</span>: <span class="string">&quot;泽西岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Kiribati&quot;</span>: <span class="string">&quot;基里巴斯&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Saint Lucia&quot;</span>: <span class="string">&quot;圣卢西亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;N. Mariana Is.&quot;</span>: <span class="string">&quot;北马里亚纳群岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Montserrat&quot;</span>: <span class="string">&quot;蒙特塞拉特&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Niue&quot;</span>: <span class="string">&quot;纽埃&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Palau&quot;</span>: <span class="string">&quot;帕劳&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Fr. Polynesia&quot;</span>: <span class="string">&quot;法属波利尼西亚&quot;</span>,</span><br><span class="line">        <span class="string">&quot;S. Geo. and S. Sandw. Is.&quot;</span>: <span class="string">&quot;南乔治亚岛和南桑威奇群岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Saint Helena&quot;</span>: <span class="string">&quot;圣赫勒拿&quot;</span>,</span><br><span class="line">        <span class="string">&quot;St. Pierre and Miquelon&quot;</span>: <span class="string">&quot;圣皮埃尔和密克隆群岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;São Tomé and Principe&quot;</span>: <span class="string">&quot;圣多美和普林西比&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Turks and Caicos Is.&quot;</span>: <span class="string">&quot;特克斯和凯科斯群岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;St. Vin. and Gren.&quot;</span>: <span class="string">&quot;圣文森特和格林纳丁斯&quot;</span>,</span><br><span class="line">        <span class="string">&quot;U.S. Virgin Is.&quot;</span>: <span class="string">&quot;美属维尔京群岛&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Samoa&quot;</span>: <span class="string">&quot;萨摩亚&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    gt_map = (</span><br><span class="line">        Map()</span><br><span class="line">        .add(series_name = <span class="string">&#x27;累计确诊人数&#x27;</span>,data_pair = [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(country,curconfirm)],maptype = <span class="string">&quot;world&quot;</span>,name_map = name_map,is_map_symbol_show = <span class="literal">False</span>)</span><br><span class="line">        .set_series_opts(label_opts = opts.LabelOpts(is_show = <span class="literal">False</span>))</span><br><span class="line">        .set_global_opts(</span><br><span class="line">            title_opts = opts.TitleOpts(</span><br><span class="line">                title = <span class="string">&quot;全球疫情数据（累计确诊）&quot;</span>,</span><br><span class="line">                subtitle = <span class="string">&#x27;数据更新至：&#x27;</span> + time_global + <span class="string">&#x27;\n\n来源：百度疫情实时大数据报告&#x27;</span>),</span><br><span class="line">            visualmap_opts = opts.VisualMapOpts(max_ = <span class="number">300</span>,is_piecewise = <span class="literal">True</span>,pieces = pieces)</span><br><span class="line">            )</span><br><span class="line">        .dump_options_with_quotes()</span><br><span class="line">        )</span><br><span class="line">    gs_map = (</span><br><span class="line">        Map()</span><br><span class="line">        .add(series_name = <span class="string">&#x27;现有确诊人数&#x27;</span>,data_pair = [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(country,surplus)],maptype = <span class="string">&quot;world&quot;</span>,name_map = name_map,is_map_symbol_show = <span class="literal">False</span>)</span><br><span class="line">        .set_series_opts(label_opts = opts.LabelOpts(is_show = <span class="literal">False</span>))</span><br><span class="line">        .set_global_opts(</span><br><span class="line">            title_opts = opts.TitleOpts(</span><br><span class="line">                title = <span class="string">&quot;全球疫情数据（现有确诊）&quot;</span>,</span><br><span class="line">                subtitle = <span class="string">&#x27;数据更新至：&#x27;</span> + time_global + <span class="string">&#x27;\n\n来源：百度疫情实时大数据报告&#x27;</span>),</span><br><span class="line">            visualmap_opts = opts.VisualMapOpts(max_ = <span class="number">300</span>,is_piecewise = <span class="literal">True</span>,pieces = pieces)</span><br><span class="line">            )</span><br><span class="line">        .dump_options_with_quotes()</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> gt_map,gs_map</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">china_daily_map</span>(<span class="params">wb</span>):</span></span><br><span class="line">    ws_china_confirmed = wb[<span class="string">&#x27;中国每日累计确诊数据&#x27;</span>]</span><br><span class="line">    ws_china_surplus = wb[<span class="string">&#x27;中国每日现有确诊数据&#x27;</span>]</span><br><span class="line">    ws_china_crued = wb[<span class="string">&#x27;中国每日累计治愈数据&#x27;</span>]</span><br><span class="line">    ws_china_died = wb[<span class="string">&#x27;中国每日累计死亡数据&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    ws_china_confirmed.delete_rows(<span class="number">1</span>)</span><br><span class="line">    ws_china_surplus.delete_rows(<span class="number">1</span>)</span><br><span class="line">    ws_china_crued.delete_rows(<span class="number">1</span>)</span><br><span class="line">    ws_china_died.delete_rows(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    x_date = []</span><br><span class="line">    y_china_confirmed = []</span><br><span class="line">    y_china_surplus = []</span><br><span class="line">    y_china_crued = []</span><br><span class="line">    y_china_died = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> china_confirmed <span class="keyword">in</span> ws_china_confirmed.values:</span><br><span class="line">        y_china_confirmed.append(china_confirmed[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> china_surplus <span class="keyword">in</span> ws_china_surplus.values:</span><br><span class="line">        y_china_surplus.append(china_surplus[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> china_crued <span class="keyword">in</span> ws_china_crued.values:</span><br><span class="line">        x_date.append(china_crued[<span class="number">0</span>])</span><br><span class="line">        y_china_crued.append(china_crued[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> china_died <span class="keyword">in</span> ws_china_died.values:</span><br><span class="line">        y_china_died.append(china_died[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">    fi_map = (</span><br><span class="line">        Line(init_opts = opts.InitOpts(height = <span class="string">&#x27;420px&#x27;</span>))</span><br><span class="line">        .add_xaxis(xaxis_data = x_date)</span><br><span class="line">        .add_yaxis(</span><br><span class="line">        series_name = <span class="string">&#x27;中国累计确诊人数&#x27;</span>,</span><br><span class="line">        y_axis = y_china_confirmed,</span><br><span class="line">        label_opts = opts.LabelOpts(is_show = <span class="literal">False</span>),</span><br><span class="line">        )</span><br><span class="line">        .add_xaxis(xaxis_data = x_date)</span><br><span class="line">        .add_yaxis(</span><br><span class="line">        series_name = <span class="string">&#x27;中国现有确诊人数&#x27;</span>,</span><br><span class="line">        y_axis = y_china_surplus,</span><br><span class="line">        label_opts = opts.LabelOpts(is_show = <span class="literal">False</span>),</span><br><span class="line">        )</span><br><span class="line">        .add_yaxis(</span><br><span class="line">        series_name = <span class="string">&#x27;中国累计治愈人数&#x27;</span>,</span><br><span class="line">        y_axis = y_china_crued,</span><br><span class="line">        label_opts = opts.LabelOpts(is_show = <span class="literal">False</span>),</span><br><span class="line">        )</span><br><span class="line">        .add_yaxis(</span><br><span class="line">        series_name = <span class="string">&#x27;中国累计死亡人数&#x27;</span>,</span><br><span class="line">        y_axis = y_china_died,</span><br><span class="line">        label_opts = opts.LabelOpts(is_show = <span class="literal">False</span>),</span><br><span class="line">        )</span><br><span class="line">        .set_global_opts(</span><br><span class="line">            title_opts = opts.TitleOpts(title = <span class="string">&#x27;中国COVID-19每日数据走势&#x27;</span>),</span><br><span class="line">            legend_opts = opts.LegendOpts(pos_bottom = <span class="string">&quot;bottom&quot;</span>,orient = <span class="string">&#x27;horizontal&#x27;</span>),</span><br><span class="line">            tooltip_opts = opts.TooltipOpts(trigger = <span class="string">&#x27;axis&#x27;</span>),</span><br><span class="line">            yaxis_opts = opts.AxisOpts(</span><br><span class="line">                type_ = <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">                axistick_opts = opts.AxisTickOpts(is_show = <span class="literal">True</span>),</span><br><span class="line">                splitline_opts= opts.SplitLineOpts(is_show = <span class="literal">True</span>),</span><br><span class="line">            ),</span><br><span class="line">            xaxis_opts = opts.AxisOpts(type_ = <span class="string">&#x27;category&#x27;</span>,boundary_gap=<span class="literal">False</span>),</span><br><span class="line">        )</span><br><span class="line">        .dump_options_with_quotes()</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> fi_map</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreign_daily_map</span>(<span class="params">wb</span>):</span></span><br><span class="line">    ws_foreign_confirmed = wb[<span class="string">&#x27;境外每日累计确诊数据&#x27;</span>]</span><br><span class="line">    ws_foreign_surplus = wb[<span class="string">&#x27;境外每日现有确诊数据&#x27;</span>]</span><br><span class="line">    ws_foreign_crued = wb[<span class="string">&#x27;境外每日累计治愈数据&#x27;</span>]</span><br><span class="line">    ws_foreign_died = wb[<span class="string">&#x27;境外每日累计死亡数据&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    ws_foreign_confirmed.delete_rows(<span class="number">1</span>)</span><br><span class="line">    ws_foreign_surplus.delete_rows(<span class="number">1</span>)</span><br><span class="line">    ws_foreign_crued.delete_rows(<span class="number">1</span>)</span><br><span class="line">    ws_foreign_died.delete_rows(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    x_date = []                <span class="comment"># 日期</span></span><br><span class="line">    y_foreign_confirmed = []   <span class="comment"># 累计确诊</span></span><br><span class="line">    y_foreign_surplus = []</span><br><span class="line">    y_foreign_crued = []       <span class="comment"># 累计治愈</span></span><br><span class="line">    y_foreign_died = []        <span class="comment"># 累计死亡</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> foreign_confirmed <span class="keyword">in</span> ws_foreign_confirmed.values:</span><br><span class="line">        y_foreign_confirmed.append(foreign_confirmed[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> foreign_surplus <span class="keyword">in</span> ws_foreign_surplus.values:</span><br><span class="line">        y_foreign_surplus.append(foreign_surplus[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> foreign_crued <span class="keyword">in</span> ws_foreign_crued.values:</span><br><span class="line">        x_date.append(foreign_crued[<span class="number">0</span>])</span><br><span class="line">        y_foreign_crued.append(foreign_crued[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> foreign_died <span class="keyword">in</span> ws_foreign_died.values:</span><br><span class="line">        y_foreign_died.append(foreign_died[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    fte_map = (</span><br><span class="line">        Line(init_opts=opts.InitOpts(height=<span class="string">&#x27;420px&#x27;</span>))</span><br><span class="line">            .add_xaxis(xaxis_data=x_date)</span><br><span class="line">            .add_yaxis(</span><br><span class="line">            series_name=<span class="string">&quot;境外累计确诊人数&quot;</span>,</span><br><span class="line">            y_axis=y_foreign_confirmed,</span><br><span class="line">            label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">            )</span><br><span class="line">            .add_xaxis(xaxis_data=x_date)</span><br><span class="line">            .add_yaxis(</span><br><span class="line">            series_name=<span class="string">&quot;境外现有确诊人数&quot;</span>,</span><br><span class="line">            y_axis=y_foreign_surplus,</span><br><span class="line">            label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">            )</span><br><span class="line">            .add_yaxis(</span><br><span class="line">            series_name=<span class="string">&quot;境外累计治愈人数&quot;</span>,</span><br><span class="line">            y_axis=y_foreign_crued,</span><br><span class="line">            label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">            )</span><br><span class="line">            .add_yaxis(</span><br><span class="line">            series_name=<span class="string">&quot;境外累计死亡人数&quot;</span>,</span><br><span class="line">            y_axis=y_foreign_died,</span><br><span class="line">            label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">            )</span><br><span class="line">            .set_global_opts(</span><br><span class="line">            title_opts=opts.TitleOpts(title=<span class="string">&quot;境外COVID-19每日数据走势&quot;</span>),</span><br><span class="line">            legend_opts=opts.LegendOpts(pos_bottom=<span class="string">&quot;bottom&quot;</span>, orient=<span class="string">&#x27;horizontal&#x27;</span>),</span><br><span class="line">            tooltip_opts=opts.TooltipOpts(trigger=<span class="string">&quot;axis&quot;</span>),</span><br><span class="line">            yaxis_opts=opts.AxisOpts(</span><br><span class="line">                type_=<span class="string">&quot;value&quot;</span>,</span><br><span class="line">                axistick_opts=opts.AxisTickOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">                splitline_opts=opts.SplitLineOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">            ),</span><br><span class="line">            xaxis_opts=opts.AxisOpts(type_=<span class="string">&quot;category&quot;</span>, boundary_gap=<span class="literal">False</span>),</span><br><span class="line">            )</span><br><span class="line">        .dump_options_with_quotes()</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> fte_map</span><br></pre></td></tr></table></figure><h2 id="设置路由"><a href="#设置路由" class="headerlink" title="设置路由"></a>设置路由</h2><p>在echarts目录下新建urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">app_name = <span class="string">&#x27;echarts&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;covid-19/ctmap/&#x27;</span>, views.CtView.as_view(),name = <span class="string">&#x27;covid_19_ctmap&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;covid-19/csmap/&#x27;</span>, views.CsView.as_view(),name = <span class="string">&#x27;covid_19_csmap&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;covid-19/fimap/&#x27;</span>, views.CdView.as_view(),name = <span class="string">&#x27;covid_19_fimap&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;covid-19/gtmap/&#x27;</span>, views.GtView.as_view(),name = <span class="string">&#x27;covid_19_gtmap&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;covid-19/gsmap/&#x27;</span>, views.GsView.as_view(),name = <span class="string">&#x27;covid_19_gsmap&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;covid-19/ftemap/&#x27;</span>, views.GdView.as_view(),name = <span class="string">&#x27;covid_19_ftemap&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;covid-19/&#x27;</span>,views.IndexView.as_view(),name = <span class="string">&#x27;covid_19&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;covid-19/update/&#x27;</span>,views.update,name = <span class="string">&#x27;covid_19_update&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="引入静态文件"><a href="#引入静态文件" class="headerlink" title="引入静态文件"></a>引入静态文件</h2><p>修改myproject/settings.py，在末尾添加如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&#x27;static&#x27;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在根目录新建static目录，static目录中新建echarts目录，将静态文件放进去。<br>本文所需的静态文件可在<a href="https://github.com/ljc545w/myproject/tree/main/static/echarts" title="Github">Github</a>获取。</p><h2 id="HTML模版"><a href="#HTML模版" class="headerlink" title="HTML模版"></a>HTML模版</h2><p>修改myproject/settings.py，更新TEMPLATES：<br>在DIRS中添加：os.path.join(BASE_DIR,’templates’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR,<span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在根目录下新建templates文件夹，在templates中新建echarts文件夹，在其中新建covid_19.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYEP <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>疫情大数据报告<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;echarts/jquery/jquery.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;echarts/js/echarts.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;echarts/js/maps/china.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;echarts/js/maps/world.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;echarts/bootstrap/css/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/popper.js@1.16.1-lts/dist/umd/popper.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;echarts/jquery/jquery-3.5.1.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--script src=&quot;&#123;% static &#x27;echarts/layer/layer.js&#x27; %&#125;&quot;&gt;&lt;/script--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-expand-lg navbar-dark bg-dark&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span>&gt;</span>疫情大数据报告<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;navbar-nav&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;echarts:covid_19_update&#x27; %&#125;&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;home&#x27; %&#125;&quot;</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/ljc545w/myproject&quot;</span>&gt;</span>Github<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-9&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:550px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:550px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:370px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:550px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map5&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:550px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:370px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> chart1 = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;map1&#x27;</span>),<span class="string">&#x27;write&#x27;</span>,&#123;<span class="attr">renderer</span>:<span class="string">&#x27;canvas&#x27;</span>&#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> chart2 = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;map2&#x27;</span>),<span class="string">&#x27;write&#x27;</span>,&#123;<span class="attr">renderer</span>:<span class="string">&#x27;canvas&#x27;</span>&#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> chart3 = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;map3&#x27;</span>),<span class="string">&#x27;write&#x27;</span>,&#123;<span class="attr">renderer</span>:<span class="string">&#x27;canvas&#x27;</span>&#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> chart4 = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;map4&#x27;</span>),<span class="string">&#x27;write&#x27;</span>,&#123;<span class="attr">renderer</span>:<span class="string">&#x27;canvas&#x27;</span>&#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> chart5 = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;map5&#x27;</span>),<span class="string">&#x27;write&#x27;</span>,&#123;<span class="attr">renderer</span>:<span class="string">&#x27;canvas&#x27;</span>&#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> chart6 = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;map6&#x27;</span>),<span class="string">&#x27;write&#x27;</span>,&#123;<span class="attr">renderer</span>:<span class="string">&#x27;canvas&#x27;</span>&#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            fetchData(chart1,<span class="string">&quot;ctmap&quot;</span>);</span></span><br><span class="line"><span class="javascript">            fetchData(chart2,<span class="string">&quot;csmap&quot;</span>);</span></span><br><span class="line"><span class="javascript">            fetchData(chart3,<span class="string">&quot;fimap&quot;</span>);</span></span><br><span class="line"><span class="javascript">            fetchData(chart4,<span class="string">&quot;gtmap&quot;</span>);</span></span><br><span class="line"><span class="javascript">            fetchData(chart5,<span class="string">&quot;gsmap&quot;</span>);</span></span><br><span class="line"><span class="javascript">            fetchData(chart6,<span class="string">&quot;ftemap&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    );</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params">chart,string</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>:<span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>:<span class="string">&quot;/echarts/covid-19/&quot;</span> + string,</span></span><br><span class="line"><span class="javascript">            <span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span>:<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">               chart.setOption(result.data);</span></span><br><span class="line"><span class="javascript">           &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先需要运行一次data_get.py获取json文件</span></span><br><span class="line">python /echarts/data_get.py</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>在浏览器访问127.0.0.1:8000/echarts/covid-19/即可看到.</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>虽然已经成功整合，在本地运行良好，但是服务器端存在缓存问题，点击更新后无法显示最新数据，需要多次刷新才行，这个问题留在以后解决。</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的简单使用</title>
      <link href="/2021/01/17/Git%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/01/17/Git%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本来写好的文章，因为数据库bug没有了，草稿也没保存。。真的心累。<br>重新写一遍吧，没办法。  </p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>Windows下首先安装Git，具体安装方式请百度。<br>打开Git GUI，点击Help-&gt;Show SSH Key-&gt;Generate key注册公钥，按提示填入私钥，可以留空，这样提交代码时不需要输入，觉得不安全就设置私钥且牢记密码。<br>复制公钥，进入Github，点击头像-&gt;settings-&gt;SSH and GPG key-&gt;New SSH key，将密钥添加进去。<br>打开git bash：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 验证连接</span></span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 设置用户名和邮箱</span></span></span><br><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>最后在Github上新建用于保存项目的仓库。</p><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><p>以下命令均在git bash中执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">初始化，在项目根目录</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span><span class="bash">添加文件</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span><span class="bash">添加Readme</span></span><br><span class="line">git add &quot;myproject&quot; &gt;&gt; README.md</span><br><span class="line"><span class="meta">#</span><span class="bash">查看状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta">#</span><span class="bash">提交到本地</span></span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">连接到远程仓库</span></span><br><span class="line">git remote add origin &quot;Github仓库地址&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">提交到远程仓库</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>修改代码后提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看变更情况</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta">#</span><span class="bash">添加文件</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span><span class="bash">提交到本地</span></span><br><span class="line">git commit -m &#x27;second commit&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">提交到Github</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>如果远程仓库存在本地没有（或不一致）的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先从远程仓库同步</span></span><br><span class="line">git pull origin master</span><br><span class="line"><span class="meta">#</span><span class="bash">提交</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="meta">#</span><span class="bash">强行覆盖远程仓库</span></span><br><span class="line">git push origin master -f</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>以后有新的命令会再来更新，这些命令目前来说够我用了。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python仿制腾讯大数据星云图</title>
      <link href="/2021/01/13/Python%E4%BB%BF%E5%88%B6%E8%85%BE%E8%AE%AF%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%98%9F%E4%BA%91%E5%9B%BE/"/>
      <url>/2021/01/13/Python%E4%BB%BF%E5%88%B6%E8%85%BE%E8%AE%AF%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%98%9F%E4%BA%91%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>带伙可以先看下腾讯的图，非常漂亮</p><hr><p><a href="https://xingyun.map.qq.com/" title="腾讯位置大数据星云图">腾讯位置大数据星云图</a></p><hr><p>再看看本文代码绘制的图，逼格降低99%  </p><hr><p><img src="https://www.ljczero.top/media/editor/xingyun.png"></p><hr><p>但是轮廓还是有的对吧！！！！话不多说，我们开始吧！</p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> shapely.geometry <span class="keyword">import</span> Point</span><br><span class="line"><span class="keyword">from</span> shapely.geometry.polygon <span class="keyword">import</span> Polygon</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Geo</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> GeoType</span><br><span class="line"><span class="keyword">import</span> pyecharts</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure><p>此外，需要下载中国地图，以下包含省市、县区地图，但本文中未使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install echarts-countries-pypkg</span><br><span class="line">pip install echarts-china-provinces-pypkg</span><br><span class="line">pip install echarts-china-cities-pypkg</span><br><span class="line">pip install echarts-china-counties-pypkg</span><br><span class="line">pip install echarts-china-misc-pypkg</span><br></pre></td></tr></table></figure><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>Github地址：</p><hr><p><code>https://github.com/apache/echarts</code></p><hr><p>需要dist目录下的echarts.min.js文件和test-&gt;data-&gt;map目录下的js文件夹（本文需要的是china.js）</p><hr><p>修改静态文件目录，提高访问效率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyecharts.<span class="built_in">globals</span>.CurrentConfig.ONLINE_HOST = <span class="string">&quot;./js/&quot;</span></span><br></pre></td></tr></table></figure><hr><p>文件夹结构为:在脚本存放目录下新建js文件夹，放入echarts.min.js，js文件夹中新建maps文件夹，放入china.js</p><h2 id="采集数据"><a href="#采集数据" class="headerlink" title="采集数据"></a>采集数据</h2><p>腾讯的接口如下：</p><hr><p><code>https://xingyun.map.qq.com/api/getXingyunPoints</code></p><hr><p>参数为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;count&#x27;</span>:<span class="number">4</span>,<span class="comment">#固定值</span></span><br><span class="line">    <span class="string">&#x27;rank&#x27;</span>:<span class="number">0</span>,<span class="comment">#范围为0-3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>():</span></span><br><span class="line"><span class="comment">#获取随机请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:UserAgent().random</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#接口</span></span><br><span class="line">    url = <span class="string">&#x27;https://xingyun.map.qq.com/api/getXingyunPoints&#x27;</span></span><br><span class="line"><span class="comment">#空列表，保存清洗后的数据</span></span><br><span class="line">    all_data = []</span><br><span class="line"><span class="comment">#改变rank值进行抓取</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line"><span class="comment">#构造参数</span></span><br><span class="line">        payload = &#123;<span class="string">&#x27;count&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;rank&#x27;</span>:i&#125;</span><br><span class="line"><span class="comment">#抓取数据，得到的是一个json字典，所以使用json解析</span></span><br><span class="line">        response = requests.post(url = url,headers = headers,data=json.dumps(payload))</span><br><span class="line">        datas = response.json()[<span class="string">&#x27;locs&#x27;</span>]</span><br><span class="line"><span class="comment">#用逗号分隔数据，主要有三项，分别是纬度，经度（数值是一百倍），以及该坐标的人数</span></span><br><span class="line">        datas = datas.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment">#将所有数据取整</span></span><br><span class="line">        datas = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> datas[:-<span class="number">1</span>]]</span><br><span class="line"><span class="comment">#空列表，用于保存一个坐标点的信息</span></span><br><span class="line">        a = []</span><br><span class="line"><span class="comment">#遍历数据，每三条组成一个坐标点，并添加到all_data中</span></span><br><span class="line">        <span class="keyword">for</span> n,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(datas):</span><br><span class="line">            a.append(data)</span><br><span class="line">            <span class="keyword">if</span> (n + <span class="number">1</span>) % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">                all_data.append(a)</span><br><span class="line">                a = []</span><br><span class="line"><span class="comment">#将纬度和经度的数值除以100，得到新的列表并返回</span></span><br><span class="line">    all_data = [[i[<span class="number">0</span>] / <span class="number">100</span>,i[<span class="number">1</span>] / <span class="number">100</span>,i[<span class="number">2</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> all_data]</span><br><span class="line">    <span class="keyword">return</span> all_data</span><br></pre></td></tr></table></figure><h2 id="数据去重"><a href="#数据去重" class="headerlink" title="数据去重"></a>数据去重</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_list</span>(<span class="params">data</span>):</span></span><br><span class="line"><span class="comment">#获取纬度、经度、人数，转换为三个列表</span></span><br><span class="line">    lat,lng,weight = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> data],[i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> data],[i[<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> data]</span><br><span class="line"><span class="comment">#使用pandas去重</span></span><br><span class="line">    dataframe = pd.DataFrame(&#123;<span class="string">&#x27;纬度&#x27;</span>:lat,<span class="string">&#x27;经度&#x27;</span>:lng,<span class="string">&#x27;人数&#x27;</span>:weight&#125;)</span><br><span class="line">    dataframe.drop_duplicates(keep = <span class="string">&#x27;first&#x27;</span>,inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#去重后的数据转换为列表，返回</span></span><br><span class="line">    <span class="keyword">return</span> dataframe[[<span class="string">&#x27;纬度&#x27;</span>,<span class="string">&#x27;经度&#x27;</span>,<span class="string">&#x27;人数&#x27;</span>]].values.tolist()</span><br></pre></td></tr></table></figure><h2 id="获取国家边界"><a href="#获取国家边界" class="headerlink" title="获取国家边界"></a>获取国家边界</h2><p>本篇文章不计算国外坐标，需要对数据进行过滤（如果想绘制世界地图，对本文代码稍作修改即可，主要是将maptype修改为world，然后将world.js保存到maps目录中），过滤的方法是point in polygon，在数学上叫射线法，python的shapely模块集成了该方法，比较方便。文本数据会放在文末。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_fence</span>():</span></span><br><span class="line"><span class="comment">#读取边界信息</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;china_axis.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    data = f.read()</span><br><span class="line">    f.close()</span><br><span class="line"><span class="comment">#使用正则表达式匹配坐标点</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;Point\((.*?)\)&#x27;</span>)</span><br><span class="line">    polyline = re.findall(pattern,data)</span><br><span class="line"><span class="comment">#空列表用于保存清洗后的坐标点</span></span><br><span class="line">    buffer = []</span><br><span class="line"><span class="comment">#以[经度,纬度]的列表对象保存到buffer中</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> polyline:</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            lng, lat = line.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            buffer.append([<span class="built_in">float</span>(lng), <span class="built_in">float</span>(lat)])</span><br><span class="line"><span class="comment">#转换为数组并返回</span></span><br><span class="line">    buffer = np.array(buffer)</span><br><span class="line">    <span class="keyword">return</span> buffer</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>这部分可以不要，如果你想看看程序执行花了多长时间可以加上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        startTime = time.time()</span><br><span class="line">        res = func(*args,**kwargs)</span><br><span class="line">        endTime = time.time()</span><br><span class="line">        msecs = (endTime - startTime)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;s&quot;</span>.<span class="built_in">format</span>(msecs))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_geo</span>(<span class="params">all_data</span>):</span></span><br><span class="line"><span class="comment">#地图样式</span></span><br><span class="line">    city = <span class="string">&#x27;china&#x27;</span></span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">    figure = Geo()</span><br><span class="line"><span class="comment">#设定地图样式，is_roam禁止鼠标拖放和滑轮缩放，如果不想禁用则去掉该参数</span></span><br><span class="line">    figure.add_schema(maptype=city,is_roam=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#纬度、经度、人数列表</span></span><br><span class="line">    lat,lng,weight = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> all_data],[i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> all_data],[i[<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> all_data]</span><br><span class="line"><span class="comment">#保存数据对</span></span><br><span class="line">    data_pair = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lat)):</span><br><span class="line">        <span class="comment"># 定义坐标对应的名称，添加到坐标库中 add_coordinate(name, lng, lat)</span></span><br><span class="line">        figure.add_coordinate(<span class="string">&#x27;坐标&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(lng[i],lat[i]), lng[i], lat[i])</span><br><span class="line">        <span class="comment">#添加数据对</span></span><br><span class="line">        data_pair.append((<span class="string">&#x27;坐标&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(lng[i],lat[i]),weight[i]))</span><br><span class="line">    <span class="comment">#数据对，绘图方式（散点图），点的大小</span></span><br><span class="line">    figure.add(<span class="string">&#x27;&#x27;</span>, data_pair, type_=<span class="string">&#x27;scatter&#x27;</span>, symbol_size=<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#上面方式绘制的点无法跟随地图缩放，所以在最前面禁用掉了</span></span><br><span class="line">    <span class="comment">#以下方式绘制的点可以跟随缩放，数据点过多时不建议使用</span></span><br><span class="line">    <span class="comment">#figure.add(&#x27;&#x27;, data_pair, type_=GeoType.EFFECT_SCATTER, symbol_size=1)</span></span><br><span class="line">    <span class="comment">#设置样式</span></span><br><span class="line">    figure.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">    <span class="comment">#自定义分段 color 可以用取色器取色</span></span><br><span class="line">    pieces = [</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#B0C4DE&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;2-10&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#1E90FF&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;11-20&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#00BFFF&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">21</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">30</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;21-30&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#87CEEB&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">31</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;31-50&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#87CEFA&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">51</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;51-100&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#1E90FF&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">101</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;101-200&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#00FFFF&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">201</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;200以上&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#191970&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">#is_piecewise 是否自定义分段，变为true才能生效</span></span><br><span class="line">    figure.set_global_opts(</span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(is_piecewise=<span class="literal">True</span>, pieces=pieces),</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&quot;坐标散点图&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> figure</span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启用装饰器</span></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="comment">#获取数据</span></span><br><span class="line">    datas = run()</span><br><span class="line"><span class="comment">#去重</span></span><br><span class="line">    datas = clear_list(datas)</span><br><span class="line"><span class="comment">#打乱列表，以实现简单的随机取样</span></span><br><span class="line">    random.shuffle(datas)</span><br><span class="line"><span class="comment">#保存要绘制的坐标点</span></span><br><span class="line">    all_data = []</span><br><span class="line"><span class="comment">#获取边界范围</span></span><br><span class="line">    fence = load_fence()</span><br><span class="line"><span class="comment">#计数坐标点</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line"><span class="comment">#抽样100000个坐标点</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(all_data) &lt; <span class="number">100000</span>:</span><br><span class="line">        data = datas[i]</span><br><span class="line"><span class="comment">#坐标渲染成Point对象</span></span><br><span class="line">        point = Point(data[<span class="number">1</span>],data[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#如果坐标在边界范围内，则添加到绘图列表中</span></span><br><span class="line">        <span class="keyword">if</span> Polygon(fence).contains(point) == <span class="literal">True</span>:</span><br><span class="line">            all_data.append(data)</span><br><span class="line"><span class="comment">#判断下一个点</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"><span class="comment">#绘图</span></span><br><span class="line">    figure = plot_geo(all_data)</span><br><span class="line">    <span class="comment"># 渲染成html, 可用浏览器直接打开</span></span><br><span class="line">    figure.render(<span class="string">&#x27;render.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="边界文本"><a href="#边界文本" class="headerlink" title="边界文本"></a>边界文本</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateChinaMapLine</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pts = [];</span><br><span class="line">    pt1 = <span class="keyword">new</span> BMap.Point(<span class="number">124.326919</span>, <span class="number">39.841287</span>);</span><br><span class="line">    pts.push(pt1);</span><br><span class="line">    pt2 = <span class="keyword">new</span> BMap.Point(<span class="number">124.630475</span>, <span class="number">40.230192</span>);</span><br><span class="line">    pts.push(pt2);</span><br><span class="line">    pt3 = <span class="keyword">new</span> BMap.Point(<span class="number">124.980023</span>, <span class="number">40.420289</span>);</span><br><span class="line">    pts.push(pt3);</span><br><span class="line">    pt4 = <span class="keyword">new</span> BMap.Point(<span class="number">125.053612</span>, <span class="number">40.458947</span>);</span><br><span class="line">    pts.push(pt4);</span><br><span class="line">    pt5 = <span class="keyword">new</span> BMap.Point(<span class="number">125.028316</span>, <span class="number">40.520401</span>);</span><br><span class="line">    pts.push(pt5);</span><br><span class="line">    pt6 = <span class="keyword">new</span> BMap.Point(<span class="number">125.331871</span>, <span class="number">40.63438</span>);</span><br><span class="line">    pts.push(pt6);</span><br><span class="line">    pt7 = <span class="keyword">new</span> BMap.Point(<span class="number">125.456053</span>, <span class="number">40.61861</span>);</span><br><span class="line">    pts.push(pt7);</span><br><span class="line">    pt8 = <span class="keyword">new</span> BMap.Point(<span class="number">126.042467</span>, <span class="number">40.901897</span>);</span><br><span class="line">    pts.push(pt8);</span><br><span class="line">    pt9 = <span class="keyword">new</span> BMap.Point(<span class="number">126.888743</span>, <span class="number">41.73411</span>);</span><br><span class="line">    pts.push(pt9);</span><br><span class="line">    pt10 = <span class="keyword">new</span> BMap.Point(<span class="number">127.367072</span>, <span class="number">41.437131</span>);</span><br><span class="line"></span><br><span class="line">    pts.push(pt10);</span><br><span class="line">    pt11 = <span class="keyword">new</span> BMap.Point(<span class="number">128.148958</span>, <span class="number">41.347076</span>);</span><br><span class="line">    pts.push(pt11);</span><br><span class="line">    pt12 = <span class="keyword">new</span> BMap.Point(<span class="number">128.323732</span>, <span class="number">41.568524</span>);</span><br><span class="line">    pts.push(pt12);</span><br><span class="line">    pt13 = <span class="keyword">new</span> BMap.Point(<span class="number">128.112163</span>, <span class="number">41.961089</span>);</span><br><span class="line">    pts.push(pt13);</span><br><span class="line">    pt14 = <span class="keyword">new</span> BMap.Point(<span class="number">128.995233</span>, <span class="number">41.99541</span>);</span><br><span class="line">    pts.push(pt14);</span><br><span class="line">    pt15 = <span class="keyword">new</span> BMap.Point(<span class="number">129.418371</span>, <span class="number">42.378521</span>);</span><br><span class="line">    pts.push(pt15);</span><br><span class="line">    pt16 = <span class="keyword">new</span> BMap.Point(<span class="number">129.841509</span>, <span class="number">42.41943</span>);</span><br><span class="line">    pts.push(pt16);</span><br><span class="line">    pt17 = <span class="keyword">new</span> BMap.Point(<span class="number">130.080674</span>, <span class="number">42.90824</span>);</span><br><span class="line">    pts.push(pt17);</span><br><span class="line">    pt18 = <span class="keyword">new</span> BMap.Point(<span class="number">130.65099</span>, <span class="number">42.364879</span>);</span><br><span class="line">    pts.push(pt18);</span><br><span class="line">    pt19 = <span class="keyword">new</span> BMap.Point(<span class="number">130.503812</span>, <span class="number">42.637157</span>);</span><br><span class="line">    pts.push(pt19);</span><br><span class="line">    pt20 = <span class="keyword">new</span> BMap.Point(<span class="number">131.147717</span>, <span class="number">42.867653</span>);</span><br><span class="line">    pts.push(pt20);</span><br><span class="line"></span><br><span class="line">    pt21 = <span class="keyword">new</span> BMap.Point(<span class="number">131.313293</span>, <span class="number">43.366337</span>);</span><br><span class="line">    pts.push(pt21);</span><br><span class="line">    pt22 = <span class="keyword">new</span> BMap.Point(<span class="number">131.386882</span>, <span class="number">43.967324</span>);</span><br><span class="line">    pts.push(pt22);</span><br><span class="line">    pt23 = <span class="keyword">new</span> BMap.Point(<span class="number">131.202909</span>, <span class="number">44.798523</span>);</span><br><span class="line">    pts.push(pt23);</span><br><span class="line">    pt24 = <span class="keyword">new</span> BMap.Point(<span class="number">131.938801</span>, <span class="number">45.190155</span>);</span><br><span class="line">    pts.push(pt24);</span><br><span class="line">    pt25 = <span class="keyword">new</span> BMap.Point(<span class="number">133.024241</span>, <span class="number">44.916296</span>);</span><br><span class="line">    pts.push(pt25);</span><br><span class="line">    pt26 = <span class="keyword">new</span> BMap.Point(<span class="number">134.385641</span>, <span class="number">47.183241</span>);</span><br><span class="line">    pts.push(pt26);</span><br><span class="line">    pt27 = <span class="keyword">new</span> BMap.Point(<span class="number">134.845574</span>, <span class="number">47.670159</span>);</span><br><span class="line">    pts.push(pt27);</span><br><span class="line">    pt28 = <span class="keyword">new</span> BMap.Point(<span class="number">134.73519</span>, <span class="number">48.066299</span>);</span><br><span class="line">    pts.push(pt28);</span><br><span class="line">    pt29 = <span class="keyword">new</span> BMap.Point(<span class="number">135.250314</span>, <span class="number">48.434915</span>);</span><br><span class="line">    pts.push(pt29);</span><br><span class="line">    pt30 = <span class="keyword">new</span> BMap.Point(<span class="number">133.079433</span>, <span class="number">48.115602</span>);</span><br><span class="line">    pts.push(pt30);</span><br><span class="line"></span><br><span class="line">    pt31 = <span class="keyword">new</span> BMap.Point(<span class="number">132.453925</span>, <span class="number">47.76948</span>);</span><br><span class="line">    pts.push(pt31);</span><br><span class="line">    pt32 = <span class="keyword">new</span> BMap.Point(<span class="number">131.221306</span>, <span class="number">47.707427</span>);</span><br><span class="line">    pts.push(pt32);</span><br><span class="line">    pt33 = <span class="keyword">new</span> BMap.Point(<span class="number">130.85336</span>, <span class="number">48.078629</span>);</span><br><span class="line">    pts.push(pt33);</span><br><span class="line">    pt34 = <span class="keyword">new</span> BMap.Point(<span class="number">130.908552</span>, <span class="number">48.825163</span>);</span><br><span class="line">    pts.push(pt34);</span><br><span class="line">    pt35 = <span class="keyword">new</span> BMap.Point(<span class="number">128.093766</span>, <span class="number">49.632427</span>);</span><br><span class="line">    pts.push(pt35);</span><br><span class="line">    pt36 = <span class="keyword">new</span> BMap.Point(<span class="number">125.830898</span>, <span class="number">53.063643</span>);</span><br><span class="line">    pts.push(pt36);</span><br><span class="line">    pt37 = <span class="keyword">new</span> BMap.Point(<span class="number">123.420852</span>, <span class="number">53.60326</span>);</span><br><span class="line">    pts.push(pt37);</span><br><span class="line">    pt38 = <span class="keyword">new</span> BMap.Point(<span class="number">120.661258</span>, <span class="number">53.240599</span>);</span><br><span class="line">    pts.push(pt38);</span><br><span class="line">    pt39 = <span class="keyword">new</span> BMap.Point(<span class="number">119.906969</span>, <span class="number">52.584436</span>);</span><br><span class="line">    pts.push(pt39);</span><br><span class="line">    pt40 = <span class="keyword">new</span> BMap.Point(<span class="number">120.698052</span>, <span class="number">52.494695</span>);</span><br><span class="line">    pts.push(pt40);</span><br><span class="line"></span><br><span class="line">    pt41 = <span class="keyword">new</span> BMap.Point(<span class="number">120.734847</span>, <span class="number">52.05456</span>);</span><br><span class="line">    pts.push(pt41);</span><br><span class="line">    pt42 = <span class="keyword">new</span> BMap.Point(<span class="number">119.023898</span>, <span class="number">50.296998</span>);</span><br><span class="line">    pts.push(pt42);</span><br><span class="line">    pt43 = <span class="keyword">new</span> BMap.Point(<span class="number">119.263063</span>, <span class="number">50.143545</span>);</span><br><span class="line">    pts.push(pt43);</span><br><span class="line">    pt44 = <span class="keyword">new</span> BMap.Point(<span class="number">117.956855</span>, <span class="number">49.560675</span>);</span><br><span class="line">    pts.push(pt44);</span><br><span class="line">    pt45 = <span class="keyword">new</span> BMap.Point(<span class="number">116.889812</span>, <span class="number">49.858941</span>);</span><br><span class="line">    pts.push(pt45);</span><br><span class="line">    pt46 = <span class="keyword">new</span> BMap.Point(<span class="number">115.47322</span>, <span class="number">48.078629</span>);</span><br><span class="line">    pts.push(pt46);</span><br><span class="line">    pt47 = <span class="keyword">new</span> BMap.Point(<span class="number">115.988344</span>, <span class="number">47.607987</span>);</span><br><span class="line">    pts.push(pt47);</span><br><span class="line">    pt48 = <span class="keyword">new</span> BMap.Point(<span class="number">116.797825</span>, <span class="number">47.76948</span>);</span><br><span class="line">    pts.push(pt48);</span><br><span class="line">    pt49 = <span class="keyword">new</span> BMap.Point(<span class="number">117.349744</span>, <span class="number">47.520821</span>);</span><br><span class="line">    pts.push(pt49);</span><br><span class="line">    pt50 = <span class="keyword">new</span> BMap.Point(<span class="number">117.901663</span>, <span class="number">47.905734</span>);</span><br><span class="line">    pts.push(pt50);</span><br><span class="line"></span><br><span class="line">    pt51 = <span class="keyword">new</span> BMap.Point(<span class="number">118.508774</span>, <span class="number">47.893363</span>);</span><br><span class="line">    pts.push(pt51);</span><br><span class="line">    pt52 = <span class="keyword">new</span> BMap.Point(<span class="number">118.545569</span>, <span class="number">47.86861</span>);</span><br><span class="line">    pts.push(pt52);</span><br><span class="line">    pt53 = <span class="keyword">new</span> BMap.Point(<span class="number">119.888571</span>, <span class="number">46.843488</span>);</span><br><span class="line">    pts.push(pt53);</span><br><span class="line">    pt54 = <span class="keyword">new</span> BMap.Point(<span class="number">119.796585</span>, <span class="number">46.590415</span>);</span><br><span class="line">    pts.push(pt54);</span><br><span class="line">    pt55 = <span class="keyword">new</span> BMap.Point(<span class="number">119.005501</span>, <span class="number">46.717101</span>);</span><br><span class="line">    pts.push(pt55);</span><br><span class="line">    pt56 = <span class="keyword">new</span> BMap.Point(<span class="number">117.791279</span>, <span class="number">46.526961</span>);</span><br><span class="line">    pts.push(pt56);</span><br><span class="line">    pt57 = <span class="keyword">new</span> BMap.Point(<span class="number">117.404936</span>, <span class="number">46.310656</span>);</span><br><span class="line">    pts.push(pt57);</span><br><span class="line">    pt58 = <span class="keyword">new</span> BMap.Point(<span class="number">116.797825</span>, <span class="number">46.323404</span>);</span><br><span class="line">    pts.push(pt58);</span><br><span class="line">    pt59 = <span class="keyword">new</span> BMap.Point(<span class="number">116.282701</span>, <span class="number">45.798295</span>);</span><br><span class="line">    pts.push(pt59);</span><br><span class="line">    pt60 = <span class="keyword">new</span> BMap.Point(<span class="number">114.700534</span>, <span class="number">45.384961</span>);</span><br><span class="line">    pts.push(pt60);</span><br><span class="line"></span><br><span class="line">    pt61 = <span class="keyword">new</span> BMap.Point(<span class="number">113.670285</span>, <span class="number">44.759212</span>);</span><br><span class="line">    pts.push(pt61);</span><br><span class="line">    pt62 = <span class="keyword">new</span> BMap.Point(<span class="number">112.161707</span>, <span class="number">45.04687</span>);</span><br><span class="line">    pts.push(pt62);</span><br><span class="line">    pt63 = <span class="keyword">new</span> BMap.Point(<span class="number">111.444212</span>, <span class="number">44.298587</span>);</span><br><span class="line">    pts.push(pt63);</span><br><span class="line">    pt64 = <span class="keyword">new</span> BMap.Point(<span class="number">111.959336</span>, <span class="number">43.767669</span>);</span><br><span class="line">    pts.push(pt64);</span><br><span class="line">    pt65 = <span class="keyword">new</span> BMap.Point(<span class="number">110.082812</span>, <span class="number">42.569199</span>);</span><br><span class="line">    pts.push(pt65);</span><br><span class="line">    pt66 = <span class="keyword">new</span> BMap.Point(<span class="number">107.543985</span>, <span class="number">42.39216</span>);</span><br><span class="line">    pts.push(pt66);</span><br><span class="line">    pt67 = <span class="keyword">new</span> BMap.Point(<span class="number">105.115542</span>, <span class="number">41.609961</span>);</span><br><span class="line">    pts.push(pt67);</span><br><span class="line">    pt68 = <span class="keyword">new</span> BMap.Point(<span class="number">100.405834</span>, <span class="number">42.596391</span>);</span><br><span class="line">    pts.push(pt68);</span><br><span class="line">    pt69 = <span class="keyword">new</span> BMap.Point(<span class="number">96.560799</span>, <span class="number">42.772848</span>);</span><br><span class="line">    pts.push(pt69);</span><br><span class="line">    pt70 = <span class="keyword">new</span> BMap.Point(<span class="number">91.188788</span>, <span class="number">45.203163</span>);</span><br><span class="line">    pts.push(pt70);</span><br><span class="line"></span><br><span class="line">    pt71 = <span class="keyword">new</span> BMap.Point(<span class="number">89.992964</span>, <span class="number">47.893363</span>);</span><br><span class="line">    pts.push(pt71);</span><br><span class="line">    pt72 = <span class="keyword">new</span> BMap.Point(<span class="number">87.969261</span>, <span class="number">49.115857</span>);</span><br><span class="line">    pts.push(pt72);</span><br><span class="line">    pt73 = <span class="keyword">new</span> BMap.Point(<span class="number">86.847026</span>, <span class="number">49.055436</span>);</span><br><span class="line">    pts.push(pt73);</span><br><span class="line">    pt74 = <span class="keyword">new</span> BMap.Point(<span class="number">85.724791</span>, <span class="number">48.201769</span>);</span><br><span class="line">    pts.push(pt74);</span><br><span class="line">    pt75 = <span class="keyword">new</span> BMap.Point(<span class="number">85.301653</span>, <span class="number">47.05766</span>);</span><br><span class="line">    pts.push(pt75);</span><br><span class="line">    pt76 = <span class="keyword">new</span> BMap.Point(<span class="number">83.167567</span>, <span class="number">47.23339</span>);</span><br><span class="line">    pts.push(pt76);</span><br><span class="line">    pt77 = <span class="keyword">new</span> BMap.Point(<span class="number">82.284497</span>, <span class="number">45.52739</span>);</span><br><span class="line">    pts.push(pt77);</span><br><span class="line">    pt78 = <span class="keyword">new</span> BMap.Point(<span class="number">82.652442</span>, <span class="number">45.177144</span>);</span><br><span class="line">    pts.push(pt78);</span><br><span class="line">    pt79 = <span class="keyword">new</span> BMap.Point(<span class="number">81.769372</span>, <span class="number">45.346053</span>);</span><br><span class="line">    pts.push(pt79);</span><br><span class="line">    pt80 = <span class="keyword">new</span> BMap.Point(<span class="number">79.911245</span>, <span class="number">44.890145</span>);</span><br><span class="line">    pts.push(pt80);</span><br><span class="line"></span><br><span class="line">    pt81 = <span class="keyword">new</span> BMap.Point(<span class="number">80.702329</span>, <span class="number">43.20505</span>);</span><br><span class="line">    pts.push(pt81);</span><br><span class="line">    pt82 = <span class="keyword">new</span> BMap.Point(<span class="number">80.003232</span>, <span class="number">42.077702</span>);</span><br><span class="line">    pts.push(pt82);</span><br><span class="line">    pt83 = <span class="keyword">new</span> BMap.Point(<span class="number">77.096459</span>, <span class="number">41.05527</span>);</span><br><span class="line">    pts.push(pt83);</span><br><span class="line">    pt84 = <span class="keyword">new</span> BMap.Point(<span class="number">76.158197</span>, <span class="number">40.369298</span>);</span><br><span class="line">    pts.push(pt84);</span><br><span class="line">    pt85 = <span class="keyword">new</span> BMap.Point(<span class="number">75.753456</span>, <span class="number">40.594072</span>);</span><br><span class="line">    pts.push(pt85);</span><br><span class="line">    pt86 = <span class="keyword">new</span> BMap.Point(<span class="number">74.925578</span>, <span class="number">40.48178</span>);</span><br><span class="line">    pts.push(pt86);</span><br><span class="line">    pt87 = <span class="keyword">new</span> BMap.Point(<span class="number">73.803343</span>, <span class="number">39.605094</span>);</span><br><span class="line">    pts.push(pt87);</span><br><span class="line">    pt88 = <span class="keyword">new</span> BMap.Point(<span class="number">73.637767</span>, <span class="number">39.291284</span>);</span><br><span class="line">    pts.push(pt88);</span><br><span class="line">    pt89 = <span class="keyword">new</span> BMap.Point(<span class="number">73.913726</span>, <span class="number">38.457149</span>);</span><br><span class="line">    pts.push(pt89);</span><br><span class="line">    pt90 = <span class="keyword">new</span> BMap.Point(<span class="number">74.612824</span>, <span class="number">38.500536</span>);</span><br><span class="line">    pts.push(pt90);</span><br><span class="line"></span><br><span class="line">    pt91 = <span class="keyword">new</span> BMap.Point(<span class="number">74.999167</span>, <span class="number">37.31988</span>);</span><br><span class="line">    pts.push(pt91);</span><br><span class="line">    pt92 = <span class="keyword">new</span> BMap.Point(<span class="number">77.924337</span>, <span class="number">35.325072</span>);</span><br><span class="line">    pts.push(pt92);</span><br><span class="line">    pt93 = <span class="keyword">new</span> BMap.Point(<span class="number">78.273886</span>, <span class="number">34.598061</span>);</span><br><span class="line">    pts.push(pt93);</span><br><span class="line">    pt94 = <span class="keyword">new</span> BMap.Point(<span class="number">79.101764</span>, <span class="number">34.293224</span>);</span><br><span class="line">    pts.push(pt94);</span><br><span class="line">    pt95 = <span class="keyword">new</span> BMap.Point(<span class="number">78.770613</span>, <span class="number">33.987267</span>);</span><br><span class="line">    pts.push(pt95);</span><br><span class="line">    pt96 = <span class="keyword">new</span> BMap.Point(<span class="number">79.230545</span>, <span class="number">32.472038</span>);</span><br><span class="line">    pts.push(pt96);</span><br><span class="line">    pt97 = <span class="keyword">new</span> BMap.Point(<span class="number">78.880997</span>, <span class="number">32.59672</span>);</span><br><span class="line">    pts.push(pt97);</span><br><span class="line">    pt98 = <span class="keyword">new</span> BMap.Point(<span class="number">78.421064</span>, <span class="number">32.425237</span>);</span><br><span class="line">    pts.push(pt98);</span><br><span class="line">    pt99 = <span class="keyword">new</span> BMap.Point(<span class="number">78.844202</span>, <span class="number">31.18404</span>);</span><br><span class="line">    pts.push(pt99);</span><br><span class="line">    pt100 = <span class="keyword">new</span> BMap.Point(<span class="number">81.180659</span>, <span class="number">29.990271</span>);</span><br><span class="line">    pts.push(pt100);</span><br><span class="line"></span><br><span class="line">    pt101 = <span class="keyword">new</span> BMap.Point(<span class="number">81.71418</span>, <span class="number">30.34198</span>);</span><br><span class="line">    pts.push(pt101);</span><br><span class="line">    pt102 = <span class="keyword">new</span> BMap.Point(<span class="number">86.092737</span>, <span class="number">27.935542</span>);</span><br><span class="line">    pts.push(pt102);</span><br><span class="line">    pt103 = <span class="keyword">new</span> BMap.Point(<span class="number">88.760345</span>, <span class="number">27.951881</span>);</span><br><span class="line">    pts.push(pt103);</span><br><span class="line">    pt104 = <span class="keyword">new</span> BMap.Point(<span class="number">88.99951</span>, <span class="number">27.197728</span>);</span><br><span class="line">    pts.push(pt104);</span><br><span class="line">    pt105 = <span class="keyword">new</span> BMap.Point(<span class="number">89.845786</span>, <span class="number">28.098817</span>);</span><br><span class="line">    pts.push(pt105);</span><br><span class="line">    pt106 = <span class="keyword">new</span> BMap.Point(<span class="number">91.538337</span>, <span class="number">27.772017</span>);</span><br><span class="line">    pts.push(pt106);</span><br><span class="line">    pt107 = <span class="keyword">new</span> BMap.Point(<span class="number">92.108653</span>, <span class="number">26.769165</span>);</span><br><span class="line">    pts.push(pt107);</span><br><span class="line">    pt108 = <span class="keyword">new</span> BMap.Point(<span class="number">93.893191</span>, <span class="number">26.851709</span>);</span><br><span class="line">    pts.push(pt108);</span><br><span class="line">    pt109 = <span class="keyword">new</span> BMap.Point(<span class="number">95.916893</span>, <span class="number">28.115131</span>);</span><br><span class="line">    pts.push(pt109);</span><br><span class="line">    pt110 = <span class="keyword">new</span> BMap.Point(<span class="number">97.223102</span>, <span class="number">27.690161</span>);</span><br><span class="line">    pts.push(pt110);</span><br><span class="line"></span><br><span class="line">    pt111 = <span class="keyword">new</span> BMap.Point(<span class="number">97.609445</span>, <span class="number">28.375809</span>);</span><br><span class="line">    pts.push(pt111);</span><br><span class="line">    pt112 = <span class="keyword">new</span> BMap.Point(<span class="number">98.363734</span>, <span class="number">27.427807</span>);</span><br><span class="line">    pts.push(pt112);</span><br><span class="line">    pt113 = <span class="keyword">new</span> BMap.Point(<span class="number">98.73168</span>, <span class="number">26.653501</span>);</span><br><span class="line">    pts.push(pt113);</span><br><span class="line">    pt114 = <span class="keyword">new</span> BMap.Point(<span class="number">97.646239</span>, <span class="number">24.702995</span>);</span><br><span class="line">    pts.push(pt114);</span><br><span class="line">    pt115 = <span class="keyword">new</span> BMap.Point(<span class="number">97.627842</span>, <span class="number">23.842845</span>);</span><br><span class="line">    pts.push(pt115);</span><br><span class="line">    pt116 = <span class="keyword">new</span> BMap.Point(<span class="number">98.658091</span>, <span class="number">23.944344</span>);</span><br><span class="line">    pts.push(pt116);</span><br><span class="line">    pt117 = <span class="keyword">new</span> BMap.Point(<span class="number">98.970845</span>, <span class="number">23.045009</span>);</span><br><span class="line">    pts.push(pt117);</span><br><span class="line">    pt118 = <span class="keyword">new</span> BMap.Point(<span class="number">99.449174</span>, <span class="number">22.89168</span>);</span><br><span class="line">    pts.push(pt118);</span><br><span class="line">    pt119 = <span class="keyword">new</span> BMap.Point(<span class="number">99.21001</span>, <span class="number">21.96805</span>);</span><br><span class="line">    pts.push(pt119);</span><br><span class="line">    pt120 = <span class="keyword">new</span> BMap.Point(<span class="number">99.982696</span>, <span class="number">21.933723</span>);</span><br><span class="line">    pts.push(pt120);</span><br><span class="line"></span><br><span class="line">    pt121 = <span class="keyword">new</span> BMap.Point(<span class="number">100.166669</span>, <span class="number">21.366121</span>);</span><br><span class="line">    pts.push(pt121);</span><br><span class="line">    pt122 = <span class="keyword">new</span> BMap.Point(<span class="number">101.086534</span>, <span class="number">21.589991</span>);</span><br><span class="line">    pts.push(pt122);</span><br><span class="line">    pt123 = <span class="keyword">new</span> BMap.Point(<span class="number">101.730439</span>, <span class="number">21.055576</span>);</span><br><span class="line">    pts.push(pt123);</span><br><span class="line">    pt124 = <span class="keyword">new</span> BMap.Point(<span class="number">101.969604</span>, <span class="number">21.31441</span>);</span><br><span class="line">    pts.push(pt124);</span><br><span class="line">    pt125 = <span class="keyword">new</span> BMap.Point(<span class="number">101.804028</span>, <span class="number">22.190972</span>);</span><br><span class="line">    pts.push(pt125);</span><br><span class="line">    pt126 = <span class="keyword">new</span> BMap.Point(<span class="number">102.53992</span>, <span class="number">22.53323</span>);</span><br><span class="line">    pts.push(pt126);</span><br><span class="line">    pt127 = <span class="keyword">new</span> BMap.Point(<span class="number">103.956512</span>, <span class="number">22.447745</span>);</span><br><span class="line">    pts.push(pt127);</span><br><span class="line">    pt128 = <span class="keyword">new</span> BMap.Point(<span class="number">105.465091</span>, <span class="number">23.130116</span>);</span><br><span class="line">    pts.push(pt128);</span><br><span class="line">    pt129 = <span class="keyword">new</span> BMap.Point(<span class="number">107.819945</span>, <span class="number">21.435041</span>);</span><br><span class="line">    pts.push(pt129);</span><br><span class="line">    pt130 = <span class="keyword">new</span> BMap.Point(<span class="number">108.408658</span>, <span class="number">20.588528</span>);</span><br><span class="line">    pts.push(pt130);</span><br><span class="line"></span><br><span class="line">    pt131 = <span class="keyword">new</span> BMap.Point(<span class="number">108.243082</span>, <span class="number">17.791978</span>);</span><br><span class="line">    pts.push(pt131);</span><br><span class="line">    pt132 = <span class="keyword">new</span> BMap.Point(<span class="number">110.101209</span>, <span class="number">14.556493</span>);</span><br><span class="line">    pts.push(pt132);</span><br><span class="line">    pt133 = <span class="keyword">new</span> BMap.Point(<span class="number">109.82525</span>, <span class="number">10.162358</span>);</span><br><span class="line">    pts.push(pt133);</span><br><span class="line">    pt134 = <span class="keyword">new</span> BMap.Point(<span class="number">108.151096</span>, <span class="number">6.074665</span>);</span><br><span class="line">    pts.push(pt134);</span><br><span class="line">    pt135 = <span class="keyword">new</span> BMap.Point(<span class="number">109.604482</span>, <span class="number">3.416913</span>);</span><br><span class="line">    pts.push(pt135);</span><br><span class="line">    pt136 = <span class="keyword">new</span> BMap.Point(<span class="number">113.136763</span>, <span class="number">3.712694</span>);</span><br><span class="line">    pts.push(pt136);</span><br><span class="line">    pt137 = <span class="keyword">new</span> BMap.Point(<span class="number">115.362836</span>, <span class="number">6.737258</span>);</span><br><span class="line">    pts.push(pt137);</span><br><span class="line">    pt138 = <span class="keyword">new</span> BMap.Point(<span class="number">117.404936</span>, <span class="number">9.505473</span>);</span><br><span class="line">    pts.push(pt138);</span><br><span class="line">    pt139 = <span class="keyword">new</span> BMap.Point(<span class="number">119.318255</span>, <span class="number">14.574413</span>);</span><br><span class="line">    pts.push(pt139);</span><br><span class="line">    pt140 = <span class="keyword">new</span> BMap.Point(<span class="number">120.164531</span>, <span class="number">19.12633</span>);</span><br><span class="line">    pts.push(pt140);</span><br><span class="line"></span><br><span class="line">    pt141 = <span class="keyword">new</span> BMap.Point(<span class="number">122.059452</span>, <span class="number">21.693198</span>);</span><br><span class="line">    pts.push(pt141);</span><br><span class="line">    pt142 = <span class="keyword">new</span> BMap.Point(<span class="number">122.813741</span>, <span class="number">24.686186</span>);</span><br><span class="line">    pts.push(pt142);</span><br><span class="line">    pt143 = <span class="keyword">new</span> BMap.Point(<span class="number">124.230333</span>, <span class="number">28.457139</span>);</span><br><span class="line">    pts.push(pt143);</span><br><span class="line">    pt144 = <span class="keyword">new</span> BMap.Point(<span class="number">124.855841</span>, <span class="number">32.721228</span>);</span><br><span class="line">    pts.push(pt144);</span><br><span class="line">    pt145 = <span class="keyword">new</span> BMap.Point(<span class="number">124.230333</span>, <span class="number">36.56674</span>);</span><br><span class="line">    pts.push(pt145);</span><br><span class="line">    pt146 = <span class="keyword">new</span> BMap.Point(<span class="number">124.487895</span>, <span class="number">39.59086</span>);</span><br><span class="line">    pts.push(pt146);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> folium</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> shapely.geometry <span class="keyword">import</span> Point</span><br><span class="line"><span class="keyword">from</span> shapely.geometry.polygon <span class="keyword">import</span> Polygon</span><br><span class="line"><span class="keyword">from</span> folium.plugins <span class="keyword">import</span> HeatMap</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Geo</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> GeoType</span><br><span class="line"><span class="keyword">import</span> pyecharts</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">pyecharts.<span class="built_in">globals</span>.CurrentConfig.ONLINE_HOST = <span class="string">&quot;./js/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>():</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:UserAgent().random</span><br><span class="line">        &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://xingyun.map.qq.com/api/getXingyunPoints&#x27;</span></span><br><span class="line">    all_data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">        payload = &#123;<span class="string">&#x27;count&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;rank&#x27;</span>:i&#125;</span><br><span class="line">        response = requests.post(url = url,headers = headers,data=json.dumps(payload))</span><br><span class="line">        datas = response.json()[<span class="string">&#x27;locs&#x27;</span>]</span><br><span class="line">        datas = datas.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        datas = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> datas[:-<span class="number">1</span>]]</span><br><span class="line">        a = []</span><br><span class="line">        <span class="keyword">for</span> n,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(datas):</span><br><span class="line">            a.append(data)</span><br><span class="line">            <span class="keyword">if</span> (n + <span class="number">1</span>) % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">                all_data.append(a)</span><br><span class="line">                a = []</span><br><span class="line">    all_data = [[i[<span class="number">0</span>] / <span class="number">100</span>,i[<span class="number">1</span>] / <span class="number">100</span>,i[<span class="number">2</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> all_data]</span><br><span class="line">    <span class="keyword">return</span> all_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        startTime = time.time()</span><br><span class="line">        res = func(*args,**kwargs)</span><br><span class="line">        endTime = time.time()</span><br><span class="line">        msecs = (endTime - startTime)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;s&quot;</span>.<span class="built_in">format</span>(msecs))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_list</span>(<span class="params">data</span>):</span></span><br><span class="line">    lat,lng,weight = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> data],[i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> data],[i[<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> data]</span><br><span class="line">    dataframe = pd.DataFrame(&#123;<span class="string">&#x27;纬度&#x27;</span>:lat,<span class="string">&#x27;经度&#x27;</span>:lng,<span class="string">&#x27;人数&#x27;</span>:weight&#125;)</span><br><span class="line">    dataframe.drop_duplicates(keep = <span class="string">&#x27;first&#x27;</span>,inplace = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> dataframe[[<span class="string">&#x27;纬度&#x27;</span>,<span class="string">&#x27;经度&#x27;</span>,<span class="string">&#x27;人数&#x27;</span>]].values.tolist()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_fence</span>():</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;china_axis.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    data = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;Point\((.*?)\)&#x27;</span>)</span><br><span class="line">    polyline = re.findall(pattern,data)</span><br><span class="line">    buffer = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> polyline:</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            lng, lat = line.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            buffer.append([<span class="built_in">float</span>(lng), <span class="built_in">float</span>(lat)])</span><br><span class="line">    buffer = np.array(buffer)</span><br><span class="line">    <span class="keyword">return</span> buffer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_geo</span>(<span class="params">all_data</span>):</span></span><br><span class="line">    city = <span class="string">&#x27;china&#x27;</span></span><br><span class="line">    figure = Geo()</span><br><span class="line">    figure.add_schema(maptype=city,is_roam=<span class="literal">False</span>)</span><br><span class="line">    lat,lng,weight = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> all_data],[i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> all_data],[i[<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> all_data]</span><br><span class="line">    data_pair = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lat)):</span><br><span class="line">        figure.add_coordinate(<span class="string">&#x27;坐标&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(lng[i],lat[i]), lng[i], lat[i])</span><br><span class="line">        data_pair.append((<span class="string">&#x27;坐标&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(lng[i],lat[i]),weight[i]))</span><br><span class="line"></span><br><span class="line">    figure.add(<span class="string">&#x27;&#x27;</span>, data_pair, type_=<span class="string">&#x27;scatter&#x27;</span>, symbol_size=<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#figure.add(&#x27;&#x27;, data_pair, type_=GeoType.EFFECT_SCATTER, symbol_size=1)</span></span><br><span class="line">    figure.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">    pieces = [</span><br><span class="line">        &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#B0C4DE&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;2-10&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#1E90FF&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;11-20&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#00BFFF&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">21</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">30</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;21-30&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#87CEEB&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">31</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;31-50&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#87CEFA&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">51</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;51-100&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#1E90FF&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">101</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;101-200&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#00FFFF&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">201</span>, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;200以上&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#191970&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    figure.set_global_opts(</span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(is_piecewise=<span class="literal">True</span>, pieces=pieces),</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&quot;坐标散点图&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> figure</span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    datas = get_data()</span><br><span class="line">    datas = clear_list(datas)</span><br><span class="line">    random.shuffle(datas)</span><br><span class="line">    all_data = []</span><br><span class="line">    fence = load_fence()</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(all_data) &lt; <span class="number">100000</span>:</span><br><span class="line">        data = datas[i]</span><br><span class="line">        point = Point(data[<span class="number">1</span>],data[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> Polygon(fence).contains(point) == <span class="literal">True</span>:</span><br><span class="line">            all_data.append(data)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    figure = plot_geo(all_data)</span><br><span class="line">    figure.render(<span class="string">&#x27;星云.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/weixin_30629977/article/details/99020151" title="判断一个地图坐标是否在中国境内">判断一个地图坐标是否在中国境内</a></p><hr><p><a href="https://blog.csdn.net/weixin_41666051/article/details/83245993" title="Pyecharts 根据经纬度和量值的大小，画出散点图">Pyecharts 根据经纬度和量值的大小，画出散点图</a></p><hr><p><a href="https://blog.csdn.net/zzu_w/article/details/108094469" title="给出经纬度，判断是否在指定区域">给出经纬度，判断是否在指定区域</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓取高途课堂课程和教师信息</title>
      <link href="/2021/01/11/%E6%8A%93%E5%8F%96%E9%AB%98%E9%80%94%E8%AF%BE%E5%A0%82%E8%AF%BE%E7%A8%8B%E5%92%8C%E6%95%99%E5%B8%88%E4%BF%A1%E6%81%AF/"/>
      <url>/2021/01/11/%E6%8A%93%E5%8F%96%E9%AB%98%E9%80%94%E8%AF%BE%E5%A0%82%E8%AF%BE%E7%A8%8B%E5%92%8C%E6%95%99%E5%B8%88%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>笔者偶尔参加了高途课堂的辅导老师面试，当时也没做什么准备，被HR问懵逼了，对公司也没做什么了解，自己的职业规划也不清楚，过去的经历一问也三不知，临走还把自己简历要了回去，以前我绝对是不敢厚着脸皮做这种事情的，只能说入职半年有进步。我更像是去闹着玩的，实际上我就是闲的了，我一开始就知道自己不适合做这种有销售性质的工作，太久不参加面试想练练手，给我投递橄榄枝的这位HR就成了我的“工具人”，如果HR本R读到这篇文章，且让我给您道个歉，顺便说一句，对于您问我“工作环境是什么”这件事我颇有微词。这篇文章就让我尝试了解一下高途课堂吧，抓一下他们的课程和教师信息。</p><h2 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h2><p>我觉得没有必要写面向对象，找到接口发起请求然后清洗数据就是了，一般来说，这种学不到新知识的代码是不记录的，我唯一学到的新知识点是修改workbook中sheet名称，2333.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#网页请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#操作Excel</span></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="comment">#获取请求头</span></span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="comment">#进度条相关</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="comment">#生成随机请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:UserAgent().random</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#通过该api获取所有年级</span></span><br><span class="line">url = <span class="string">&#x27;https://api.gaotu100.com/course/v7/pc/filter&#x27;</span></span><br><span class="line"><span class="comment">#通过该api获取对应年级下的课程</span></span><br><span class="line">class_url = <span class="string">&#x27;https://api.gaotu100.com/course/v7/list&#x27;</span></span><br><span class="line"><span class="comment">#初始化工作表</span></span><br><span class="line">wb = openpyxl.Workbook()</span><br><span class="line"><span class="comment">#默认sheet</span></span><br><span class="line">ws_class = wb.active</span><br><span class="line"><span class="comment">#修改sheet名</span></span><br><span class="line">ws_class.title = <span class="string">&#x27;课程信息&#x27;</span></span><br><span class="line"><span class="comment">#创建新的sheet</span></span><br><span class="line">ws_teacher = wb.create_sheet(<span class="string">&#x27;教师信息&#x27;</span>)</span><br><span class="line"><span class="comment">#为教师信息添加索引</span></span><br><span class="line">ws_teacher.append([<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;类别&#x27;</span>,<span class="string">&#x27;标签&#x27;</span>,<span class="string">&#x27;介绍&#x27;</span>,<span class="string">&#x27;照片&#x27;</span>])</span><br><span class="line"><span class="comment">#为课程信息添加索引</span></span><br><span class="line">index = [<span class="string">&#x27;年级&#x27;</span>,<span class="string">&#x27;课程描述&#x27;</span>,<span class="string">&#x27;课程类别&#x27;</span>,<span class="string">&#x27;授课时间&#x27;</span>,<span class="string">&#x27;教师&#x27;</span>,<span class="string">&#x27;课时&#x27;</span>,<span class="string">&#x27;课程价格&#x27;</span>,<span class="string">&#x27;课程季节&#x27;</span>,<span class="string">&#x27;售后服务&#x27;</span>]</span><br><span class="line">ws_class.append(index)</span><br><span class="line"><span class="comment">#访问课程信息的参数，pagesize为获取的最大条目数量，往大了写</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;subject&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;pagesize&#x27;</span>:<span class="string">&#x27;100&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#创建一个空列表存储已保存信息的教师名称，防止重复</span></span><br><span class="line"><span class="comment">#这种方式我觉得很low，但是openpyxl似乎没有去重模块</span></span><br><span class="line"><span class="comment">#调用pandas的话则比现在更加麻烦</span></span><br><span class="line">teacher_names = []</span><br><span class="line"><span class="comment">#访问接口获取全部年级</span></span><br><span class="line">res = requests.get(url=url,headers=headers)</span><br><span class="line"><span class="comment">#将response转换为json字典</span></span><br><span class="line">data = res.json()</span><br><span class="line"><span class="comment">#清洗出年级信息，这是一个纯数字的列表</span></span><br><span class="line">grade_lists = [i[<span class="string">&#x27;grade_index&#x27;</span>] <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">&#x27;full_grade_list&#x27;</span>]]</span><br><span class="line"><span class="comment">#调用进度条，开始逐年级获取数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(grade_lists)),desc=<span class="string">&#x27;正在下载:&#x27;</span>,ncols = <span class="number">80</span>):</span><br><span class="line">    <span class="comment">#补充参数</span></span><br><span class="line">    params[<span class="string">&#x27;grade&#x27;</span>] = grade_lists[i]</span><br><span class="line">    <span class="comment">#访问课程api</span></span><br><span class="line">    res = requests.get(url=class_url,headers = headers,params = params)</span><br><span class="line">    <span class="comment">#获取课程列表</span></span><br><span class="line">    class_lists = res.json()[<span class="string">&#x27;courses&#x27;</span>]</span><br><span class="line">    <span class="comment">#分析每一门课</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> class_lists:</span><br><span class="line">        <span class="comment">#教师信息</span></span><br><span class="line">        teachers = item[<span class="string">&#x27;lecturer_teacher_list&#x27;</span>]</span><br><span class="line">        <span class="comment">#获取该课程下的所有教师信息</span></span><br><span class="line">        <span class="keyword">for</span> teacher <span class="keyword">in</span> teachers:</span><br><span class="line">            <span class="comment">#教师名字</span></span><br><span class="line">            name = teacher[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">            <span class="comment">#如果不在已保存列表才进行保存</span></span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> teacher_names:</span><br><span class="line">                <span class="comment">#类别</span></span><br><span class="line">                teacher_role = teacher[<span class="string">&#x27;teacher_role&#x27;</span>]</span><br><span class="line">                <span class="comment">#标签</span></span><br><span class="line">                teacher_tag = <span class="string">&#x27;无&#x27;</span> <span class="keyword">if</span> <span class="built_in">len</span>(teacher[<span class="string">&#x27;tag_list&#x27;</span>]) == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;,&#x27;</span>.join(teacher[<span class="string">&#x27;tag_list&#x27;</span>])</span><br><span class="line">                <span class="comment">#介绍</span></span><br><span class="line">                teacher_desc = teacher[<span class="string">&#x27;teacher_desc&#x27;</span>]</span><br><span class="line">                <span class="comment">#照片</span></span><br><span class="line">                teacher_picture = teacher[<span class="string">&#x27;teacher_picture&#x27;</span>]</span><br><span class="line">                <span class="comment">#为工作表添加一行数据</span></span><br><span class="line">                ws_teacher.append([name,teacher_role,teacher_tag,teacher_desc,teacher_picture])</span><br><span class="line">                <span class="comment">#添加到已保存列表</span></span><br><span class="line">                teacher_names.append(name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">#否则无视该信息</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="comment">#年级</span></span><br><span class="line">        grade_name = item[<span class="string">&#x27;grade_name&#x27;</span>]</span><br><span class="line">        <span class="comment">#授课时间（请无视该变量名。。）</span></span><br><span class="line">        introduction = item[<span class="string">&#x27;introduction&#x27;</span>]</span><br><span class="line">        <span class="comment">#课时</span></span><br><span class="line">        lecture_desc = item[<span class="string">&#x27;lecture_desc&#x27;</span>]</span><br><span class="line">        <span class="comment">#课程价格</span></span><br><span class="line">        price = <span class="string">&#x27;免费&#x27;</span> <span class="keyword">if</span> item[<span class="string">&#x27;price&#x27;</span>] == <span class="number">0</span> <span class="keyword">else</span> item[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line">        <span class="comment">#授课老师</span></span><br><span class="line">        teacher_name = <span class="string">&#x27;,&#x27;</span>.join(item[<span class="string">&#x27;teacher_name_list&#x27;</span>])</span><br><span class="line">        <span class="comment">#售后服务</span></span><br><span class="line">        tip_list = <span class="string">&#x27;,&#x27;</span>.join(item[<span class="string">&#x27;tip_list&#x27;</span>])</span><br><span class="line">        <span class="comment">#开课季节</span></span><br><span class="line">        season = item[<span class="string">&#x27;season&#x27;</span>]</span><br><span class="line">        <span class="comment">#课程描述</span></span><br><span class="line">        title = item[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        <span class="comment">#课程类别</span></span><br><span class="line">        subject_full_name = item[<span class="string">&#x27;subject_full_name&#x27;</span>]</span><br><span class="line">        <span class="comment">#课程信息添加一行数据</span></span><br><span class="line">        ws_class.append([grade_name,title,subject_full_name,introduction,teacher_name,lecture_desc,price,season,tip_list])</span><br><span class="line"><span class="comment">#保存工作表</span></span><br><span class="line">wb.save(<span class="string">&#x27;gaotu.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>抓取完成后大致分析了一下，他们每节课一个半小时，差不多120块，贵一点的辅导班要2000靠上（难怪现在养孩子花销大，教育内卷真的太严重了）。其他的，我想了半天也想不到做这个还有什么意义，或许我可以仿照他们的官网做个网站出来？可是我的Django学的实在是太烂。至于把他们的课程抓取下来去卖盗版。。emm，这种事情还是不要做了。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解python中的参数（*和**的使用）</title>
      <link href="/2021/01/11/%E7%90%86%E8%A7%A3python%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%88_%E5%92%8C__%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%89/"/>
      <url>/2021/01/11/%E7%90%86%E8%A7%A3python%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%88_%E5%92%8C__%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在向函数传递参数时，有时候会看到<code>*args</code>和<code>**kwargs</code>的字样，本文尝试理解个中含义。</p><h2 id="使用args"><a href="#使用args" class="headerlink" title="使用args"></a>使用args</h2><p>将参数转换为元组形式保存到arg中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="使用kwargs"><a href="#使用kwargs" class="headerlink" title="使用kwargs"></a>使用kwargs</h2><p>将参数转换为字典形式（必须指定参数进行传递）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo(a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>注意，这里在函数内部直接调用a或者b会报错，要用键值对的方式从kwargs中调用</p><h2 id="二者同时使用"><a href="#二者同时使用" class="headerlink" title="二者同时使用"></a>二者同时使用</h2><p>将未指定名称的参数转换为元组，将指定了名称的转换为字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,b=<span class="number">3</span>,d=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="与普通参数混合"><a href="#与普通参数混合" class="headerlink" title="与普通参数混合"></a>与普通参数混合</h2><p>先按顺序接收指定的参数，剩余的参数交给args和kwargs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">a,*args,**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,b=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>,)</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>以下使用是不合法的，<code>*args</code>之前的参数不应当使用参数名声明，之后的必须使用参数名声明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">a,b,*args,**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">3</span>,b=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>另外，可以使用字典向函数传递参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">*args,a,b,z=<span class="literal">None</span>,**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    my_foo = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>&#125;</span><br><span class="line">    foo(**my_foo)</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">()</span><br><span class="line">&#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python继承父类的属性</title>
      <link href="/2021/01/11/Python%E7%BB%A7%E6%89%BF%E7%88%B6%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
      <url>/2021/01/11/Python%E7%BB%A7%E6%89%BF%E7%88%B6%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>有时候新类需要继承父类的属性，但是又要定义一些自己的属性，可以通过以下方法来实现。</p><h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h2><p>这种方法即不重写新类的init方法，完全继承父类，缺点是无法初始化新的属性，只能执行函数添加属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;test1&#x27;</span></span><br><span class="line">        self.number = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span>(<span class="params">Test1</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h2><p>同样完全继承了父类的属性，而且可以重写某个字段，或者拓展新的属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;test1&#x27;</span></span><br><span class="line">        self.number = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span>(<span class="params">Test1</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__() <span class="comment">#也可以写成super(Test2,self).__init__()</span></span><br><span class="line">        self.name = <span class="string">&#x27;test2&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python装饰器探幽</title>
      <link href="/2021/01/09/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E6%8E%A2%E5%B9%BD/"/>
      <url>/2021/01/09/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E6%8E%A2%E5%B9%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>python装饰器就是用于拓展原来函数功能的一种函数，这个函数的特殊之处在于它的返回值也是一个函数，使用python装饰器的好处就是在不用更改原函数的代码前提下给函数增加新的功能。</p><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><p>如果要测试一个函数执行花费的时间，一般会采用如下方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    startTime = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">endTime = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;ms&quot;</span>.<span class="built_in">format</span>((startTime - endTime) * <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>可是如果函数已经高度集成，或者需要测试的函数很多的情况下，逐个修改会很麻烦，此时可以使用装饰器拓展函数功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">    startTime = time.time()</span><br><span class="line">    func(*args,**kwargs)</span><br><span class="line">    endTime = time.time()</span><br><span class="line">    msecs = (endTime - startTime) * <span class="number">1000</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;ms&quot;</span>.<span class="built_in">format</span>(msecs))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    f = func</span><br><span class="line">    deco(f)</span><br></pre></td></tr></table></figure><p>原理是函数也是python中的对象，可以作为参数传递给其他函数，也可以当作返回值。</p><hr><p>将函数逐个传递给装饰器也不太现实，可以选择更方便的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment">#wrapper的参数也可以与func的参数保持一致，但会导致装饰器失去泛用性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        startTime = time.time()</span><br><span class="line">        <span class="comment">#参数要与包裹函数（wrapper）的参数保持一致</span></span><br><span class="line">        func(*args,**kwargs)</span><br><span class="line">        endTime = time.time()</span><br><span class="line">        msecs = (endTime - startTime) * <span class="number">1000</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;ms&quot;</span>.<span class="built_in">format</span>(msecs))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用装饰器</span></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#执行</span></span><br><span class="line">    func(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>多装饰器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco01</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is deco01&quot;</span>)</span><br><span class="line">        startTime = time.time()</span><br><span class="line">        func(*args,**kwargs)</span><br><span class="line">        endTime = time.time()</span><br><span class="line">        msecs = (endTime - startTime) * <span class="number">1000</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;ms&quot;</span>.<span class="built_in">format</span>(msecs))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;deco01 end&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco02</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is deco02&quot;</span>)</span><br><span class="line">        func(*args,**kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;deco02 end&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco02</span></span><br><span class="line"><span class="meta">@deco01</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    func(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>这里多装饰器的执行顺序类似于deco02(deco01(func))，deco02中func前的部分-&gt;deco01中func之前的部分-&gt;真正的func函数-&gt;deco01中func之后的部分-&gt;deco02中func之后的部分，绕两圈应该就明白了！一切皆是对象！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓取B站评论并可视化</title>
      <link href="/2021/01/06/%E6%8A%93%E5%8F%96B%E7%AB%99%E8%AF%84%E8%AE%BA%E5%B9%B6%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2021/01/06/%E6%8A%93%E5%8F%96B%E7%AB%99%E8%AF%84%E8%AE%BA%E5%B9%B6%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近一位很火的央视美女主持，没错，说的就是王冰冰，入驻B站啦，她在2020年的最后一天发布了一条vlog，疯狂涨粉200w，成功跻身2020百大up，那么B站的网友们在评论区说了什么呢？让我们一起来看看吧！</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>B站评论接口如下：</p><hr><p><a href="https://api.bilibili.com/x/v2/reply">https://api.bilibili.com/x/v2/reply</a></p><hr><p>参数有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#固定值，可省略</span></span><br><span class="line"><span class="string">&#x27;jsonp&#x27;</span>:<span class="string">&#x27;jsonp&#x27;</span></span><br><span class="line"><span class="comment">#固定值，不可缺省</span></span><br><span class="line"><span class="string">&#x27;type&#x27;</span>:<span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="comment">#评论页数</span></span><br><span class="line"><span class="string">&quot;pn&quot;</span>:<span class="number">1</span></span><br><span class="line"><span class="comment">#排序方式，2代表从旧到新，1代表从新到旧，默认为1</span></span><br><span class="line"><span class="string">&#x27;sort&#x27;</span>:<span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="comment">#视频的av号，可以通过开发者工具获取</span></span><br><span class="line"><span class="string">&#x27;oid&#x27;</span>:<span class="string">&quot;800760067&quot;</span></span><br><span class="line"><span class="comment">#毫秒级时间戳，可省略</span></span><br><span class="line"><span class="string">&#x27;_&#x27;</span>:<span class="string">&quot;1609912833995&quot;</span></span><br></pre></td></tr></table></figure><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><p>用到的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#网页请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#获取时间戳</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#连接到MongoDB</span></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="comment">#操作excel</span></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="comment">#进度条</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="comment">#处理数据</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#结巴分词</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="comment">#词云</span></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="comment">#统计词频</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> _flatten</span><br><span class="line"><span class="comment">#默认停用词</span></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> STOPWORDS</span><br><span class="line"><span class="comment">#加载词云背景图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>Bilibili类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改oid可以抓取不同视频的评论</span></span><br><span class="line">oid = <span class="string">&#x27;800760067&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bilibili</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="comment">#初始化，从外部获取oid和想要抓取的总页数（从第一页开始算起）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,oid,pn</span>):</span></span><br><span class="line"><span class="comment">#评论接口</span></span><br><span class="line">        self.url = <span class="string">&#x27;https://api.bilibili.com/x/v2/reply&#x27;</span></span><br><span class="line"><span class="comment">#参数，评论排序方式为从旧到新</span></span><br><span class="line">        self.params = &#123;</span><br><span class="line">                <span class="string">&#x27;jsonp&#x27;</span>:<span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;type&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;sort&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;oid&#x27;</span>:oid,</span><br><span class="line">                <span class="string">&#x27;_&#x27;</span>:self.get_curl(),</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">#请求头</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">             <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">#要抓取的总页数</span></span><br><span class="line">        self.pn = pn</span><br><span class="line"><span class="comment">#连接到MongoDB，改成自己的用户名和密码</span></span><br><span class="line">        self.client = pymongo.MongoClient(<span class="string">&quot;mongodb://username:pwd@localhost:27017&quot;</span>)</span><br><span class="line"><span class="comment">#指定数据库，不存在则自动创建</span></span><br><span class="line">        self.db = self.client.bilibili</span><br><span class="line"><span class="comment">#指定表，不存在则自定创建</span></span><br><span class="line">        self.collection = self.db.comment</span><br><span class="line"><span class="comment">#初始化excel工作表</span></span><br><span class="line">        self.wb = openpyxl.Workbook()</span><br><span class="line"><span class="comment">#创建一个默认sheet</span></span><br><span class="line">        self.ws = self.wb.active</span><br><span class="line"><span class="comment">#创建一个文本文件</span></span><br><span class="line">        self.file = <span class="built_in">open</span>(<span class="string">&#x27;bilibili.txt&#x27;</span>,<span class="string">&#x27;wt&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取毫秒级时间戳</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_curl</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#python内置装饰器，将类中函数装饰为属性</span></span><br><span class="line"><span class="meta">    @property </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_comment</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment">#为excel表格添加索引</span></span><br><span class="line">        self.ws.append([<span class="string">&#x27;用户&#x27;</span>,<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;评论&#x27;</span>,<span class="string">&#x27;等级&#x27;</span>,<span class="string">&#x27;点赞&#x27;</span>])</span><br><span class="line"><span class="comment">#循环抓取并启用进度条</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>,self.pn + <span class="number">1</span>),desc = <span class="string">&#x27;正在下载...&#x27;</span>,ncols = <span class="number">80</span>):</span><br><span class="line"><span class="comment">#更新参数</span></span><br><span class="line">            self.params[<span class="string">&#x27;pn&#x27;</span>] = i</span><br><span class="line"><span class="comment">#有时候会出现某一页无响应，捕捉一下异常</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#发起get请求，将超时时间设置为5s，超时则会引发异常进入except</span></span><br><span class="line">                res = requests.get(url = self.url,headers = self.headers,params = self.params,timeout = <span class="number">5</span>)</span><br><span class="line"><span class="comment">#将response转换为json格式并获取当前页所有评论</span></span><br><span class="line">                self.comments = res.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;replies&#x27;</span>]</span><br><span class="line"><span class="comment">#逐条分析</span></span><br><span class="line">                <span class="keyword">for</span> comment <span class="keyword">in</span> self.comments:</span><br><span class="line"><span class="comment">#发表评论的用户名</span></span><br><span class="line">                    username = comment[<span class="string">&#x27;member&#x27;</span>][<span class="string">&#x27;uname&#x27;</span>]</span><br><span class="line"><span class="comment">#用户性别</span></span><br><span class="line">                    sex = comment[<span class="string">&#x27;member&#x27;</span>][<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line"><span class="comment">#评论内容</span></span><br><span class="line">                    content = comment[<span class="string">&#x27;content&#x27;</span>][<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line"><span class="comment">#用户等级</span></span><br><span class="line">                    level = comment[<span class="string">&#x27;member&#x27;</span>][<span class="string">&#x27;level_info&#x27;</span>][<span class="string">&#x27;current_level&#x27;</span>]</span><br><span class="line"><span class="comment">#点赞数量</span></span><br><span class="line">                    like = comment[<span class="string">&#x27;like&#x27;</span>]</span><br><span class="line"><span class="comment">#封装为字典</span></span><br><span class="line">                    reply = &#123;<span class="string">&quot;用户&quot;</span>:username,<span class="string">&quot;性别&quot;</span>:sex,<span class="string">&quot;评论&quot;</span>:content,<span class="string">&quot;等级&quot;</span>:level,<span class="string">&quot;点赞&quot;</span>:like&#125;</span><br><span class="line"><span class="comment">#向MongoDB中插入一条数据</span></span><br><span class="line">                    self.collection.insert_one(reply)</span><br><span class="line"><span class="comment">#向excel表格中插入一条数据</span></span><br><span class="line">                    self.ws.append([username,sex,content,level,like])</span><br><span class="line"><span class="comment">#将评论内容写入txt文件</span></span><br><span class="line">                    self.file.write(content + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">#暂停2s</span></span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#遇到异常的话无视，继续下一页</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#将类中函数装饰为属性</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment">#调用前述方法获取评论</span></span><br><span class="line">        self.get_comment</span><br><span class="line"><span class="comment">#保存excel表</span></span><br><span class="line">        self.wb.save(<span class="string">&#x27;bilibili.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment">#关闭文本文件</span></span><br><span class="line">        self.file.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写一个内容类用于制作词云</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Word_Cloud</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment">#从excel中读取数据</span></span><br><span class="line">            self.data = pd.read_excel(<span class="string">&#x27;bilibili.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment">#自定义停用词</span></span><br><span class="line">            self.words = [<span class="string">&#x27;量&#x27;</span>, <span class="string">&#x27;…&#x27;</span>, <span class="string">&#x27;还&#x27;</span>, <span class="string">&#x27;🍑&#x27;</span>,<span class="string">&#x27;\u3000&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;🧊&#x27;</span>,<span class="string">&#x27;▓&#x27;</span>,<span class="string">&#x27;\xa0&#x27;</span>,<span class="string">&quot;啊&quot;</span>,<span class="string">&quot;这&quot;</span>,<span class="string">&#x27;･&#x27;</span>,<span class="string">&quot;就&quot;</span>,<span class="string">&quot;在&quot;</span>,<span class="string">&quot;站&quot;</span>,<span class="string">&quot;你&quot;</span>,<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;的&#x27;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;？&#x27;</span>,<span class="string">&#x27;！&#x27;</span>,<span class="string">&#x27;那&#x27;</span>,<span class="string">&#x27;都&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;吧&#x27;</span>,<span class="string">&#x27;个&#x27;</span>,<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;和&#x27;</span>,<span class="string">&#x27;有&#x27;</span>,<span class="string">&#x27;呢&#x27;</span>,<span class="string">&#x27;号&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;（&#x27;</span>,<span class="string">&#x27;）&#x27;</span>,<span class="string">&#x27;doge&#x27;</span>,<span class="string">&#x27;；&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;。&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;，&#x27;</span>,<span class="string">&#x27;：&#x27;</span>,<span class="string">&#x27;!&#x27;</span>,<span class="string">&#x27;https&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;“&#x27;</span>,<span class="string">&#x27;”&#x27;</span>,<span class="string">&#x27;了&#x27;</span>,]</span><br><span class="line"><span class="comment">#词云背景图</span></span><br><span class="line">            self.img=<span class="string">&quot;1.jpeg&quot;</span></span><br><span class="line"><span class="comment">#将默认停用词与自定义停用词合并（python的列表居然可以直接加！）</span></span><br><span class="line">            self.stopWords = <span class="built_in">list</span>(STOPWORDS) + self.words</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#装饰为属性</span></span><br><span class="line"><span class="meta">        @property</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">word_cloud</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment">#自定义词库，这里是一个示例，不加的话会把“打call”拆开</span></span><br><span class="line">            jieba.load_userdict([<span class="string">&#x27;打call&#x27;</span>])</span><br><span class="line"><span class="comment">#获取评论并调用jieba分词</span></span><br><span class="line">            dataCut = self.data[<span class="string">&#x27;评论&#x27;</span>].apply(jieba.lcut)</span><br><span class="line"><span class="comment">#去除停用词，并去除单字符词</span></span><br><span class="line">            dataAfter = dataCut.apply(<span class="keyword">lambda</span> x: [i <span class="keyword">for</span> i <span class="keyword">in</span> x <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> self.stopWords <span class="keyword">and</span> <span class="built_in">len</span>(i) &gt; <span class="number">1</span>])</span><br><span class="line"><span class="comment">#统计词频</span></span><br><span class="line">            wordFre = pd.Series(_flatten(<span class="built_in">list</span>(dataAfter))).value_counts()</span><br><span class="line"><span class="comment">#加载背景图</span></span><br><span class="line">            mask = plt.imread(self.img)</span><br><span class="line"><span class="comment">#创建wordcloud对象，参数分别为：放大比例（与原始画布）、字体、背景图、背景颜色</span></span><br><span class="line">            wc = WordCloud(scale=<span class="number">10</span>,font_path=<span class="string">&#x27;C:/Windows/Fonts/simsun.ttc&#x27;</span>,mask=mask,background_color=<span class="string">&quot;white&quot;</span>,)</span><br><span class="line"><span class="comment">#将分好的词填充到词云</span></span><br><span class="line">            wc.fit_words(wordFre)</span><br><span class="line"><span class="comment">#保存词云图</span></span><br><span class="line">            wc.to_file(<span class="string">&#x27;bilibili.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>从txt文件生成词云：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Word_Cloud</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.cn_words = [<span class="string">&#x27;量&#x27;</span>, <span class="string">&#x27;…&#x27;</span>, <span class="string">&#x27;还&#x27;</span>, <span class="string">&#x27;🍑&#x27;</span>,<span class="string">&#x27;\u3000&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;🧊&#x27;</span>,<span class="string">&#x27;▓&#x27;</span>,<span class="string">&#x27;\xa0&#x27;</span>,<span class="string">&quot;啊&quot;</span>,<span class="string">&quot;这&quot;</span>,<span class="string">&#x27;･&#x27;</span>,<span class="string">&quot;就&quot;</span>,<span class="string">&quot;在&quot;</span>,<span class="string">&quot;站&quot;</span>,<span class="string">&quot;你&quot;</span>,<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;的&#x27;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;？&#x27;</span>,<span class="string">&#x27;！&#x27;</span>,<span class="string">&#x27;那&#x27;</span>,<span class="string">&#x27;都&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;吧&#x27;</span>,<span class="string">&#x27;个&#x27;</span>,<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;和&#x27;</span>,<span class="string">&#x27;有&#x27;</span>,<span class="string">&#x27;呢&#x27;</span>,<span class="string">&#x27;号&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;（&#x27;</span>,<span class="string">&#x27;）&#x27;</span>,<span class="string">&#x27;doge&#x27;</span>,<span class="string">&#x27;；&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;。&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;，&#x27;</span>,<span class="string">&#x27;：&#x27;</span>,<span class="string">&#x27;!&#x27;</span>,<span class="string">&#x27;https&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;“&#x27;</span>,<span class="string">&#x27;”&#x27;</span>,<span class="string">&#x27;了&#x27;</span>,]</span><br><span class="line">        self.img=<span class="string">&quot;1.jpeg&quot;</span></span><br><span class="line">        self.stopWords = <span class="built_in">list</span>(STOPWORDS) + self.cn_words</span><br><span class="line"><span class="comment">#读取文本文件</span></span><br><span class="line">        self.f = <span class="built_in">open</span>(<span class="string">&#x27;bingbing.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>).read()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">word_cloud</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#添加自定义词库</span></span><br><span class="line">        jieba.load_userdict([<span class="string">&#x27;打call&#x27;</span>])</span><br><span class="line"><span class="comment">#分词</span></span><br><span class="line">        words_cut = jieba.lcut(self.f)</span><br><span class="line"><span class="comment">#去除停用词和单字符</span></span><br><span class="line">        words = [i <span class="keyword">for</span> i <span class="keyword">in</span> words_cut <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> self.stopWords <span class="keyword">and</span> <span class="built_in">len</span>(i) &gt; <span class="number">1</span>]</span><br><span class="line">        mask = plt.imread(self.img)</span><br><span class="line"><span class="comment">#统计词频并按从大到小排序，这里是根据元组的第二个属性，reverse为True则按倒序排序</span></span><br><span class="line">        count_list = <span class="built_in">sorted</span>(Counter(words).items(), key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#输出高频词汇</span></span><br><span class="line">        <span class="built_in">print</span>(count_list[<span class="number">0</span>:<span class="number">20</span>])</span><br><span class="line"><span class="comment">#生成词云</span></span><br><span class="line">        wc = WordCloud(scale=<span class="number">5</span>,font_path=<span class="string">&#x27;C:/Windows/Fonts/simsun.ttc&#x27;</span>,mask=mask,background_color=<span class="string">&quot;white&quot;</span>,)</span><br><span class="line">        wc.fit_words(<span class="built_in">dict</span>(count_list))</span><br><span class="line">        wc.to_file(<span class="string">&#x27;bilibili.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>调用方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改pn为你要抓的总页数</span></span><br><span class="line">bilibili = Bilibili(oid = oid,pn = <span class="number">0</span>)</span><br><span class="line">bilibili.save</span><br><span class="line">bilibili.Word_Cloud().word_cloud</span><br></pre></td></tr></table></figure><h2 id="词云背景图"><a href="#词云背景图" class="headerlink" title="词云背景图"></a>词云背景图</h2><hr><p>美女主持王冰冰</p><hr><p><img src="https://www.ljczero.top/media/editor/1_20210106143553789103.jpeg"></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>词云部分参考了<a href="https://blog.csdn.net/qq_45176548/article/details/112100932?utm_medium=distribute.pc_category.none-task-blog-hot-10.nonecase&depth_1-utm_source=distribute.pc_category.none-task-blog-hot-10.nonecase&request_id=" title="CSDN的文章">CSDN的文章</a>，另外，本文的爬虫部分更适合用scrapy来写，调度起来十分方便，有兴趣的读者可以研究一下。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汽车之家口碑字体反爬</title>
      <link href="/2021/01/04/%E6%B1%BD%E8%BD%A6%E4%B9%8B%E5%AE%B6%E5%8F%A3%E7%A2%91%E5%AD%97%E4%BD%93%E5%8F%8D%E7%88%AC/"/>
      <url>/2021/01/04/%E6%B1%BD%E8%BD%A6%E4%B9%8B%E5%AE%B6%E5%8F%A3%E7%A2%91%E5%AD%97%E4%BD%93%E5%8F%8D%E7%88%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>汽车之家的反爬可以说是教科书级别，其反爬虫策略经过多次迭代，已经从最初的静态字体反爬变成了动态字体+js混淆，动态字体的破解与猫眼大同小异，加密的字多一些而已。js混淆比较麻烦，通过requests库请求网页无法得到字体对应的编码，看到的是一堆js函数，看着头都大了，不知道汽车之家是否对每一个加密的字都写了函数，无法洞悉其中的规则，那只能选择selenium获取网页了，效率比较低，但是很实用（小声bb：时间主要花在计算新旧字体的欧式距离上了，因为有90个字，不改进算法要执行差不多8000次）</p><h2 id="动态字体映射"><a href="#动态字体映射" class="headerlink" title="动态字体映射"></a>动态字体映射</h2><p>参考以前的文章</p><hr><p><a href="https://www.ljczero.top/article/2020/10/27/50.html" title="破解猫眼字体反爬">破解猫眼字体反爬</a></p><hr><p>这里写一下如何建立基础字体映射，首先获取一套字体，用fontcreater打开：</p><hr><p><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202021-01-04%20104141_20210104104012696098.png"></p><hr><p>如上图所示，“小”对应“EC41”，依次类推，需要将它们保存为字典形式，这么多字，怎么办呢，一个一个敲吧。</p><hr><p>写成下面的格式就行了，前面加uni是为了处理xml时稍微方便一点，如果这里不加那后面就要多一步操作。ps：直接复制是没用的，除非你的字体跟我的一样，很不巧，本站不支持附件的上传，如果你觉得实在麻烦可以给我发邮件，我把字体发给你。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">relation_table = &#123;</span><br><span class="line">    <span class="string">&#x27;uniEC41&#x27;</span>: <span class="string">&#x27;小&#x27;</span>, <span class="string">&#x27;uniED81&#x27;</span>: <span class="string">&#x27;响&#x27;</span>, <span class="string">&#x27;uniEDD3&#x27;</span>: <span class="string">&#x27;排&#x27;</span>, <span class="string">&#x27;uniED20&#x27;</span>: <span class="string">&#x27;冷&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniED72&#x27;</span>: <span class="string">&#x27;动&#x27;</span>, <span class="string">&#x27;uniECBE&#x27;</span>: <span class="string">&#x27;公&#x27;</span>, <span class="string">&#x27;uniEDFF&#x27;</span>: <span class="string">&#x27;五&#x27;</span>, <span class="string">&#x27;uniEC5D&#x27;</span>: <span class="string">&#x27;更&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniED9D&#x27;</span>: <span class="string">&#x27;是&#x27;</span>, <span class="string">&#x27;uniECEA&#x27;</span>: <span class="string">&#x27;有&#x27;</span>, <span class="string">&#x27;uniED3C&#x27;</span>: <span class="string">&#x27;性&#x27;</span>, <span class="string">&#x27;uniEC88&#x27;</span>: <span class="string">&#x27;过&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniECDA&#x27;</span>: <span class="string">&#x27;无&#x27;</span>, <span class="string">&#x27;uniEC27&#x27;</span>: <span class="string">&#x27;外&#x27;</span>, <span class="string">&#x27;uniED67&#x27;</span>: <span class="string">&#x27;量&#x27;</span>, <span class="string">&#x27;uniEDB9&#x27;</span>: <span class="string">&#x27;耗&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniED06&#x27;</span>: <span class="string">&#x27;不&#x27;</span>, <span class="string">&#x27;uniEC52&#x27;</span>: <span class="string">&#x27;少&#x27;</span>, <span class="string">&#x27;uniECA4&#x27;</span>: <span class="string">&#x27;矮&#x27;</span>, <span class="string">&#x27;uniEDE5&#x27;</span>: <span class="string">&#x27;八&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniEC43&#x27;</span>: <span class="string">&#x27;真&#x27;</span>, <span class="string">&#x27;uniED83&#x27;</span>: <span class="string">&#x27;中&#x27;</span>, <span class="string">&#x27;uniECD0&#x27;</span>: <span class="string">&#x27;近&#x27;</span>, <span class="string">&#x27;uniED22&#x27;</span>: <span class="string">&#x27;坏&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniEC6E&#x27;</span>: <span class="string">&#x27;内&#x27;</span>, <span class="string">&#x27;uniEDAF&#x27;</span>: <span class="string">&#x27;比&#x27;</span>, <span class="string">&#x27;uniEE01&#x27;</span>: <span class="string">&#x27;档&#x27;</span>, <span class="string">&#x27;uniED4D&#x27;</span>: <span class="string">&#x27;皮&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniED9F&#x27;</span>: <span class="string">&#x27;好&#x27;</span>, <span class="string">&#x27;uniECEC&#x27;</span>: <span class="string">&#x27;一&#x27;</span>, <span class="string">&#x27;uniEC38&#x27;</span>: <span class="string">&#x27;加&#x27;</span>, <span class="string">&#x27;uniEC8A&#x27;</span>: <span class="string">&#x27;电&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniEDCB&#x27;</span>: <span class="string">&#x27;远&#x27;</span>, <span class="string">&#x27;uniED17&#x27;</span>: <span class="string">&#x27;只&#x27;</span>, <span class="string">&#x27;uniED69&#x27;</span>: <span class="string">&#x27;地&#x27;</span>, <span class="string">&#x27;uniECB6&#x27;</span>: <span class="string">&#x27;多&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniED07&#x27;</span>: <span class="string">&#x27;实&#x27;</span>, <span class="string">&#x27;uniEC54&#x27;</span>: <span class="string">&#x27;油&#x27;</span>, <span class="string">&#x27;uniED95&#x27;</span>: <span class="string">&#x27;左&#x27;</span>, <span class="string">&#x27;uniEDE6&#x27;</span>: <span class="string">&#x27;坐&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniED33&#x27;</span>: <span class="string">&#x27;很&#x27;</span>, <span class="string">&#x27;uniEC80&#x27;</span>: <span class="string">&#x27;灯&#x27;</span>, <span class="string">&#x27;uniECD1&#x27;</span>: <span class="string">&#x27;得&#x27;</span>, <span class="string">&#x27;uniEC1E&#x27;</span>: <span class="string">&#x27;了&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniEC70&#x27;</span>: <span class="string">&#x27;盘&#x27;</span>, <span class="string">&#x27;uniEDB0&#x27;</span>: <span class="string">&#x27;机&#x27;</span>, <span class="string">&#x27;uniECFD&#x27;</span>: <span class="string">&#x27;二&#x27;</span>, <span class="string">&#x27;uniED4F&#x27;</span>: <span class="string">&#x27;开&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniEC9B&#x27;</span>: <span class="string">&#x27;十&#x27;</span>, <span class="string">&#x27;uniEDDC&#x27;</span>: <span class="string">&#x27;硬&#x27;</span>, <span class="string">&#x27;uniEC3A&#x27;</span>: <span class="string">&#x27;手&#x27;</span>, <span class="string">&#x27;uniED7A&#x27;</span>: <span class="string">&#x27;低&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniEDCC&#x27;</span>: <span class="string">&#x27;呢&#x27;</span>, <span class="string">&#x27;uniED19&#x27;</span>: <span class="string">&#x27;雨&#x27;</span>, <span class="string">&#x27;uniEC65&#x27;</span>: <span class="string">&#x27;右&#x27;</span>, <span class="string">&#x27;uniECB7&#x27;</span>: <span class="string">&#x27;软&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniEDF8&#x27;</span>: <span class="string">&#x27;保&#x27;</span>, <span class="string">&#x27;uniED44&#x27;</span>: <span class="string">&#x27;着&#x27;</span>, <span class="string">&#x27;uniED96&#x27;</span>: <span class="string">&#x27;控&#x27;</span>, <span class="string">&#x27;uniECE3&#x27;</span>: <span class="string">&#x27;空&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniED35&#x27;</span>: <span class="string">&#x27;高&#x27;</span>, <span class="string">&#x27;uniEC81&#x27;</span>: <span class="string">&#x27;里&#x27;</span>, <span class="string">&#x27;uniEDC2&#x27;</span>: <span class="string">&#x27;大&#x27;</span>, <span class="string">&#x27;uniEC20&#x27;</span>: <span class="string">&#x27;味&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniED60&#x27;</span>: <span class="string">&#x27;养&#x27;</span>, <span class="string">&#x27;uniECAD&#x27;</span>: <span class="string">&#x27;九&#x27;</span>, <span class="string">&#x27;uniECFF&#x27;</span>: <span class="string">&#x27;副&#x27;</span>, <span class="string">&#x27;uniEC4B&#x27;</span>: <span class="string">&#x27;级&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniEC9D&#x27;</span>: <span class="string">&#x27;短&#x27;</span>, <span class="string">&#x27;uniEDDE&#x27;</span>: <span class="string">&#x27;来&#x27;</span>, <span class="string">&#x27;uniED2A&#x27;</span>: <span class="string">&#x27;长&#x27;</span>, <span class="string">&#x27;uniED7C&#x27;</span>: <span class="string">&#x27;六&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniECC9&#x27;</span>: <span class="string">&#x27;的&#x27;</span>, <span class="string">&#x27;uniEE09&#x27;</span>: <span class="string">&#x27;上&#x27;</span>, <span class="string">&#x27;uniEC67&#x27;</span>: <span class="string">&#x27;启&#x27;</span>, <span class="string">&#x27;uniEDA8&#x27;</span>: <span class="string">&#x27;自&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniEDF9&#x27;</span>: <span class="string">&#x27;泥&#x27;</span>, <span class="string">&#x27;uniED46&#x27;</span>: <span class="string">&#x27;下&#x27;</span>, <span class="string">&#x27;uniEC93&#x27;</span>: <span class="string">&#x27;门&#x27;</span>, <span class="string">&#x27;uniECE4&#x27;</span>: <span class="string">&#x27;路&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniEC31&#x27;</span>: <span class="string">&#x27;四&#x27;</span>, <span class="string">&#x27;uniEDC3&#x27;</span>: <span class="string">&#x27;问&#x27;</span>, <span class="string">&#x27;uniED10&#x27;</span>: <span class="string">&#x27;三&#x27;</span>, <span class="string">&#x27;uniED62&#x27;</span>: <span class="string">&#x27;七&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniECAE&#x27;</span>: <span class="string">&#x27;当&#x27;</span>, <span class="string">&#x27;uniEDEF&#x27;</span>: <span class="string">&#x27;孩&#x27;</span>, <span class="string">&#x27;uniEC4D&#x27;</span>: <span class="string">&#x27;身&#x27;</span>, <span class="string">&#x27;uniED8D&#x27;</span>: <span class="string">&#x27;音&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uniED2C&#x27;</span>: <span class="string">&#x27;光&#x27;</span>, <span class="string">&#x27;uniEC78&#x27;</span>: <span class="string">&#x27;和&#x27;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><p>用到的库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python处理字体文件的库</span></span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"><span class="comment">#将上面的基础字体映射保存为font_config.py</span></span><br><span class="line"><span class="keyword">import</span> font_config</span><br><span class="line"><span class="comment">#正则表达式</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#用requests下载新字体文件</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#解析网页</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="comment">#计算欧式距离</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#时间、json字典（这里用于重新对字符串进行Unicode编码）</span></span><br><span class="line"><span class="keyword">import</span> time,json</span><br><span class="line"><span class="comment">#selenium获取网页</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br></pre></td></tr></table></figure><p>全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取基础字体映射</span></span><br><span class="line">relation_table = font_config.relation_table</span><br><span class="line"><span class="comment">#请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#自定义selenium属性</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">设置代理，这里有一点小问题，如果本机通过代理上网</span></span><br><span class="line"><span class="string">不为selenium设置代理的话就不能隐藏selenium界面，不然会出现connection错误</span></span><br><span class="line"><span class="string">一般来说，此问题会出现在公司内网通过固定代理访问外网，而内网本身无法访问外网</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--proxy-server=http://ip:port&quot;</span>)</span><br><span class="line"><span class="comment">#selenium无界面</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br></pre></td></tr></table></figure><p>获取网页信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span>():</span></span><br><span class="line"><span class="comment">#目标口碑的url</span></span><br><span class="line">    url = <span class="string">&#x27;https://k.autohome.com.cn/detail/view_01e9wkyqv26cr3ge1k6grg0000.html#pvareaid=2112108&#x27;</span></span><br><span class="line"><span class="comment">#初始化chromedriver</span></span><br><span class="line">    browser = webdriver.Chrome(executable_path = <span class="string">&#x27;chromedriver.exe&#x27;</span>,options = chrome_options)</span><br><span class="line"><span class="comment">#访问目标地址</span></span><br><span class="line">    browser.get(url)</span><br><span class="line"><span class="comment">#暂停2秒，不然可能抓不到信息</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#获取网页对象</span></span><br><span class="line">    page = browser.page_source</span><br><span class="line"><span class="comment">#使用beautifulsoup解析网页</span></span><br><span class="line">    html = bs(page,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#获取口碑信息的div模块</span></span><br><span class="line">    info = html.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&#x27;mouth-item koubei-final&#x27;</span>).find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&#x27;text-con&#x27;</span>)</span><br><span class="line"><span class="comment">#正则匹配该口碑对应字体文件下载地址</span></span><br><span class="line">    pattern_ttf = re.<span class="built_in">compile</span>(<span class="string">&#x27;k2.autoimg.cn.*?ttf&#x27;</span>)</span><br><span class="line"><span class="comment">#正则匹配口碑内容</span></span><br><span class="line">    pattern_text = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;!--@athm_BASE64@--&gt;(.*?)&lt;!--@athm_js@--&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">#拼接字体url</span></span><br><span class="line">    font_url = <span class="string">&#x27;https://&#x27;</span> + re.findall(pattern_ttf,<span class="built_in">str</span>(html))[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#获取口碑内容，一般来说有四段</span></span><br><span class="line">    text = re.findall(pattern_text,<span class="built_in">str</span>(info))</span><br><span class="line"><span class="comment">#下载新字体，保存为&quot;new_font.ttf&quot;</span></span><br><span class="line">    res = requests.get(font_url,headers = headers)</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">&#x27;new_font.ttf&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(res.content)</span><br><span class="line"><span class="comment">#以第一段口碑内容为例，再次调用beautifulsoup获取所有的spans标签</span></span><br><span class="line">    spans = bs(text[<span class="number">0</span>],<span class="string">&#x27;lxml&#x27;</span>).find_all(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line"><span class="comment">#处理Unicode字符（将其转换为字符串，即&#x27;\u&#x27;-&gt;&#x27;\\u&#x27;）</span></span><br><span class="line"><span class="comment">#注意：这里连同未加密汉字一起处理了，后面需要调用json模块重新编码</span></span><br><span class="line">    new_text = text[<span class="number">0</span>].encode(<span class="string">&#x27;unicode-escape&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment">#处理所有的span标签，将整个span模块替换为span.text的，需要进行一系列的编码解码</span></span><br><span class="line">    <span class="keyword">for</span> span <span class="keyword">in</span> spans:</span><br><span class="line">        new_text = new_text.replace(<span class="built_in">str</span>(span).encode(<span class="string">&#x27;unicode-escape&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>),span.text.encode(<span class="string">&#x27;unicode-escape&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>).replace(<span class="string">&#x27;\\u&#x27;</span>,<span class="string">&#x27;&amp;#x&#x27;</span>))</span><br><span class="line"><span class="comment">#退出chromedriver</span></span><br><span class="line">    browser.quit()</span><br><span class="line"><span class="comment">#返回清洗后的字符串</span></span><br><span class="line">    <span class="keyword">return</span> new_text</span><br></pre></td></tr></table></figure><p>解密字体并对字符串重新编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line"><span class="comment">#调用上述函数获取口碑内容</span></span><br><span class="line">    text = get_html()</span><br><span class="line"><span class="comment">#处理基础字体</span></span><br><span class="line">    base_font = TTFont(<span class="string">&#x27;base_font.ttf&#x27;</span>)</span><br><span class="line">    base_font.saveXML(<span class="string">&#x27;base_font.xml&#x27;</span>)</span><br><span class="line">    <span class="comment">#处理新字体</span></span><br><span class="line">    new_font = TTFont(<span class="string">&#x27;new_font.ttf&#x27;</span>)</span><br><span class="line">    new_font.saveXML(<span class="string">&#x27;new_font.xml&#x27;</span>)</span><br><span class="line">    <span class="comment">#从xml中获取字体信息</span></span><br><span class="line">    ttglyph_base = Read_Font(<span class="string">&#x27;base_font.xml&#x27;</span>)</span><br><span class="line">    ttglyph_new = Read_Font(<span class="string">&#x27;new_font.xml&#x27;</span>)</span><br><span class="line">    <span class="comment">#建立新旧字体文件之间的映射，Uni-&gt;Uni</span></span><br><span class="line">    basetonew = BaseToNew(ttglyph_base, ttglyph_new)</span><br><span class="line">    <span class="comment">#建立新的字体映射,Uni-&gt;汉字</span></span><br><span class="line">    newtotext = NewToText(basetonew)</span><br><span class="line">    <span class="comment">#遍历字典中每一个键</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> newtotext.keys():</span><br><span class="line"><span class="comment">#替换口碑中的内容</span></span><br><span class="line">        text = text.replace(key,newtotext[key])</span><br><span class="line"><span class="comment">#使用json模块对未加密的内容重新编码</span></span><br><span class="line">    text = json.loads(<span class="string">f&#x27;&quot;<span class="subst">&#123;text&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">    <span class="comment">#返回口碑明文内容</span></span><br><span class="line">    <span class="keyword">return</span> text</span><br></pre></td></tr></table></figure><h2 id="其余代码"><a href="#其余代码" class="headerlink" title="其余代码"></a>其余代码</h2><p>这部分的注释可以参考猫眼字体反爬那篇文章，重新写注释太麻烦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare_axis</span>(<span class="params">axis1,axis2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(axis1) &lt; <span class="built_in">len</span>(axis2):</span><br><span class="line">        axis1.extend([<span class="number">0</span>,<span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(axis2) - <span class="built_in">len</span>(axis1)))</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(axis2) &lt; <span class="built_in">len</span>(axis1):</span><br><span class="line">        axis2.extend([<span class="number">0</span>,<span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(axis1) - <span class="built_in">len</span>(axis2)))</span><br><span class="line">    axis1 = np.array(axis1)</span><br><span class="line">    axis2 = np.array(axis2)</span><br><span class="line">    <span class="keyword">return</span> np.sqrt(np.<span class="built_in">sum</span>(np.square(axis1 - axis2)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Read_Font</span>(<span class="params">file</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(file,<span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    html_base = bs(f.read(),<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    ttglyph = html_base.find(<span class="string">&#x27;glyf&#x27;</span>).find_all(<span class="string">&#x27;ttglyph&#x27;</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> ttglyph</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Axis</span>(<span class="params">string</span>):</span></span><br><span class="line">    axis = []</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;pt\son=&quot;[0,1]?&quot;\s(.*?)&gt;&#x27;</span>)</span><br><span class="line">    axis_list = re.findall(pattern,<span class="built_in">str</span>(string))</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> axis_list:</span><br><span class="line">        zb = item.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        x = <span class="built_in">int</span>(zb[<span class="number">0</span>].split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        y = <span class="built_in">int</span>(zb[<span class="number">1</span>].split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        axis.append([x,y])</span><br><span class="line">    <span class="keyword">return</span> axis</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BaseToNew</span>(<span class="params">ttglyph_base,ttglyph_new</span>):</span></span><br><span class="line">    basetonew = []</span><br><span class="line">    <span class="keyword">for</span> base <span class="keyword">in</span> ttglyph_base[<span class="number">1</span>:]:</span><br><span class="line">        value = []</span><br><span class="line">        axis_base = Get_Axis(base)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index,new <span class="keyword">in</span> <span class="built_in">enumerate</span>(ttglyph_new[<span class="number">1</span>:]):</span><br><span class="line">            axis_new = Get_Axis(new)</span><br><span class="line">            value.append(compare_axis(axis_base,axis_new))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(value)):</span><br><span class="line">            <span class="keyword">if</span> value[i] == <span class="built_in">min</span>(value):</span><br><span class="line">                new_code = ttglyph_new[i + <span class="number">1</span>].get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">                base_code = base.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">                basetonew.append(&#123;<span class="string">&quot;basecode&quot;</span>:base_code,<span class="string">&quot;newcode&quot;</span>:new_code&#125;)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> basetonew</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NewToText</span>(<span class="params">basetonew</span>):</span></span><br><span class="line">    newtonum = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> relation_table.keys():</span><br><span class="line">        value = relation_table[key]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(basetonew)):</span><br><span class="line">            <span class="keyword">if</span> key == basetonew[i][<span class="string">&#x27;basecode&#x27;</span>]:</span><br><span class="line">                newtonum[basetonew[i][<span class="string">&#x27;newcode&#x27;</span>].lower().replace(<span class="string">&#x27;uni&#x27;</span>,<span class="string">&#x27;&amp;#x&#x27;</span>)] = value</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> newtonum</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>如果哪天我把汽车之家的js函数给弄懂了…那么我会不会秃呢..</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两种方式抓取王者荣耀皮肤</title>
      <link href="/2020/12/31/%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%8A%93%E5%8F%96%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E7%9A%AE%E8%82%A4/"/>
      <url>/2020/12/31/%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%8A%93%E5%8F%96%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E7%9A%AE%E8%82%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>抓完了LOL，再来试试王者荣耀，单纯写scrapy的话没什么意思，就用requests和scrapy分别实现了抓取功能，并记录一个需要解决的问题。</p><h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h2><p>创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject wzryskin</span><br><span class="line">cd wzry</span><br><span class="line">scrapy genspider wzryskinspider &quot;pvp.qq.com&quot;</span><br></pre></td></tr></table></figure><p>items.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WzryskinItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    hero_name = scrapy.Field()</span><br><span class="line">    skin_name = scrapy.Field()</span><br><span class="line">    skin_url = scrapy.Field()</span><br></pre></td></tr></table></figure><p>wzryskinspider.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> wzryskin.items <span class="keyword">import</span> WzryskinItem</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WzryskinspiderSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;wzryskinspider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;pvp.qq.com&#x27;</span>, <span class="string">&#x27;game.gtimg.cn&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://pvp.qq.com/web201605/js/herolist.json&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        hero_lists = response.json()</span><br><span class="line">        <span class="keyword">for</span> hero <span class="keyword">in</span> hero_lists:</span><br><span class="line">            url = <span class="string">&#x27;https://pvp.qq.com/web201605/herodetail/&#123;&#125;.shtml&#x27;</span></span><br><span class="line">            heroid = hero[<span class="string">&#x27;ename&#x27;</span>]</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url = url.<span class="built_in">format</span>(heroid),callback = self.get_skins,meta = &#123;<span class="string">&#x27;hero&#x27;</span>:hero&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_skins</span>(<span class="params">self,response</span>):</span></span><br><span class="line">        hero = response.meta[<span class="string">&#x27;hero&#x27;</span>]</span><br><span class="line">        url = <span class="string">&#x27;https://game.gtimg.cn/images/yxzj/img201606/skin/hero-info/&#123;&#125;/&#123;&#125;-bigskin-&#123;&#125;.jpg&#x27;</span></span><br><span class="line">        bf = bs(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        skins = bf.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;pic-pf&#x27;</span>).find(<span class="string">&#x27;ul&#x27;</span>).get(<span class="string">&#x27;data-imgname&#x27;</span>)</span><br><span class="line">        skin_list = [x.split(<span class="string">&#x27;&amp;&#x27;</span>)[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> skins.split(<span class="string">&#x27;|&#x27;</span>)]</span><br><span class="line">        <span class="keyword">for</span> i, skin_name <span class="keyword">in</span> <span class="built_in">enumerate</span>(skin_list):</span><br><span class="line">            item = WzryskinItem()</span><br><span class="line">            item[<span class="string">&#x27;hero_name&#x27;</span>] = hero[<span class="string">&#x27;cname&#x27;</span>]</span><br><span class="line">            item[<span class="string">&#x27;skin_name&#x27;</span>] = skin_name.replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            item[<span class="string">&#x27;skin_url&#x27;</span>] = [url.<span class="built_in">format</span>(hero[<span class="string">&#x27;ename&#x27;</span>], hero[<span class="string">&#x27;ename&#x27;</span>], i + <span class="number">1</span>)]</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"><span class="keyword">from</span> scrapy.pipelines.images <span class="keyword">import</span> ImagesPipeline</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WzryskinPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImgPipeline</span>(<span class="params">ImagesPipeline</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span>(<span class="params">self, item, info</span>):</span></span><br><span class="line">        urls = ItemAdapter(item).get(self.images_urls_field, [])</span><br><span class="line">        <span class="keyword">return</span> [Request(u,meta=&#123;<span class="string">&quot;hero_name&quot;</span>:item[<span class="string">&quot;hero_name&quot;</span>],<span class="string">&quot;skin_name&quot;</span>: item[<span class="string">&#x27;skin_name&#x27;</span>]&#125;) <span class="keyword">for</span> u <span class="keyword">in</span> urls]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_path</span>(<span class="params">self, request, response=<span class="literal">None</span>, info=<span class="literal">None</span></span>):</span></span><br><span class="line">        hero_name = request.meta[<span class="string">&#x27;hero_name&#x27;</span>]</span><br><span class="line">        skin_name = request.meta[<span class="string">&#x27;skin_name&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;/&#123;&#125;.jpg&#x27;</span>.<span class="built_in">format</span>(hero_name,skin_name)</span><br></pre></td></tr></table></figure><p>settings.py(修改配置)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">BOT_NAME = <span class="string">&#x27;wzryskin&#x27;</span></span><br><span class="line"></span><br><span class="line">SPIDER_MODULES = [<span class="string">&#x27;wzryskin.spiders&#x27;</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">&#x27;wzryskin.spiders&#x27;</span></span><br><span class="line"></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">0.25</span></span><br><span class="line"></span><br><span class="line">COOKIES_ENABLED = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">&#x27;wzryskin.middlewares.WzryskinDownloaderMiddleware&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;wzryskin.pipelines.ImgPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line">IMAGES_STORE = <span class="string">&#x27;王者荣耀&#x27;</span></span><br><span class="line"></span><br><span class="line">IMAGES_URLS_FIELD = <span class="string">&#x27;skin_url&#x27;</span></span><br><span class="line"></span><br><span class="line">IMAGES_RESULT_FIELD = <span class="string">&#x27;skin_name&#x27;</span></span><br></pre></td></tr></table></figure><p>middlewares.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主要修改一个方法</span></span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">    ua = UserAgent().random</span><br><span class="line">    request.headers[<span class="string">&#x27;User-Agent&#x27;</span>] = ua</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#操作文件夹、时间</span></span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="comment">#网页请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#伪造请求头</span></span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="comment">#解析网页</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="comment">#进度条</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="comment">#创建请求头</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:UserAgent().random&#125;</span><br><span class="line"><span class="comment">#创建根目录</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;王者荣耀&#x27;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&#x27;王者荣耀&#x27;</span>)</span><br><span class="line"><span class="comment">#获取英雄列表的url</span></span><br><span class="line">url_list = <span class="string">&#x27;https://pvp.qq.com/web201605/js/herolist.json&#x27;</span></span><br><span class="line"><span class="comment">#访问地址获取response</span></span><br><span class="line">res = requests.get(url = url_list,headers=headers)</span><br><span class="line"><span class="comment">#将response转换为json字典（这里好像是列表）</span></span><br><span class="line">hero_lists = res.json()</span><br><span class="line"><span class="comment">#遍历</span></span><br><span class="line"><span class="keyword">for</span> hero <span class="keyword">in</span> hero_lists:</span><br><span class="line">    <span class="comment">#构造英雄详情页</span></span><br><span class="line">    url_detail = <span class="string">&#x27;https://pvp.qq.com/web201605/herodetail/&#123;&#125;.shtml&#x27;</span>.<span class="built_in">format</span>(hero[<span class="string">&#x27;ename&#x27;</span>])</span><br><span class="line">    <span class="comment">#访问页面</span></span><br><span class="line">    res = requests.get(url = url_detail,headers = headers)</span><br><span class="line">    <span class="comment">#页面编码</span></span><br><span class="line">    res.encoding = res.apparent_encoding</span><br><span class="line">    <span class="comment">#解析网页</span></span><br><span class="line">    bf = bs(res.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment">#获取皮肤信息</span></span><br><span class="line">    skins = bf.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&#x27;pic-pf&#x27;</span>).find(<span class="string">&#x27;ul&#x27;</span>).get(<span class="string">&#x27;data-imgname&#x27;</span>)</span><br><span class="line">    <span class="comment">#处理得到的字符串，构造单个英雄的皮肤列表</span></span><br><span class="line">    skin_list = [x.split(<span class="string">&#x27;&amp;&#x27;</span>)[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> skins.split(<span class="string">&#x27;|&#x27;</span>)]</span><br><span class="line">    <span class="comment">#调用进度条，逐个下载</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(skin_list)),desc = <span class="string">&#x27;正在下载 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(hero[<span class="string">&#x27;cname&#x27;</span>]),ncols=<span class="number">80</span>):</span><br><span class="line">        <span class="comment">#创建英雄文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;王者荣耀/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(hero[<span class="string">&#x27;cname&#x27;</span>])):</span><br><span class="line">            os.mkdir(<span class="string">&#x27;王者荣耀/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(hero[<span class="string">&#x27;cname&#x27;</span>]))</span><br><span class="line">        <span class="comment">#构造皮肤图片的url</span></span><br><span class="line">        url_skin = <span class="string">&#x27;https://game.gtimg.cn/images/yxzj/img201606/skin/hero-info/&#123;0&#125;/&#123;0&#125;-bigskin-&#123;1&#125;.jpg&#x27;</span>.<span class="built_in">format</span>(hero[<span class="string">&#x27;ename&#x27;</span>],i + <span class="number">1</span>)</span><br><span class="line">        <span class="comment">#请求图片地址</span></span><br><span class="line">        res = requests.get(url = url_skin,headers = headers)</span><br><span class="line">        <span class="comment">#保存图片</span></span><br><span class="line">        <span class="built_in">open</span>(<span class="string">&#x27;王者荣耀/&#123;&#125;/&#123;&#125;.jpg&#x27;</span>.<span class="built_in">format</span>(hero[<span class="string">&#x27;cname&#x27;</span>],skin_list[i]),<span class="string">&#x27;wb&#x27;</span>).write(res.content)</span><br><span class="line">    <span class="comment">#暂停1秒</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>两种方法得到的结果差不多，但是scrapy抓取到的图片是压缩过的，暂时还不知道如何绕过。为什么scrapy没有注释呢？偷个懒吧。。。有空再写</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用scrapy抓取图片</title>
      <link href="/2020/12/31/%E4%BD%BF%E7%94%A8scrapy%E6%8A%93%E5%8F%96%E5%9B%BE%E7%89%87/"/>
      <url>/2020/12/31/%E4%BD%BF%E7%94%A8scrapy%E6%8A%93%E5%8F%96%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>scrapy作为强大的爬虫框架，当然可以用来抓取图片，本文以英雄联盟全部英雄皮肤为例，记录一下抓取图片并自定义图片保存路径的方法。</p><h2 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建项目</span></span><br><span class="line">scrapy startproject lolskin</span><br><span class="line"><span class="meta">#</span><span class="bash">创建spider</span></span><br><span class="line">scrapy genspider lolskinspider &quot;lol.qq.com&quot;</span><br></pre></td></tr></table></figure><h2 id="配置item"><a href="#配置item" class="headerlink" title="配置item"></a>配置item</h2><p>items.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LolskinItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line"><span class="comment">#保存英雄名称，如：黑暗之女、狂战士</span></span><br><span class="line">    hero_name = scrapy.Field()</span><br><span class="line"><span class="comment">#保存皮肤名称，如：这货不是乌迪尔</span></span><br><span class="line">    skin_name = scrapy.Field()</span><br><span class="line"><span class="comment">#保存皮肤图片的下载地址</span></span><br><span class="line">    skin_url = scrapy.Field()</span><br></pre></td></tr></table></figure><h2 id="配置spider"><a href="#配置spider" class="headerlink" title="配置spider"></a>配置spider</h2><p>lolskinspider.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="comment">#引入item</span></span><br><span class="line"><span class="keyword">from</span> lolskin.items <span class="keyword">import</span> LolskinItem</span><br><span class="line"></span><br><span class="line"><span class="comment">#爬虫类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LolskinspiderSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line"><span class="comment">#爬虫名称</span></span><br><span class="line">    name = <span class="string">&#x27;lolskinspider&#x27;</span></span><br><span class="line"><span class="comment">#请求允许的域名，需要从game.gtimg.cn获取英雄资料</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;lol.qq.com&#x27;</span>,<span class="string">&#x27;game.gtimg.cn&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment">#从目标地址获取英雄列表</span></span><br><span class="line">        url = <span class="string">&#x27;https://game.gtimg.cn/images/lol/act/img/js/heroList/hero_list.js&#x27;</span></span><br><span class="line"><span class="comment">#将response传递给parse方法</span></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url = url,callback = self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line"><span class="comment">#单个英雄的详细信息，花括号需要匹配英雄的heroId</span></span><br><span class="line">        url = <span class="string">&#x27;https://game.gtimg.cn/images/lol/act/img/js/hero/&#123;&#125;.js&#x27;</span></span><br><span class="line"><span class="comment">#从response（转换为json格式）中获取全部英雄信息的列表</span></span><br><span class="line">        heros = response.json()[<span class="string">&#x27;hero&#x27;</span>]</span><br><span class="line"><span class="comment">#遍历全部英雄</span></span><br><span class="line">        <span class="keyword">for</span> hero <span class="keyword">in</span> heros:</span><br><span class="line"><span class="comment">#获取heroId</span></span><br><span class="line">            hero_id = hero[<span class="string">&#x27;heroId&#x27;</span>]</span><br><span class="line"><span class="comment">#拼接url，将response传递给get_skins方法</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url = url.<span class="built_in">format</span>(hero_id),callback = self.get_skins)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_skins</span>(<span class="params">self,response</span>):</span></span><br><span class="line"><span class="comment">#从response中读取英雄的皮肤列表</span></span><br><span class="line">        skins = response.json()[<span class="string">&#x27;skins&#x27;</span>]</span><br><span class="line"><span class="comment">#遍历每一个皮肤</span></span><br><span class="line">        <span class="keyword">for</span> skin <span class="keyword">in</span> skins:</span><br><span class="line"><span class="comment">#炫彩皮肤的mainImg为空，将炫彩皮肤过滤掉</span></span><br><span class="line">            <span class="keyword">if</span> skin[<span class="string">&#x27;mainImg&#x27;</span>] != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line"><span class="comment">#创建item对象</span></span><br><span class="line">                item = LolskinItem()</span><br><span class="line"><span class="comment">#保存hero_name</span></span><br><span class="line">                item[<span class="string">&#x27;hero_name&#x27;</span>] = skin[<span class="string">&#x27;heroName&#x27;</span>]</span><br><span class="line"><span class="comment">#保存skin_name，去掉特殊字符（K/DA那几个）</span></span><br><span class="line">                item[<span class="string">&#x27;skin_name&#x27;</span>] = skin[<span class="string">&#x27;name&#x27;</span>].replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#需要将skin_url保存为列表形式，不然scrapy下载器无法识别</span></span><br><span class="line">                item[<span class="string">&#x27;skin_url&#x27;</span>] = [skin[<span class="string">&#x27;mainImg&#x27;</span>]]</span><br><span class="line"><span class="comment">#将item传递给管道执行下一步操作</span></span><br><span class="line">                <span class="keyword">yield</span> item</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h2 id="配置管道"><a href="#配置管道" class="headerlink" title="配置管道"></a>配置管道</h2><p>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重写get_media_requests方法时需要用到的库</span></span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</span><br><span class="line"><span class="comment">#操作文件夹</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#引入scrapy的图片下载器</span></span><br><span class="line"><span class="keyword">from</span> scrapy.pipelines.images <span class="keyword">import</span> ImagesPipeline</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建类并继承ImagesPipeline的属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImagePipeline</span>(<span class="params">ImagesPipeline</span>):</span></span><br><span class="line"><span class="comment">#如果不存在文件夹则创建（可能不需要）</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;英雄联盟&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;英雄联盟&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义文件存储路径可以通过重写get_media_requests动态传参数来实现,具体得request设置meta属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span>(<span class="params">self, item, info</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [Request(x, meta=&#123;<span class="string">&quot;hero_name&quot;</span>:item[<span class="string">&quot;hero_name&quot;</span>],<span class="string">&quot;skin_name&quot;</span>: item[<span class="string">&#x27;skin_name&#x27;</span>]&#125;) <span class="keyword">for</span> x <span class="keyword">in</span> item.get(self.images_urls_field, [])]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># file_path接收传递的request，并返回文件保存路径</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_path</span>(<span class="params">self, request, response=<span class="literal">None</span>, info=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="comment">#英雄名</span></span><br><span class="line">        hero_name = request.meta[<span class="string">&#x27;hero_name&#x27;</span>]</span><br><span class="line"><span class="comment">#皮肤名</span></span><br><span class="line">        skin_name = request.meta[<span class="string">&#x27;skin_name&#x27;</span>]</span><br><span class="line"><span class="comment">#完整路径，类似于：英雄联盟/潮汐海灵/兔宝宝 菲兹.jpg</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;/&#123;&#125;.jpg&#x27;</span>.<span class="built_in">format</span>(hero_name,skin_name)</span><br></pre></td></tr></table></figure><h2 id="修改settings"><a href="#修改settings" class="headerlink" title="修改settings"></a>修改settings</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭rebot检查</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"><span class="comment">#设置下载延迟</span></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">0.25</span></span><br><span class="line"><span class="comment">#关闭cookies</span></span><br><span class="line">COOKIES_ENABLED = <span class="literal">False</span></span><br><span class="line"><span class="comment">#执行管道</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;lolskin.pipelines.ImagePipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#t图片根目录(于scrapy项目文件夹同级，也可以写绝对路径)</span></span><br><span class="line">IMAGES_STORE = <span class="string">&#x27;英雄联盟&#x27;</span></span><br><span class="line"><span class="comment">#图片url地址，需要跟item中的名字对应</span></span><br><span class="line">IMAGES_URLS_FIELD = <span class="string">&#x27;skin_url&#x27;</span></span><br><span class="line"><span class="comment">#保存路径的&quot;键&quot;，如果不修改file_path方法的话会生成哈希乱码作为路径</span></span><br><span class="line">IMAGES_RESULT_FIELD = <span class="string">&#x27;skin_name&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="爬虫执行"><a href="#爬虫执行" class="headerlink" title="爬虫执行"></a>爬虫执行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl lolskinspider</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>对scrapy的使用又多了一点了解！加油！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再探Scrapy爬虫框架</title>
      <link href="/2020/12/26/%E5%86%8D%E6%8E%A2Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/"/>
      <url>/2020/12/26/%E5%86%8D%E6%8E%A2Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>爬虫框架也是需要掌握的知识，这次尝试抓取药监局的化妆品信息，并保存到excel和MongoDB数据库中。</p><h2 id="目标地址"><a href="#目标地址" class="headerlink" title="目标地址"></a>目标地址</h2><hr><p><a href="http://scxk.nmpa.gov.cn:81/xk/" title="化妆品生产许可信息服务平台">化妆品生产许可信息服务平台</a></p><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建scrapy项目</span></span><br><span class="line">scrapy startproject NMPA</span><br><span class="line"><span class="meta">#</span><span class="bash">进入项目目录</span></span><br><span class="line">cd NMPA</span><br><span class="line"><span class="meta">#</span><span class="bash">创建spider</span></span><br><span class="line">scrapy genspider nmpaspider &quot;scxk.nmpa.gov.cn&quot;</span><br></pre></td></tr></table></figure><h2 id="修改items"><a href="#修改items" class="headerlink" title="修改items"></a>修改items</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NmpaItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    epsName = scrapy.Field() <span class="comment">#企业名称</span></span><br><span class="line">    productSn = scrapy.Field() <span class="comment">#许可证编号</span></span><br><span class="line">    certStr = scrapy.Field() <span class="comment">#许可项目</span></span><br><span class="line">    epsAddress = scrapy.Field() <span class="comment">#企业住所</span></span><br><span class="line">    epsProductAddress = scrapy.Field() <span class="comment">#生产地址</span></span><br><span class="line">    businessLicenseNumber = scrapy.Field() <span class="comment">#社会信用代码</span></span><br><span class="line">    legalPerson = scrapy.Field() <span class="comment">#法定代表人</span></span><br><span class="line">    businessPerson = scrapy.Field() <span class="comment">#企业负责人</span></span><br><span class="line">    qualityPerson = scrapy.Field() <span class="comment">#质量负责人</span></span><br><span class="line">    qfManagerName = scrapy.Field() <span class="comment">#发证机关</span></span><br><span class="line">    xkName = scrapy.Field() <span class="comment">#签发人</span></span><br><span class="line">    rcManagerDepartName = scrapy.Field() <span class="comment">#日常监督管理机构</span></span><br><span class="line">    rcManagerUser = scrapy.Field() <span class="comment">#日常监督管理人员</span></span><br><span class="line">    xkDate = scrapy.Field() <span class="comment">#有效期至</span></span><br><span class="line">    xkDateStr = scrapy.Field() <span class="comment">#发证日期</span></span><br></pre></td></tr></table></figure><h2 id="抓取模块"><a href="#抓取模块" class="headerlink" title="抓取模块"></a>抓取模块</h2><p>修改spiders目录下的nmpaspider.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> NMPA.items <span class="keyword">import</span> NmpaItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NmpaspiderSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    <span class="comment">#爬虫名称</span></span><br><span class="line">    name = <span class="string">&#x27;nmpaspider&#x27;</span></span><br><span class="line">    <span class="comment">#网页请求限定在此域名下</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;scxk.nmpa.gov.cn&#x27;</span>]</span><br><span class="line">    <span class="comment">#重写start_requests方法，循环抓取多页</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment">#向目标地址发起post请求</span></span><br><span class="line">        url = <span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class="line"><span class="comment">#一共有362页</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">363</span>):</span><br><span class="line"><span class="comment">#page参数决定目标页</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;on&#x27;</span>:<span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;page&#x27;</span>:<span class="built_in">str</span>(i),</span><br><span class="line">                <span class="string">&#x27;pageSize&#x27;</span>:<span class="string">&#x27;15&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;productNone&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;conditionType&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;applyname&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;applysn&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">#发起post请求，并将response传递给parse方法</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.FormRequest(url = url, callback = self.parse,formdata = data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line"><span class="comment">#获取当前页中的id，用于请求详细信息</span></span><br><span class="line">        id_lists = response.json()[<span class="string">&#x27;list&#x27;</span>]</span><br><span class="line"><span class="comment">#详细信息的url</span></span><br><span class="line">        url = <span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class="line"><span class="comment">#遍历每一个id</span></span><br><span class="line">        <span class="keyword">for</span> id_ <span class="keyword">in</span> id_lists:</span><br><span class="line"><span class="comment">#构造请求的参数</span></span><br><span class="line">            data = &#123;<span class="string">&#x27;id&#x27;</span>:id_[<span class="string">&#x27;ID&#x27;</span>]&#125;</span><br><span class="line"><span class="comment">#发起post请求，并将response传递给get_details方法</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.FormRequest(url = url,formdata = data,callback = self.get_details)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_details</span>(<span class="params">self,response</span>):</span></span><br><span class="line"><span class="comment">#创建item对象</span></span><br><span class="line">        item = NmpaItem()</span><br><span class="line"><span class="comment">#将response转换为json字典</span></span><br><span class="line">        details = response.json()</span><br><span class="line"><span class="comment">#为item对象赋值</span></span><br><span class="line">        item[<span class="string">&#x27;epsName&#x27;</span>] = details[<span class="string">&#x27;epsName&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;productSn&#x27;</span>] = details[<span class="string">&#x27;productSn&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;certStr&#x27;</span>] = details[<span class="string">&#x27;certStr&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;epsAddress&#x27;</span>] = details[<span class="string">&#x27;epsAddress&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;epsProductAddress&#x27;</span>] = details[<span class="string">&#x27;epsProductAddress&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;businessLicenseNumber&#x27;</span>] = details[<span class="string">&#x27;businessLicenseNumber&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;legalPerson&#x27;</span>] = details[<span class="string">&#x27;legalPerson&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;businessPerson&#x27;</span>] = details[<span class="string">&#x27;businessPerson&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;qualityPerson&#x27;</span>] = details[<span class="string">&#x27;qualityPerson&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;qfManagerName&#x27;</span>] = details[<span class="string">&#x27;qfManagerName&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;xkName&#x27;</span>] = details[<span class="string">&#x27;xkName&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;rcManagerDepartName&#x27;</span>] = details[<span class="string">&#x27;rcManagerDepartName&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;rcManagerUser&#x27;</span>] = details[<span class="string">&#x27;rcManagerUser&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;xkDate&#x27;</span>] = details[<span class="string">&#x27;xkDate&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;xkDateStr&#x27;</span>] = details[<span class="string">&#x27;xkDateStr&#x27;</span>]</span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h2 id="管道文件"><a href="#管道文件" class="headerlink" title="管道文件"></a>管道文件</h2><p>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#操作MongoDB</span></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="comment">#操作Excel</span></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库索引及Excel表头</span></span><br><span class="line">title_list = [</span><br><span class="line">            <span class="string">&#x27;企业名称&#x27;</span>, <span class="string">&#x27;许可证编号&#x27;</span>, <span class="string">&#x27;许可项目&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;企业住所&#x27;</span>, <span class="string">&#x27;生产地址&#x27;</span>, <span class="string">&#x27;社会信用代码&#x27;</span>, <span class="string">&#x27;法定代表人&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;企业负责人&#x27;</span>, <span class="string">&#x27;质量负责人&#x27;</span>, <span class="string">&#x27;发证机关&#x27;</span>,<span class="string">&#x27;签发人&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;日常监督管理机构&#x27;</span>, <span class="string">&#x27;日常监督管理人员&#x27;</span>, <span class="string">&#x27;有效期至&#x27;</span>, <span class="string">&#x27;发证日期&#x27;</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个类是创建的时候自带的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NmpaPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="comment">#关于数据库的管道</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mongodbpipeline</span>:</span></span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment">#连接数据库，请替换user和passwd</span></span><br><span class="line">        self.client = pymongo.MongoClient(<span class="string">&#x27;mongodb://user:passwd@localhost:27017&#x27;</span>)</span><br><span class="line"><span class="comment">#目标数据库，不存在则自动创建</span></span><br><span class="line">        self.db = self.client.nmpa</span><br><span class="line"><span class="comment">#目标table，不存在则自动创建</span></span><br><span class="line">        self.collection = self.db.data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self,item,spider</span>):</span></span><br><span class="line"><span class="comment">#创建一个空字典用于保存重构后的数据</span></span><br><span class="line">        dict_items = &#123;&#125;</span><br><span class="line"><span class="comment">#将item转换为字典格式</span></span><br><span class="line">        item = <span class="built_in">dict</span>(item)</span><br><span class="line"><span class="comment">#重构数据，将字典中的键替换为中文</span></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">zip</span>(title_list,item.keys()):</span><br><span class="line">            dict_items[k] = item[v]</span><br><span class="line"><span class="comment">#在数据库中插入一条</span></span><br><span class="line">        self.collection.insert(dict_items)</span><br><span class="line"><span class="comment">#将item返回，执行下一管道</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="comment">#此方法只在管道执行完毕后运行一次，可以自定义输出信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self,scrapy</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;MongoDB执行完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#关于Excel的管道</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">openpyxlpipeline</span>:</span></span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment">#创建工作表</span></span><br><span class="line">        self.wb = openpyxl.Workbook()</span><br><span class="line"><span class="comment">#创建sheet</span></span><br><span class="line">        self.ws = self.wb.active</span><br><span class="line"><span class="comment">#插入索引</span></span><br><span class="line">        self.ws.append(title_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self,item,spider</span>):</span></span><br><span class="line"><span class="comment">#创建空列表用于保存一行信息</span></span><br><span class="line">        list_items = []</span><br><span class="line"><span class="comment">#将item转换为字典格式</span></span><br><span class="line">        item = <span class="built_in">dict</span>(item)</span><br><span class="line"><span class="comment">#将字典的值保存到列表</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> item.keys():</span><br><span class="line">            list_items.append(item[v])</span><br><span class="line"><span class="comment">#向表格中插入一行数据</span></span><br><span class="line">        self.ws.append(list_items)</span><br><span class="line"><span class="comment">#返回item以执行下一管道</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="comment">#在管道执行完毕后保存工作表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self,scrapy</span>):</span></span><br><span class="line">        self.wb.save(<span class="string">&#x27;nmpa.xlsx&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Openpyxl执行完毕&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭robot检查</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"><span class="comment">#自定义延迟（发生在两个请求之间）</span></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">0.25</span></span><br><span class="line"><span class="comment">#关闭cookie缓存</span></span><br><span class="line">COOKIES_ENABLED = <span class="literal">False</span></span><br><span class="line"><span class="comment">#开启中间件</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">&#x27;NMPA.middlewares.NmpaDownloaderMiddleware&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#管道执行的顺序，数字越小优先级越高，数字为0-1000</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;NMPA.pipelines.mongodbpipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="string">&#x27;NMPA.pipelines.openpyxlpipeline&#x27;</span>: <span class="number">301</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="伪造请求头"><a href="#伪造请求头" class="headerlink" title="伪造请求头"></a>伪造请求头</h2><p>修改middlewares.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="comment">#该方法位于NmpaDownloaderMiddleware类下</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">    ua = UserAgent().random</span><br><span class="line">    request.headers[<span class="string">&#x27;User-Agent&#x27;</span>] = ua</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="运行爬虫"><a href="#运行爬虫" class="headerlink" title="运行爬虫"></a>运行爬虫</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">普通运行（在NMPA目录下）</span></span><br><span class="line">scrapy crawl nmpaspider</span><br><span class="line"><span class="meta">#</span><span class="bash">禁用日志信息</span></span><br><span class="line">scrapy crawl nmpaspider -s LOG_ENABLED=0</span><br><span class="line"><span class="meta">#</span><span class="bash">将日志信息保存到<span class="built_in">log</span>文件</span></span><br><span class="line">scrapy crawl nmpaspider -s LOG_FILE=nmpa.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python抓取微博评论</title>
      <link href="/2020/12/23/Python%E6%8A%93%E5%8F%96%E5%BE%AE%E5%8D%9A%E8%AF%84%E8%AE%BA/"/>
      <url>/2020/12/23/Python%E6%8A%93%E5%8F%96%E5%BE%AE%E5%8D%9A%E8%AF%84%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>一直以为微博的东西比较好搞，没想到还是有点坑。新浪把评论的模块保存在一个json字典里，真的是够了。。。前20页可以轻易爬取，21页以后需要获取前一页最后一个评论的ID以及已经展示的评论总数。</p><h2 id="包和全局变量"><a href="#包和全局变量" class="headerlink" title="包和全局变量"></a>包和全局变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#时间管理带师</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#网页请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#解析网页</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"></span><br><span class="line"><span class="comment">#统计已经展示的评论数量</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="comment">#请自行登录新浪获取cookie</span></span><br><span class="line">cookie = &#123;&#125;</span><br><span class="line"><span class="comment">#请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;sec-fetch-dest&#x27;</span>:<span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-mode&#x27;</span>:<span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-site&#x27;</span>:<span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;referer&#x27;</span>:<span class="string">&#x27;https://weibo.com/2803301701/J6iwvbK2m?filter=hot&amp;root_comment_id=0&amp;type=comment&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-requested-with&#x27;</span>:<span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#爬取前20页的参数，目前缺少page参数</span></span><br><span class="line">params_1 = &#123;</span><br><span class="line">        <span class="string">&quot;ajwvr&quot;</span>:<span class="number">6</span>,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>:<span class="string">&quot;4515011752798578&quot;</span>,</span><br><span class="line">        <span class="string">&quot;from&quot;</span>:<span class="string">&quot;singleWeiBo&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#爬取21页以后的参数，目前缺少两个参数</span></span><br><span class="line">params_2 = &#123;</span><br><span class="line">        <span class="string">&quot;ajwvr&quot;</span>:<span class="number">6</span>,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>:<span class="string">&quot;4515011752798578&quot;</span>,</span><br><span class="line">        <span class="string">&quot;root_comment_max_id_type&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;root_comment_ext_param&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;filter&quot;</span>:<span class="string">&quot;hot&quot;</span>,</span><br><span class="line">        <span class="string">&quot;filter_tips_before&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;from&quot;</span>:<span class="string">&quot;singleWeiBo&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#评论接口</span></span><br><span class="line">url = <span class="string">&#x27;https://weibo.com/aj/v6/comment/big&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="几个函数"><a href="#几个函数" class="headerlink" title="几个函数"></a>几个函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取毫秒级时间戳</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span>():</span></span><br><span class="line">    cur_time = <span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">    <span class="keyword">return</span> cur_time</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取包含评论的网页标签</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span>(<span class="params">params</span>):</span></span><br><span class="line">    <span class="comment">#请求网页</span></span><br><span class="line">    res = requests.get(url = url,headers = headers,cookies = cookie,params = params)</span><br><span class="line">    <span class="comment">#从json中获取数据</span></span><br><span class="line">    html = res.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;html&#x27;</span>]</span><br><span class="line">    <span class="comment">#解析文本</span></span><br><span class="line">    bf = bs(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment">#找到当前页全部评论并以列表形式返回</span></span><br><span class="line">    WB_texts = bf.find_all(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&#x27;list_li S_line1 clearfix&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> WB_texts</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取20页之前的评论</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_before</span>(<span class="params">page,params</span>):</span></span><br><span class="line">    <span class="comment">#num作为全局变量</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="comment">#补充参数，页数和当前时间</span></span><br><span class="line">    params[<span class="string">&#x27;page&#x27;</span>] = page</span><br><span class="line">    params[<span class="string">&#x27;__rnd&#x27;</span>] = get_time()</span><br><span class="line">    <span class="comment">#获取评论列表</span></span><br><span class="line">    WB_texts = get_html(params)</span><br><span class="line">    <span class="comment">#逐条写入并统计评论数量</span></span><br><span class="line">    <span class="keyword">for</span> WB_text <span class="keyword">in</span> WB_texts:</span><br><span class="line">        <span class="comment">#因为class属性为WB_text的div有两个，所以用try-except来筛选</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f.write(WB_text.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&#x27;WB_text&#x27;</span>).text.strip().split(<span class="string">&#x27;：&#x27;</span>)[<span class="number">1</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第&#123;&#125;页抓取完毕&#x27;</span>.<span class="built_in">format</span>(page))</span><br><span class="line"></span><br><span class="line"><span class="comment">#抓取21页之后的评论</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_after</span>(<span class="params">page</span>):</span></span><br><span class="line">    <span class="comment">#num全局变量</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="comment">#补充参数，第21页暂不需要root_comment_max_id和sum_comment_number</span></span><br><span class="line">    params_2[<span class="string">&#x27;page&#x27;</span>] = page</span><br><span class="line">    params_2[<span class="string">&#x27;__rnd&#x27;</span>] = get_time()</span><br><span class="line">    <span class="comment">#获取评论列表</span></span><br><span class="line">    WB_texts = get_html(params_2)</span><br><span class="line">    <span class="comment">#逐条写入并统计评论数量</span></span><br><span class="line">    <span class="keyword">for</span> WB_text <span class="keyword">in</span> WB_texts:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f.write(WB_text.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&#x27;WB_text&#x27;</span>).text.strip().split(<span class="string">&#x27;：&#x27;</span>)[<span class="number">1</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#尝试设置root_comment_max_id，可能会因爬取速度过快而出现异常，而且会导致后续一直异常</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#获取最后一条评论的comment_id</span></span><br><span class="line">        max_id = <span class="built_in">int</span>(WB_texts[-<span class="number">1</span>].get(<span class="string">&#x27;comment_id&#x27;</span>))</span><br><span class="line">        <span class="comment">#补充参数</span></span><br><span class="line">        params_2[<span class="string">&#x27;root_comment_max_id&#x27;</span>] = max_id</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第&#123;&#125;页抓取完毕&#x27;</span>.<span class="built_in">format</span>(page))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment">#异常原因是当前页根本没有抓到评论</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(WB_texts) == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;第&#123;&#125;页抓取失败&#x27;</span>.<span class="built_in">format</span>(page))</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#补充评论数量参数</span></span><br><span class="line">    params_2[<span class="string">&#x27;sum_comment_number&#x27;</span>] = num</span><br></pre></td></tr></table></figure><h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#创建文本文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;weibo.txt&#x27;</span>,<span class="string">&#x27;wt&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">#抓取120页的评论</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">121</span>):</span><br><span class="line">        <span class="comment">#前20页以第一种方式获取，后面的以另一种方式</span></span><br><span class="line">        <span class="keyword">if</span> page &lt;= <span class="number">20</span>:</span><br><span class="line">            parse_before(page,params=params_1)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parse_after(page)</span><br><span class="line">        <span class="comment">#暂停一秒</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#关闭文件</span></span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>只是粗略写了一下，好多代码可以复用。。懒得优化了。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy框架的自定义配置</title>
      <link href="/2020/12/23/Scrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/12/23/Scrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="多spider"><a href="#多spider" class="headerlink" title="多spider"></a>多spider</h2><p>创建多个spider，需要为每个spider分配不同的管道(不要在settings.py中添加管道)，首先在pipelines.py中定义不同的类，然后修改对应的py文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PythonSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;csdn&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;www.csdn.net&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.csdn.net/nav/python&#x27;</span>]</span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">        <span class="string">&#x27;ITEM_PIPELINES&#x27;</span>: &#123;<span class="string">&#x27;csdnspider.pipelines.csdnspider&#x27;</span>: <span class="number">301</span>&#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JavaSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;www.csdn.net&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.csdn.net/nav/java&#x27;</span>]</span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">        <span class="string">&#x27;ITEM_PIPELINES&#x27;</span>: &#123;<span class="string">&#x27;csdnspider.pipelines.javaspider&#x27;</span>: <span class="number">300</span>&#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>主要是添加custom_settings属性。</p><h2 id="运行多个spider"><a href="#运行多个spider" class="headerlink" title="运行多个spider"></a>运行多个spider</h2><p>在project目录下新建一个commands文件夹（与spiders文件夹同级），在该文件夹下新建crawlall.py文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.commands <span class="keyword">import</span> BaseRunSpiderCommand</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span>(<span class="params">BaseRunSpiderCommand</span>):</span></span><br><span class="line"></span><br><span class="line">    requires_project = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">syntax</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[options] &lt;spider&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">short_desc</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Run all of the spiders&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, args, opts</span>):</span></span><br><span class="line">        <span class="comment"># 获取爬虫列表</span></span><br><span class="line">        spd_loader_list = self.crawler_process.spider_loader.<span class="built_in">list</span>()</span><br><span class="line">        <span class="comment"># 遍历各爬虫</span></span><br><span class="line">        <span class="keyword">for</span> spname <span class="keyword">in</span> spd_loader_list:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在运行的Spider：&quot;</span> + spname)</span><br><span class="line">            self.crawler_process.crawl(spname, **opts.spargs)</span><br><span class="line">        self.crawler_process.start()</span><br></pre></td></tr></table></figure><p>修改settings.py，添加如下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMANDS_MODULE = <span class="string">&#x27;projectname.commands&#x27;</span></span><br></pre></td></tr></table></figure><p>进入命令行，cd到工程目录，输入scrapy -h，能看到crawlall选项，说明成功了。如果不行的话尝试在commands目录下添加一个<code>__init__.py</code>文件。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近的状态</title>
      <link href="/2020/12/15/%E6%9C%80%E8%BF%91%E7%9A%84%E7%8A%B6%E6%80%81/"/>
      <url>/2020/12/15/%E6%9C%80%E8%BF%91%E7%9A%84%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>#失眠<br>不知什么原因，10天前出现失眠，一开始只是中午睡不着，慢慢的晚上也很难入睡，而且越想睡就越睡不着，昨天几乎是一宿没睡，早上起来精神恍惚，却仍然无法入睡，我想，可能需要运动一下，再不行就需要就医了，暂时不敲代码了吧。。</p><h2 id="12月21日"><a href="#12月21日" class="headerlink" title="12月21日"></a>12月21日</h2><p>目前状况好了很多，不知道是小柴胡的功效，还是跑步的原因，也可能我根本就不曾失眠，只是因为空调吹热风，室内太闷而难以入睡，而我对自己睡眠状况过度关注，引起越想睡反而越睡不着。</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python模拟二维码登录百度</title>
      <link href="/2020/12/11/Python%E6%A8%A1%E6%8B%9F%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%99%BB%E5%BD%95%E7%99%BE%E5%BA%A6/"/>
      <url>/2020/12/11/Python%E6%A8%A1%E6%8B%9F%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%99%BB%E5%BD%95%E7%99%BE%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间写了利用BDUSS到达百度首页，这一次尝试使用二维码模拟登录，目前网上能搜到的相关内容基本失效了，但是思路基本不变，无非是百度改了些参数。本文较为复杂，要求对python的requests模块以及Chrome审查元素有一定了解，我不确定自己是否能完全讲明白，讲多少是多少吧，各位看官请坐。</p><h2 id="查找接口"><a href="#查找接口" class="headerlink" title="查找接口"></a>查找接口</h2><h3 id="二维码地址"><a href="#二维码地址" class="headerlink" title="二维码地址"></a>二维码地址</h3><p>打开Chrome浏览器，清理掉baidu.com下的所有cookie，如果没有则忽略。打开百度首页，F12审查元素，在右上角点击登录，切换到二维码登录，可以看到NetWork里面出现了一些相关内容：</p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_1_20201211193517100736.JPG"></p><hr><p>查看getqrcode?lp=pc：</p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_2_20201211193841286015.JPG"></p><hr><p>这里的imgurl代表二维码地址，在浏览器访问一下就能看到，为了获得二维码地址，我们需要向该条目的Request URL发起请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://passport.baidu.com/v2/api/getqrcode?lp=pc&amp;qrloginfrom=pc</span><br></pre></td></tr></table></figure><p>有些小伙伴可能看到Request URL包含有gid、callback等参数，这里并不需要，访问上面的地址就能获得imgurl。</p><h3 id="登录状态"><a href="#登录状态" class="headerlink" title="登录状态"></a>登录状态</h3><p>让页面停滞一会儿，可以看到出现了好多unicast开头的请求，就是用来验证二维码扫描状态的</p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_3_20201211194716683040.JPG"></p><hr><p>未扫描时response如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tangram_guid_1607686170040(&#123;&quot;errno&quot;:1&#125;)</span><br></pre></td></tr></table></figure><p>先分析一下需要的参数：</p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_4_20201211195058726628.JPG"></p><hr><p>channel_id是不是看起来很熟悉？就是imgurl里面的sign，这个参数就搞定了。刷新几次页面，可以看到<code>gid、callback、tt、_</code>这四个参数发生了变化，仔细观察可以发现后面两个是毫秒级时间戳，callback变化的只有后面那串数字，也是毫秒级时间戳，gid等下再说。观察多个unicast请求，发现gid、callback是不变的，可以确定callback是那个默认的字符串加上第一次请求的时间戳，另外两项则是新请求发生时的时间戳，对比相邻的unicast的tt参数，相减得到的数值接近30000，即30s，再细心观察，新的unicast出现时是一个unsafe请求：</p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_5_20201211200333354817.JPG"></p><hr><p>过30s左右会变成正常的Get请求，在浏览器直接访问Request URL也是延时30s得到Response（真的不是你断网了…），也就是说，二维码未被扫描的时候，每30s验证一次状态(二维码被扫描，未点击确定的时候会更新等待时间，也许是5s)，这样的话，在使用requests发送请求时要将timeout设置为30s以上，不然无法正确验证状态。</p><hr><p>获取gid，这个参数在getqrcode?lp=pc请求中就已经出现了，查看js文件：</p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_6_20201211201534005564.JPG"></p><hr><p>打开setChannel对应的js，单击左下角的花括号可以让函数变得有序，按Ctrl+F搜索“gid”，可以看到指向了guideRandom，再搜索guideRandom，得到如下信息：</p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_7_20201211202611865750.JPG"></p><hr><p>需要将其转换为python的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取gid</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guideRandom</span>():</span></span><br><span class="line">    string = <span class="string">&#x27;xxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#x27;</span></span><br><span class="line">    gid = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#下面是根据JavaScript代码写的</span></span><br><span class="line">    <span class="keyword">for</span> z <span class="keyword">in</span> string:</span><br><span class="line">        <span class="comment">#获取0到1的随机数，并乘以16</span></span><br><span class="line">        t = <span class="number">16</span> * random.random()</span><br><span class="line">        <span class="comment">#如果是z是x或者y</span></span><br><span class="line">        <span class="keyword">if</span> z <span class="keyword">in</span> <span class="string">&quot;xy&quot;</span>:</span><br><span class="line">            <span class="comment">#hex将数字转换为十六进制，后面的你肯定能读懂</span></span><br><span class="line">            s = <span class="built_in">hex</span>(<span class="built_in">int</span>(t)) <span class="keyword">if</span> z == <span class="string">&quot;x&quot;</span> <span class="keyword">else</span> <span class="built_in">hex</span>(<span class="number">3</span> &amp; <span class="built_in">int</span>(t) | <span class="number">8</span>)</span><br><span class="line">            <span class="comment">#将十六进制数转换为字符串，删除前面0x</span></span><br><span class="line">            gid += <span class="built_in">str</span>(s).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#不是x或者y则不做处理</span></span><br><span class="line">            gid += z</span><br><span class="line">    <span class="comment">#将字符串转换为大写，返回</span></span><br><span class="line">    <span class="keyword">return</span> gid.upper()</span><br></pre></td></tr></table></figure><p>另外关于callback的函数，可以在‘uni_loginv4_tangram_b55ba1e.js’中搜索‘callback’：</p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_8_20201211203129048733.JPG"></p><hr><p>baidu.id.key是“tangram_guid”，m是时间戳加1，与上面的猜测差不多。检测二维码扫描状态的参数已经分析完毕。</p><h3 id="登录参数"><a href="#登录参数" class="headerlink" title="登录参数"></a>登录参数</h3><p>用百度的app扫描二维码，但不要点确定，可以发现unicast的Response变了：</p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_9_20201211203816193591.JPG"></p><hr><p>errno变为0，而且获取到channel_id，跟imgurl中的sign一致（我这里跟上面不一样是因为刷新了页面），还有一个status，不出意外的话，这个是用来判断用户是否点击确定的，手机端app点击确定，再查看unicast的Response：</p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_11_20201211205330461498.png"></p><hr><p>可以看到status变为0，而且多了个参数”v”，这个有什么用处呢？先放着不管，去看下面这个包：</p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_12_20201211210100388340.png"></p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_13_20201211210142619478.png"></p><hr><p>这里设置了BDUSS、PTOKEN、STOKEN三个cookie，这些就是登录成功的标志，带上这三个cookie可以访问百度的大多数产品。再看看需要的参数：</p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_14_20201211210344110204.png"></p><hr><p>bduss是不是有点眼熟？没错，就是刚才unicast返回的v，而且只有这个参数比较重要，别的要么是时间戳或固定值，就算有几个是变化的（sig、shaOne、callback等），用固定值也没有什么影响。OK，参数解析完毕。</p><hr><p>如果跳转太快抓不到包的话，在开发者工具里面：</p><hr><p><img src="https://www.ljczero.top/media/editor/baidu_10_20201211205721477539.png"></p><hr><p>将网络模式改为Slow 3G(手速比网速快的可以不改)，调整完毕再点击客户端上的确定，Response发生变化时快速点击左上角的小红点停止继续抓包，就不会因为刷新页面丢失抓到的包。</p><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><p>代码分为两部分，第一部分是二维码的获取及展示，第二部分是获取cookie。</p><h3 id="二维码展示"><a href="#二维码展示" class="headerlink" title="二维码展示"></a>二维码展示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将关于二维码的部分封装成类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,imgurl</span>):</span></span><br><span class="line"><span class="comment">#创建一个子线程，用于展示二维码</span></span><br><span class="line"><span class="comment">#如果不创建子线程，在二维码关闭之前程序停滞</span></span><br><span class="line">        self.t = threading.Thread(target = self.get_img)</span><br><span class="line"><span class="comment">#将线程设置为后台运行</span></span><br><span class="line">        self.t.setDaemon(<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#二维码的网页地址</span></span><br><span class="line">        self.imgurl = imgurl</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_img</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment">#访问imgurl，将二维码保存到本地</span></span><br><span class="line">        res = requests.get(url = self.imgurl,headers = headers)</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;baidu.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        f.write(res.content)</span><br><span class="line">        f.close()</span><br><span class="line"><span class="comment">#暂停1秒，不然加载的二维码可能比较模糊</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#Pillow读取二维码</span></span><br><span class="line">        img = Image.<span class="built_in">open</span>(<span class="string">&#x27;baidu.jpg&#x27;</span>)</span><br><span class="line"><span class="comment">#在窗口中显示（此时并没有真的显示，因为子线程还没有启动）</span></span><br><span class="line">        img.show()</span><br><span class="line"><span class="comment">#调用此函数的是python子线程，展示图片的是一个windows进程</span></span><br><span class="line"><span class="comment">#使用psutil获取进程句柄，我们可以在合适的时候将该进程关掉</span></span><br><span class="line">        <span class="keyword">for</span> proc <span class="keyword">in</span> psutil.process_iter():</span><br><span class="line"><span class="comment">#前者是win10的照片查看器，后者是win7的</span></span><br><span class="line"><span class="comment">#如果你的图片默认程序不是照片查看器，那么此处需要修改</span></span><br><span class="line"><span class="comment">#获取方式：打开任意一张图片，任务管理器-性能-资源监视器</span></span><br><span class="line">            <span class="keyword">if</span> proc.name() <span class="keyword">in</span> [<span class="string">&#x27;Microsoft.Photos.exe&#x27;</span>,<span class="string">&#x27;dllhost.exe&#x27;</span>]:</span><br><span class="line">                self.proc = proc</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#启动子线程</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.t.start()</span><br><span class="line">    <span class="comment">#关闭二维码进程</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.proc.kill()</span><br></pre></td></tr></table></figure><h3 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="comment">#初始化变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,login_params,check_params,show</span>):</span></span><br><span class="line"><span class="comment">#Show对象，控制二维码展示和关闭</span></span><br><span class="line">        self.show = show</span><br><span class="line"><span class="comment">#检查二维码扫描状态的URL</span></span><br><span class="line">        self.check_url = <span class="string">&#x27;https://passport.baidu.com/channel/unicast&#x27;</span></span><br><span class="line"><span class="comment">#获取BDUSS等cookie的URL</span></span><br><span class="line">        self.login_url = <span class="string">&#x27;https://passport.baidu.com/v3/login/main/qrbdusslogin&#x27;</span></span><br><span class="line"><span class="comment">#login_url的参数</span></span><br><span class="line">        self.login_params = login_params</span><br><span class="line"><span class="comment">#check_url的参数</span></span><br><span class="line">        self.check_params = check_params</span><br><span class="line"></span><br><span class="line">    <span class="comment">#检查二维码扫描状态</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_status</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment">#启动子线程在窗口展示二维码</span></span><br><span class="line">        self.show.show()</span><br><span class="line"><span class="comment">#将errno和status设定为1</span></span><br><span class="line">        errno = <span class="number">1</span></span><br><span class="line">        status = <span class="number">1</span></span><br><span class="line"><span class="comment">#用于在while循环中关闭windows照片查看器</span></span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line"><span class="comment">#unicast的response不是标准json格式，需要进行正则匹配</span></span><br><span class="line">        pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;(&#123;.*&#125;)&#x27;</span>)</span><br><span class="line"><span class="comment">#开始循环</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="comment">#访问目标地址，将timeout设置为35s</span></span><br><span class="line">            req = requests.get(url = self.check_url,headers = passport_headers,cookies = cookie,params = self.check_params,timeout = <span class="number">35</span>)</span><br><span class="line"><span class="comment">#替换返回值中的不合法字符，以便转换为json格式</span></span><br><span class="line"><span class="comment">#菜如我只能用三个replace......</span></span><br><span class="line">            response = req.text.replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;&quot;&#123;&#x27;</span>,<span class="string">&quot;&#123;&quot;</span>).replace(<span class="string">&#x27;&#125;&quot;&#x27;</span>,<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#如果errno或者status其中一项为1</span></span><br><span class="line">                <span class="keyword">if</span> errno <span class="keyword">or</span> status:</span><br><span class="line"><span class="comment">#将response转换为json格式</span></span><br><span class="line">                    message = json.loads(re.search(pattern,response).group())</span><br><span class="line"><span class="comment">#更新errno</span></span><br><span class="line">                    errno = message[<span class="string">&#x27;errno&#x27;</span>]</span><br><span class="line"><span class="comment">#如果errno变为0（用户扫描二维码），并且照片查看器未关闭</span></span><br><span class="line">                    <span class="keyword">if</span> errno == <span class="number">0</span> <span class="keyword">and</span> flag:</span><br><span class="line"><span class="comment">#关闭照片查看器，将flag设置为False</span></span><br><span class="line">                        self.show.close()</span><br><span class="line">                        flag = <span class="literal">False</span></span><br><span class="line"><span class="comment">#如果errno为0，则更新status值</span></span><br><span class="line">                    <span class="keyword">elif</span> errno == <span class="number">0</span>:</span><br><span class="line">                        status = message[<span class="string">&#x27;channel_v&#x27;</span>][<span class="string">&#x27;status&#x27;</span>]</span><br><span class="line"><span class="comment">#如果errno和status都为0，则补充login_params的bduss字段，结束循环</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> errno <span class="keyword">and</span> <span class="keyword">not</span> status:</span><br><span class="line">                    message = json.loads(re.search(pattern,response).group())</span><br><span class="line">                    self.login_params[<span class="string">&#x27;bduss&#x27;</span>] = message[<span class="string">&#x27;channel_v&#x27;</span>][<span class="string">&#x27;v&#x27;</span>]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"><span class="comment">#更新check_paramas中两个关于时间的参数</span></span><br><span class="line">                self.check_params[<span class="string">&#x27;tt&#x27;</span>] = get_time()</span><br><span class="line">                self.check_params[<span class="string">&#x27;_&#x27;</span>] = self.check_params[<span class="string">&#x27;tt&#x27;</span>] + <span class="number">2</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#获取cookie</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment">#带上完整参数请求登录地址</span></span><br><span class="line">        login_r = requests.get(self.login_url, headers=headers, params=self.login_params,cookies = cookie)</span><br><span class="line"><span class="comment">#将BDUSS、PTOKEN、STOKEN写入cookie</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> login_r.cookies.keys():</span><br><span class="line">            cookie[key] = login_r.cookies[key]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登陆成功，正在保存cookie&#x27;</span>)</span><br><span class="line"><span class="comment">#将cookie保存到本地</span></span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;auth_cookie.txt&#x27;</span>,<span class="string">&#x27;wt&#x27;</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>(cookie))</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;保存完毕&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Fri Dec 11 08:36:50 2020</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: ljc545w</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#用到的包</span></span><br><span class="line"><span class="comment">#注：requests和Pillow为第三方包，需要使用pip命令安装</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#时间管理带师</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#获取随机数</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#正则、json字典</span></span><br><span class="line"><span class="keyword">import</span> re,json</span><br><span class="line"><span class="comment">#Pillow</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment">#线程</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="comment">#进程</span></span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"><span class="comment">#请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">passport_headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;passport.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#定义一个空字典用于保存cookie</span></span><br><span class="line">cookie = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取毫秒级时间戳</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span>():</span></span><br><span class="line">    cur_time = <span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">    <span class="keyword">return</span> cur_time</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取gid</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guideRandom</span>():</span></span><br><span class="line">    string = <span class="string">&#x27;xxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#x27;</span></span><br><span class="line">    gid = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#下面是根据JavaScript代码写的</span></span><br><span class="line">    <span class="keyword">for</span> z <span class="keyword">in</span> string:</span><br><span class="line">        <span class="comment">#获取0到1的随机数，并乘以16</span></span><br><span class="line">        t = <span class="number">16</span> * random.random()</span><br><span class="line">        <span class="comment">#如果是z是x或者y</span></span><br><span class="line">        <span class="keyword">if</span> z <span class="keyword">in</span> <span class="string">&quot;xy&quot;</span>:</span><br><span class="line">            <span class="comment">#hex将数字转换为十六进制，后面的你肯定能读懂</span></span><br><span class="line">            s = <span class="built_in">hex</span>(<span class="built_in">int</span>(t)) <span class="keyword">if</span> z == <span class="string">&quot;x&quot;</span> <span class="keyword">else</span> <span class="built_in">hex</span>(<span class="number">3</span> &amp; <span class="built_in">int</span>(t) | <span class="number">8</span>)</span><br><span class="line">            <span class="comment">#将十六进制数转换为字符串，删除前面0x</span></span><br><span class="line">            gid += <span class="built_in">str</span>(s).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#不是x或者y则不做处理</span></span><br><span class="line">            gid += z</span><br><span class="line">    <span class="comment">#将字符串转换为大写，返回</span></span><br><span class="line">    <span class="keyword">return</span> gid.upper()</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取必要参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetParams</span>():</span></span><br><span class="line">    <span class="comment">#这个是百度首页</span></span><br><span class="line">    Base_url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">    <span class="comment">#先获取一些固定的cookie，如BAIDUID、PSTM等</span></span><br><span class="line">    Base_res = requests.get(url = Base_url,headers = headers)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> Base_res.cookies.keys():</span><br><span class="line">        <span class="comment">#这里有一定概率引发异常，可能是因为某个cookie为空，预处理一下</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cookie[key] = Base_res.cookies[key]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#用于登录的参数（这里还没有加入bduss）</span></span><br><span class="line">    login_params = &#123;</span><br><span class="line">        <span class="comment">#获取时间戳</span></span><br><span class="line">    <span class="string">&#x27;v&#x27;</span>: get_time(),</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span>: <span class="string">&#x27;https://www.baidu.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;loginVersion&#x27;</span>: <span class="string">&#x27;v4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;qrcode&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;tpl&#x27;</span>: <span class="string">&#x27;mn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;apiver&#x27;</span>: <span class="string">&#x27;v3&#x27;</span>,</span><br><span class="line">        <span class="comment">#获取时间戳</span></span><br><span class="line">    <span class="string">&#x27;tt&#x27;</span>: get_time(),</span><br><span class="line">    <span class="string">&#x27;traceid&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">        <span class="comment">#这里也是时间戳，不过是秒级，所以直接调用time方法，然后取整</span></span><br><span class="line">        <span class="string">&#x27;time&#x27;</span>: <span class="built_in">round</span>(time.time()),</span><br><span class="line">        <span class="string">&#x27;alg&#x27;</span>:<span class="string">&#x27;v3&#x27;</span>,</span><br><span class="line">        <span class="comment">#下面四个参数虽然会变化，但是写死也没什么影响，实测不写都可以</span></span><br><span class="line">        <span class="string">&#x27;sig&#x27;</span>: <span class="string">&#x27;SXFidmJBL3NzS0lNaERoL1pzckVxaFdSS0lrSDQ5SUNPWFdjUDRhVE5rZkVOMEpzN2FpZExBTDRFejEwOFBvdw==&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;elapsed&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;shaOne&#x27;</span>: <span class="string">&#x27;0011f17de7b0a1b99aa70a6f1ea881c14d404379&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;callback&#x27;</span>: <span class="string">&#x27;bd__cbs__1sgowp&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#获取二维码地址的url</span></span><br><span class="line">    pass_url = <span class="string">&#x27;https://passport.baidu.com/v2/api/getqrcode?lp=pc&amp;qrloginfrom=pc&#x27;</span></span><br><span class="line">    <span class="comment">#这里返回的是标准json格式，所以可以调用json方法而无需使用text方法</span></span><br><span class="line">    response = requests.get(url = pass_url,headers = headers).json()</span><br><span class="line">    <span class="comment">#获取channel_id</span></span><br><span class="line">    channel_id = response[<span class="string">&#x27;sign&#x27;</span>]</span><br><span class="line">    <span class="comment">#拼接callback</span></span><br><span class="line">    callback = <span class="string">&quot;tangram_guid_&quot;</span> + <span class="built_in">str</span>(get_time() + <span class="number">1</span>)</span><br><span class="line">    <span class="comment">#延迟0.5s,callback的时间戳与tt的时间戳相差在500左右</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment">#用于检查二维码扫描状态的参数</span></span><br><span class="line">    check_params = &#123;</span><br><span class="line">        <span class="string">&quot;channel_id&quot;</span>:channel_id,</span><br><span class="line">        <span class="string">&quot;tpl&quot;</span>:<span class="string">&quot;mn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gid&quot;</span>:guideRandom(),</span><br><span class="line">        <span class="string">&quot;callback&quot;</span>:callback,</span><br><span class="line">        <span class="string">&quot;apiver&quot;</span>:<span class="string">&quot;v3&quot;</span>,</span><br><span class="line">        <span class="comment">#获取时间戳</span></span><br><span class="line">        <span class="string">&quot;tt&quot;</span>:get_time(),</span><br><span class="line">        <span class="comment">#加不加2应该都没什么影响</span></span><br><span class="line">        <span class="string">&quot;_&quot;</span>:get_time() + <span class="number">2</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">#拼接出完整的imgurl</span></span><br><span class="line">    imgurl = <span class="string">&quot;https://&quot;</span> + response[<span class="string">&#x27;imgurl&#x27;</span>].replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment">#返回三个变量</span></span><br><span class="line">    <span class="keyword">return</span> imgurl,login_params,check_params</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,imgurl</span>):</span></span><br><span class="line">        self.t = threading.Thread(target = self.get_img)</span><br><span class="line">        self.t.setDaemon(<span class="literal">True</span>)</span><br><span class="line">        self.imgurl = imgurl</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_img</span>(<span class="params">self</span>):</span></span><br><span class="line">        res = requests.get(url = self.imgurl,headers = headers)</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;baidu.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        f.write(res.content)</span><br><span class="line">        f.close()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(<span class="string">&#x27;baidu.jpg&#x27;</span>)</span><br><span class="line">        img.show()</span><br><span class="line">        <span class="keyword">for</span> proc <span class="keyword">in</span> psutil.process_iter():</span><br><span class="line">            <span class="keyword">if</span> proc.name() <span class="keyword">in</span> [<span class="string">&#x27;Microsoft.Photos.exe&#x27;</span>,<span class="string">&#x27;dllhost.exe&#x27;</span>]:</span><br><span class="line">                self.proc = proc</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.t.start()</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.proc.kill()</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,login_params,check_params,show</span>):</span></span><br><span class="line">        self.show = show</span><br><span class="line">        self.check_url = <span class="string">&#x27;https://passport.baidu.com/channel/unicast&#x27;</span></span><br><span class="line">        self.login_url = <span class="string">&#x27;https://passport.baidu.com/v3/login/main/qrbdusslogin&#x27;</span></span><br><span class="line">        self.login_params = login_params</span><br><span class="line">        self.check_params = check_params</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_status</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.show.show()</span><br><span class="line">        errno = <span class="number">1</span></span><br><span class="line">        status = <span class="number">1</span></span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;(&#123;.*&#125;)&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            req = requests.get(url = self.check_url,headers = passport_headers,cookies = cookie,params = self.check_params,timeout = <span class="number">35</span>)</span><br><span class="line">            response = req.text.replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;&quot;&#123;&#x27;</span>,<span class="string">&quot;&#123;&quot;</span>).replace(<span class="string">&#x27;&#125;&quot;&#x27;</span>,<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> errno <span class="keyword">or</span> status:</span><br><span class="line">                    message = json.loads(re.search(pattern,response).group())</span><br><span class="line">                    errno = message[<span class="string">&#x27;errno&#x27;</span>]</span><br><span class="line">                    <span class="keyword">if</span> errno == <span class="number">0</span> <span class="keyword">and</span> flag:</span><br><span class="line">                        self.show.close()</span><br><span class="line">                        flag = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">elif</span> errno == <span class="number">0</span>:</span><br><span class="line">                        status = message[<span class="string">&#x27;channel_v&#x27;</span>][<span class="string">&#x27;status&#x27;</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> errno <span class="keyword">and</span> <span class="keyword">not</span> status:</span><br><span class="line">                    message = json.loads(re.search(pattern,response).group())</span><br><span class="line">                    self.login_params[<span class="string">&#x27;bduss&#x27;</span>] = message[<span class="string">&#x27;channel_v&#x27;</span>][<span class="string">&#x27;v&#x27;</span>]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                self.check_params[<span class="string">&#x27;tt&#x27;</span>] = get_time()</span><br><span class="line">                self.check_params[<span class="string">&#x27;_&#x27;</span>] = self.check_params[<span class="string">&#x27;tt&#x27;</span>] + <span class="number">2</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">        login_r = requests.get(self.login_url, headers=headers, params=self.login_params,cookies = cookie)</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> login_r.cookies.keys():</span><br><span class="line">            cookie[key] = login_r.cookies[key]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登陆成功，正在保存cookie&#x27;</span>)</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;auth_cookie.txt&#x27;</span>,<span class="string">&#x27;wt&#x27;</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>(cookie))</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;保存完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不想继续使用获取的cookie，可以使用这个函数      </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    <span class="comment">#百度退出登录的url</span></span><br><span class="line">    logout_url = <span class="string">&#x27;https://passport.baidu.com/?logout&#x27;</span></span><br><span class="line">    <span class="comment">#从文本中读取cookie</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;auth_cookie.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    logout_cookie = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="comment">#转换为json格式。注意！！！如果文本中是单引号，要将其替换为双引号</span></span><br><span class="line">    logout_cookie = json.loads(logout_cookie.replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;\&quot;&quot;</span>))</span><br><span class="line">    <span class="comment">#发起post请求，原本的cookie将失去作用</span></span><br><span class="line">    requests.post(url = logout_url,headers = headers,cookies = logout_cookie)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已退出登录&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="comment">#获取三个重要变量</span></span><br><span class="line">    imgurl,login_params,check_params = GetParams()</span><br><span class="line">    <span class="comment">#声明一个对象控制二维码的显示</span></span><br><span class="line">    show = Show(imgurl)</span><br><span class="line">    <span class="comment">#将两个参数和show传递给Login类，获取用于控制登录的对象</span></span><br><span class="line">    login = Login(login_params,check_params,show)</span><br><span class="line">    <span class="comment">#调用类中的方法，检查二维码扫描状态</span></span><br><span class="line">    login.check_status()</span><br><span class="line">    <span class="comment">#调用类中方法获取cookie</span></span><br><span class="line">    login.login()</span><br><span class="line"></span><br><span class="line"><span class="comment">#入口函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#logout()</span></span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>花了整整一天，暂时把百度的二维码登录搞明白了，这篇文章中的代码可能不久就会失效，我大概是不会再更新，不，是肯定不会。</p><hr><p>这是爬虫小白对二维码登录的一次尝试，如有不足之处，恳请各位大佬批评指正。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python与C++混合编程</title>
      <link href="/2020/12/09/Python%E4%B8%8EC++%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/12/09/Python%E4%B8%8EC++%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天在CSDN看到某个算法（约瑟夫生死者游戏）的三种写法，分别是C、C++、Python，我分别实现后产生了一种想法，既然Python被称为胶水语言，那么应该可以把Python移植到C++中执行，说干就干！</p><h2 id="三种版本"><a href="#三种版本" class="headerlink" title="三种版本"></a>三种版本</h2><p>C语言版(ysfc.cpp)，在vs2019中使用cpp后缀</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ysfc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">31</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">31</span>)</span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">15</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b[i - <span class="number">1</span>] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span> (j != <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">b[i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">a[i - <span class="number">1</span>] = j;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d号下船了\n&quot;</span>, i);</span><br><span class="line">i++;</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++版(ysfcpp.cpp)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ysfcpp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">31</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">31</span>)</span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">15</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b[i - <span class="number">1</span>] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span> (j != <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">b[i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">a[i - <span class="number">1</span>] = j;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;号下船了&quot;</span> &lt;&lt; endl;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">c++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python版(ysf.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#预先将arg设置为None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ysf</span>(<span class="params">arg = <span class="literal">None</span></span>):</span></span><br><span class="line">    people = [<span class="number">0</span>]*<span class="number">30</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    check = <span class="number">0</span></span><br><span class="line">    p = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">31</span>:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">31</span>:</span><br><span class="line">            i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> p == <span class="number">15</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> people[i - <span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                check += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> check == <span class="number">9</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;第%d号下船了&quot;</span> % i)</span><br><span class="line">                    people[i - <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">                    check = <span class="number">0</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                    p += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">    <span class="comment">#是否传递返回值可以根据需要修改</span></span><br><span class="line">    <span class="keyword">if</span> arg:</span><br><span class="line">        <span class="keyword">return</span> arg</span><br></pre></td></tr></table></figure><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>注意修改属性时的平台和配置要与调试窗口保持一致，即Release对应Release，x64对应x64（Debug与x86同理）。</p><hr><p>新建vs2019解决方案，在“属性-&gt;VC++目录”中添加包含目录和库目录，将Python安装目录下的include目录添加到包含目录，再把python下libs目录添加到库目录（Debug模式下需要python3x_d.lib,一般情况下libs目录下是没有的，修改python3x.lib名字即可）。</p><hr><p>如果要向python函数传递中文参数，需要在C++项目中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> execution_character_set(<span class="meta-string">&quot;utf-8&quot;</span>)</span></span><br></pre></td></tr></table></figure><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//引用Python头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Python.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ysfc</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ysfcpp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C语言版&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">ysfc</span>();</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C++版&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">ysfcpp</span>();</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//初始化Python</span></span><br><span class="line"><span class="built_in">Py_Initialize</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Py_IsInitialized</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;初始化失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//释放Python</span></span><br><span class="line"><span class="built_in">Py_Finalize</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三个python类</span></span><br><span class="line">PyObject* pMoudle;</span><br><span class="line">PyObject* pFunc = <span class="literal">NULL</span>;</span><br><span class="line">PyObject* pArg = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//导入sys包</span></span><br><span class="line"><span class="built_in">PyRun_SimpleString</span>(<span class="string">&quot;import sys&quot;</span>);</span><br><span class="line"><span class="comment">//添加路径（与cpp文件路径一致）</span></span><br><span class="line"><span class="built_in">PyRun_SimpleString</span>(<span class="string">&quot;sys.path.append(&#x27;./&#x27;)&quot;</span>);</span><br><span class="line"><span class="comment">//加载python文件，括号内为文件名，不需要扩展名</span></span><br><span class="line">pMoudle = <span class="built_in">PyImport_ImportModule</span>(<span class="string">&quot;ysf&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!pMoudle)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;py文件导入失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Py_Finalize</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//加载py文件中的函数</span></span><br><span class="line">pFunc = <span class="built_in">PyObject_GetAttrString</span>(pMoudle, <span class="string">&quot;ysf&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!pFunc)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;函数导入失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Py_Finalize</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Python版&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">调用函数，第二个参数为向python函数传递的参数</span></span><br><span class="line"><span class="comment">必须为Pyobject类型，不需要参数时设置为NULL</span></span><br><span class="line"><span class="comment">如果要传递参数或接收返回值，可以参考后面注释掉的部分</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">PyEval_CallObject</span>(pFunc,(PyObject*)<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//定义一个传递返回值的C++变量</span></span><br><span class="line"><span class="comment">char* result;</span></span><br><span class="line"><span class="comment">//把要传递给python函数的参数从char类型转变为python的str类型</span></span><br><span class="line"><span class="comment">PyObject* pyParams = Py_BuildValue(&quot;(s)&quot;,&quot;helllo world!&quot;);</span></span><br><span class="line"><span class="comment">//调用函数，用Pyobject变量接收返回值</span></span><br><span class="line"><span class="comment">pArg = PyEval_CallObject(pFunc,pyParams);</span></span><br><span class="line"><span class="comment">//将返回值转变为C++的char类型，并传递给result</span></span><br><span class="line"><span class="comment">PyArg_Parse(pArg, &quot;s&quot;, &amp;result);</span></span><br><span class="line"><span class="comment">//在C++中输出返回值</span></span><br><span class="line"><span class="comment">cout &lt;&lt; result &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//以cmd命令调用（即命令行中调用python文件）</span></span><br><span class="line"><span class="comment">//system(&quot;python ysf.py&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>在实际应用中，混合编程会有一定的用处，本文简单的阐述用法。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django生成secret_key</title>
      <link href="/2020/12/09/Django%E7%94%9F%E6%88%90secret_key/"/>
      <url>/2020/12/09/Django%E7%94%9F%E6%88%90secret_key/</url>
      
        <content type="html"><![CDATA[<p>可以使用如下步骤生成新的secret_key:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动虚拟环境</span></span><br><span class="line">source env/<span class="built_in">bin</span>/activate</span><br><span class="line"><span class="comment">#进入Django shell</span></span><br><span class="line">python3 manage.py shell</span><br><span class="line"><span class="comment">#加载utils模块</span></span><br><span class="line"><span class="keyword">from</span> django.core.management <span class="keyword">import</span> utils</span><br><span class="line"><span class="comment">#生成密钥</span></span><br><span class="line">utils.get_random_secret_key()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python模拟登录百度贴吧（requests）</title>
      <link href="/2020/12/03/Python%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%EF%BC%88requests%EF%BC%89/"/>
      <url>/2020/12/03/Python%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%EF%BC%88requests%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这两天本打算做两件事，其一是仅利用BDUSS实现模拟登录百度，再进一步请求到贴吧首页，其二是关于朴素贝叶斯分类器的，拉普拉斯平滑是很重要的内容，需要对文章进行补充。但第一件事就花了两天，而且得到的结果与预期并不相符，暂且记录一下过程。拉普拉斯平滑近期会补充。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>前几天写了贴吧自动灌水脚本，是用完整的cookie请求的，而我想用最少的信息做成这件事，把cookie精简再精简，是否可以只利用某一字段就实现呢？目前未探究这个问题，而选择了另外一个方向，我尝试使用Cookie中的BDUSS字段请求贴吧首页，并不能返回登录状态的信息，退而求其次，请求百度首页，这一次在返回的信息中找到了用户名，也就是说，登录成功了。</p><hr><p>接下来打开开发者工具，把网页从百度首页转向贴吧首页，可以看到有三次302重定向，重定向的过程中生成了一个贴吧需要的“令牌”，将其写进了贴吧cookie中，这个“令牌”是STOKEN字段，用包含BDUSS和STOKEN两个字段的cookie重新请求贴吧首页，登录成功，返回的信息中有我关注的贴吧。</p><hr><p>那这个STOKEN字段是怎么生成的呢？使用浏览器登录百度（非贴吧首页）的时候，百度会把请求发送到passport.baidu.com，即百度的账号中心，它会生成PTOKEN和STOKEN，而获取STOKEN的关键就是PTOKEN，我猜PTOKEN是md5加密的32位小写密文，明文的规则没有在百度的js文件中找到，这种东西应该被不起眼的变量名伪装保护了。好了，啰里啰嗦一大段，并没有图片可以放上来….</p><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><p>用到的包和全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用到的包</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志相关</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"><span class="comment">#请求头</span></span><br><span class="line">headers_sign = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#从这个接口中获取关注的吧</span></span><br><span class="line">Attention_URL = <span class="string">&quot;http://tieba.baidu.com/f/like/mylike&quot;</span></span><br><span class="line"><span class="comment">#利用此接口进行签到</span></span><br><span class="line">sign_url = <span class="string">&#x27;https://tieba.baidu.com/sign/add&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>登录模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line"><span class="comment">#贴吧首页</span></span><br><span class="line">    url = <span class="string">&quot;https://tieba.baidu.com/index.html&quot;</span></span><br><span class="line">    <span class="comment">#在这里写上你的BDUSS</span></span><br><span class="line">    BDUSS = [</span><br><span class="line">        <span class="string">&quot;&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line"><span class="comment">#在这里写上PTOKEN</span></span><br><span class="line">    PTOKEN = [</span><br><span class="line">        <span class="string">&quot;&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    <span class="comment">#构建Cookie</span></span><br><span class="line">    login_cookie = &#123;</span><br><span class="line">        <span class="string">&quot;BDUSS&quot;</span>: BDUSS[<span class="number">0</span>],</span><br><span class="line">        <span class="string">&quot;PTOKEN&quot;</span>: PTOKEN[<span class="number">0</span>],</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#向贴吧首页发起GET请求，并禁止重定向</span></span><br><span class="line">    req = requests.get(url = url,headers = headers_sign,cookies = login_cookie,allow_redirects = <span class="literal">False</span>)</span><br><span class="line"><span class="comment">#从反馈的信息中对Cookie进行补齐</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> req.cookies.keys():</span><br><span class="line">        login_cookie[key] = req.cookies[key]</span><br><span class="line">    <span class="comment">#虽然上面禁止了重定向，但是status_code仍然是302，如果是200那说明BDUSS过期了</span></span><br><span class="line">    <span class="keyword">if</span> req.status_code == <span class="number">302</span>:</span><br><span class="line"><span class="comment">#重定向的目标地址</span></span><br><span class="line">        pass_url = req.headers[<span class="string">&#x27;Location&#x27;</span>]</span><br><span class="line"><span class="comment">#print(pass_url)  #可以取消注释看看重定向的地址</span></span><br><span class="line"><span class="comment">#对目标地址发起请求，这里仍然会重定向</span></span><br><span class="line">        req_pass = requests.get(url = pass_url,headers = headers_sign,cookies = login_cookie,allow_redirects = <span class="literal">False</span>)</span><br><span class="line"><span class="comment">#获取重定向的地址</span></span><br><span class="line">        stoken_url = req_pass.headers[<span class="string">&#x27;Location&#x27;</span>]</span><br><span class="line"><span class="comment">#print(stoken_url)</span></span><br><span class="line"><span class="comment">#访问目标地址，获取STOKEN</span></span><br><span class="line">        req_stoken = requests.get(url = stoken_url,headers = headers_sign,cookies = login_cookie,allow_redirects = <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#将STOKEN写入login_cookie</span></span><br><span class="line">            login_cookie[<span class="string">&quot;STOKEN&quot;</span>] = req_stoken.cookies[<span class="string">&#x27;STOKEN&#x27;</span>]</span><br><span class="line">            <span class="comment">#print(login_cookie[&#x27;STOKEN&#x27;])</span></span><br><span class="line"><span class="comment">#带上login_cookie去签到</span></span><br><span class="line">            run(login_cookie)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(req.status_code)</span><br></pre></td></tr></table></figure><p>其他函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#签到模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_sign</span>(<span class="params">kw,Cookie</span>):</span></span><br><span class="line"><span class="comment">#post请求需要的参数，kw指吧名</span></span><br><span class="line">    data = &#123;<span class="string">&quot;ie&quot;</span>:<span class="string">&quot;utf-8&quot;</span>,<span class="string">&quot;kw&quot;</span>:kw&#125;</span><br><span class="line"><span class="comment">#带上参数对接口发起post请求，并将response处理成json格式</span></span><br><span class="line">    res = requests.post(url=sign_url, data=data, cookies = Cookie,timeout=<span class="number">5</span>).json()</span><br><span class="line"><span class="comment">#检查签到状态</span></span><br><span class="line">    <span class="keyword">if</span> res[<span class="string">&#x27;no&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">        logger.info(kw + <span class="string">&#x27;,&#x27;</span> + <span class="string">&#x27;签到成功！&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logger.info(kw + <span class="string">&#x27;,&#x27;</span> + res[<span class="string">&#x27;error&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取关注的吧</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_favorite</span>(<span class="params">Cookie</span>):</span></span><br><span class="line"><span class="comment">#Attention_URL算是一个接口，在i贴吧查看关注的吧时可以看到</span></span><br><span class="line">    req = requests.get(url = Attention_URL,headers=headers_sign,cookies = Cookie)</span><br><span class="line"><span class="comment">#调用bs4解析网页，需要预先安装lxml模块</span></span><br><span class="line">    html = bs(req.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#从网页中检索关注的吧</span></span><br><span class="line">    tieba_lists = html.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&quot;forum_table&quot;</span>).find_all(<span class="string">&quot;tr&quot;</span>)[<span class="number">1</span>:]</span><br><span class="line">    <span class="comment">#将关注的吧存入列表并返回</span></span><br><span class="line">myfavorite = []</span><br><span class="line">    <span class="keyword">for</span> tieba <span class="keyword">in</span> tieba_lists:</span><br><span class="line">        myfavorite.append(tieba.find(<span class="string">&#x27;a&#x27;</span>,class_ = <span class="literal">None</span>).get(<span class="string">&#x27;title&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> myfavorite</span><br><span class="line"></span><br><span class="line"><span class="comment">#控制函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">Cookie</span>):</span></span><br><span class="line"><span class="comment">#获取关注的吧</span></span><br><span class="line">    favorites = get_favorite(Cookie)</span><br><span class="line"><span class="comment">#逐一签到，并停顿0.1秒</span></span><br><span class="line">    <span class="keyword">for</span> favorite <span class="keyword">in</span> favorites:</span><br><span class="line">        client_sign(favorite,Cookie)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><p>入口函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure><h2 id="信息获取"><a href="#信息获取" class="headerlink" title="信息获取"></a>信息获取</h2><p>关于BDUSS和PTOKEN的获取，首先打开Chrome，清理掉baidu.com下的所有cookie，重新登录百度。转到谷歌设置-隐私设置和安全性-cookie及其他网站数据-查看所有cookie和网站数据，分别检索passport.baidu.com和baidu.com，可以找到PTOKEN，STOKEN以及BDUSS。也可以从开发者工具里面获取，但是获取PTOKEN需要请求一次贴吧首页，从重定向的地址里面找。</p><hr><p>经过多次尝试，我觉得STOKEN是由PTOKEN和BDUSS共同决定的，后面两者不变它就不变。BDUSS是根据用户信息得到的，这个算是用户标识符，虽然它也是可变的，但只要不退出登录，很久都不会过期。PTOKEN也是可变的，跟BDUSS一样，退出登录的时候就会过期，所谓退出登录是指在百度首页点击退出登录按钮，或者使用以下方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数提供BDUSS就可以了</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>(<span class="params">bduss = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> bduss:</span><br><span class="line">        cookie = &#123;<span class="string">&#x27;BDUSS&#x27;</span>:bduss&#125;</span><br><span class="line">        url = <span class="string">&#x27;https://passport.baidu.com/?logout&amp;u=&#x27;</span></span><br><span class="line">        requests.post(url = url,headers = headers_sign,cookies = cookie)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;该BDUSS已作废&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>如果能找到PTOKEN的生成规则我会再来更新的！</p><h2 id="第一次更新"><a href="#第一次更新" class="headerlink" title="第一次更新"></a>第一次更新</h2><p>对单独贴吧签到的话，只需要BDUSS就够了，获取关注的吧还是需要STOKEN</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers_sign = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">sign_url = <span class="string">&#x27;https://tieba.baidu.com/sign/add&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_sign</span>(<span class="params">kw,Cookie</span>):</span></span><br><span class="line">    data = &#123;<span class="string">&quot;ie&quot;</span>:<span class="string">&quot;utf-8&quot;</span>,<span class="string">&quot;kw&quot;</span>:kw&#125;</span><br><span class="line">    res = requests.post(url=sign_url, data=data, cookies = Cookie,timeout=<span class="number">5</span>).json()</span><br><span class="line">    <span class="keyword">if</span> res[<span class="string">&#x27;no&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(kw + <span class="string">&#x27;,&#x27;</span> + <span class="string">&#x27;签到成功！&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(kw + <span class="string">&#x27;,&#x27;</span> + res[<span class="string">&#x27;error&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    kw = <span class="string">&#x27;&#x27;</span><span class="comment">#吧名</span></span><br><span class="line">    Cookie = &#123;<span class="string">&#x27;BDUSS&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125; <span class="comment">#写入你的BDUSS</span></span><br><span class="line">    client_sign(kw,Cookie)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朴素贝叶斯分类器</title>
      <link href="/2020/12/01/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8/"/>
      <url>/2020/12/01/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>无聊的时候总要找点事情做，今天就搞了搞朴素贝叶斯分类，训练样本集为playtennis，此案例是我大学期间在一本名为《数据挖掘》的书中看到的，比较简单，当时是用matlab做的，根据算法原理写了好多for循环，今天用python试了试，原本以为sklearn里面会有对应的方法，实际上也确实有，但测试集包含的数据量太少，训练得到的模型精度非常低，所以根据朴素贝叶斯分类的原理写了代码，在此记录一下。</p><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>该算法主要依据贝叶斯公式，是一种有监督的机器学习，算法思想真的很朴素！具体参考下面链接。</p><hr><ol><li><a href="https://zhuanlan.zhihu.com/p/26262151" title="带你理解朴素贝叶斯【知乎】">带你理解朴素贝叶斯【知乎】</a></li><li><a href="https://baike.baidu.com/item/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8/22657525?fr=aladdin" title="朴素贝叶斯分类器【百度百科】">朴素贝叶斯分类器【百度百科】</a></li></ol><hr><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>|Outlook|Temperature|Humidity|Wind|PlayTennis|<br>| :————: |<br>|Sunny|Hot|High|Weak|No|<br>|Sunny|Hot|High|Strong|No|<br>|Overcast|Hot|High|Weak|Yes|<br>|Rain|Mild|High|Weak|Yes|<br>|Rain|Cool|Normal|Weak|Yes|<br>|Rain|Cool|Normal|Strong|No|<br>|Overcast|Cool|Normal|Strong|Yes|<br>|Sunny|Mild|High|Weak|No|<br>|Sunny|Cool|Normal|Weak|Yes|<br>|Rain|Mild|Normal|Weak|Yes|<br>|Sunny|Mild|Normal|Strong|Yes|<br>|Overcast|Mild|High|Strong|Yes|<br>|Overcast|Hot|Normal|Weak|Yes|<br>|Rain|Mild|High|Strong|No|</p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#表格处理模块</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#用于统计各分类指标出现的次数</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br></pre></td></tr></table></figure><h2 id="清洗数据"><a href="#清洗数据" class="headerlink" title="清洗数据"></a>清洗数据</h2><p>即从样本集中读取分类结果对应分类指标的频数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#df是一个pandas对象，读取了训练样本集</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Info</span>(<span class="params">df</span>):</span></span><br><span class="line"><span class="comment">#获取df索引</span></span><br><span class="line">    index = df.columns</span><br><span class="line"><span class="comment">#计算各分类结果(df的最后一列)的频数，这返回的是一个Counter字典</span></span><br><span class="line">    Category = Counter(df[index[-<span class="number">1</span>]])</span><br><span class="line"><span class="comment">#预保存数据的空字典</span></span><br><span class="line">    content = &#123;&#125;</span><br><span class="line"><span class="comment">#统计每一个分类结果，key1代表某个分类结果</span></span><br><span class="line">    <span class="keyword">for</span> key1 <span class="keyword">in</span> Category.keys():</span><br><span class="line"><span class="comment">#字典的次级仍然是字典，在本例中通过字典读取数据比较方便</span></span><br><span class="line">        Cat_dict = &#123;&#125;</span><br><span class="line"><span class="comment">#key2代表df的某个索引，但不包括最后一列</span></span><br><span class="line">        <span class="keyword">for</span> key2 <span class="keyword">in</span> index[<span class="number">0</span>:-<span class="number">1</span>]:</span><br><span class="line"><span class="comment">#从df中筛选出结果为key1的切片，并找到索引为key2的列，统计其频数并转为普通字典</span></span><br><span class="line">            Cat_dict[key2] = <span class="built_in">dict</span>(Counter(df[key2][df[index[-<span class="number">1</span>]] == key1]))</span><br><span class="line"><span class="comment">#为字典添加一个键值对，键为分类结果，值为分类结果对应的各分类指标的频数</span></span><br><span class="line">        content[key1] = Cat_dict</span><br><span class="line"><span class="comment">#返回统计完成的数据和分类结果</span></span><br><span class="line">    <span class="keyword">return</span> content,Category</span><br></pre></td></tr></table></figure><p>返回的content字典是这样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;No&#x27;: &#123;&#x27;Outlook&#x27;: &#123;&#x27;Sunny&#x27;: <span class="number">3</span>, &#x27;Rain&#x27;: <span class="number">2</span>&#125;, &#x27;Temperature&#x27;: &#123;&#x27;Hot&#x27;: <span class="number">2</span>, &#x27;Cool&#x27;: <span class="number">1</span>, &#x27;Mild&#x27;: <span class="number">2</span>&#125;, &#x27;Humidity&#x27;: &#123;&#x27;High&#x27;: <span class="number">4</span>, &#x27;Normal&#x27;: <span class="number">1</span>&#125;, &#x27;Wind&#x27;: &#123;&#x27;Weak&#x27;: <span class="number">2</span>, &#x27;Strong&#x27;: <span class="number">3</span>&#125;&#125;, &#x27;Yes&#x27;: &#123;&#x27;Outlook&#x27;: &#123;&#x27;Overcast&#x27;: <span class="number">4</span>, &#x27;Rain&#x27;: <span class="number">3</span>, &#x27;Sunny&#x27;: <span class="number">2</span>&#125;, &#x27;Temperature&#x27;: &#123;&#x27;Hot&#x27;: <span class="number">2</span>, &#x27;Mild&#x27;: <span class="number">4</span>, &#x27;Cool&#x27;: <span class="number">3</span>&#125;, &#x27;Humidity&#x27;: &#123;&#x27;High&#x27;: <span class="number">3</span>, &#x27;Normal&#x27;: <span class="number">6</span>&#125;, &#x27;Wind&#x27;: &#123;&#x27;Weak&#x27;: <span class="number">6</span>, &#x27;Strong&#x27;: <span class="number">3</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="各分类概率"><a href="#各分类概率" class="headerlink" title="各分类概率"></a>各分类概率</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test为预分类的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span>(<span class="params">test,content,Category,df</span>):</span></span><br><span class="line">    index = df.columns</span><br><span class="line"><span class="comment">#训练样本的数量</span></span><br><span class="line">    total_columns = <span class="built_in">len</span>(df)</span><br><span class="line"><span class="comment">#用于保存各分类结果对应的概率</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line"><span class="comment">#计算每个分类结果的概率</span></span><br><span class="line">    <span class="keyword">for</span> key1 <span class="keyword">in</span> content.keys():</span><br><span class="line"><span class="comment">#该分类结果占样本总数的比重</span></span><br><span class="line">        p_key1 = Category[key1] / total_columns</span><br><span class="line"><span class="comment">#t是z对应的一个指标，根据上面的content来说，z是Outlook，t就可能是Sunny，以此类推</span></span><br><span class="line">        <span class="keyword">for</span> t,z <span class="keyword">in</span> <span class="built_in">zip</span>(test,index[<span class="number">0</span>:-<span class="number">1</span>]):</span><br><span class="line"><span class="comment">#如果z中包含t，则计算t在该分类结果下的概率，否则设为0</span></span><br><span class="line">            <span class="keyword">if</span> t <span class="keyword">in</span> content[key1][z].keys():</span><br><span class="line">                p_t = content[key1][z][t] / Category[key1]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p_t = <span class="number">0</span></span><br><span class="line"><span class="comment">#概率相乘</span></span><br><span class="line">            p_key1 *= p_t</span><br><span class="line"><span class="comment">#保存一个‘结果’-‘概率’键值对</span></span><br><span class="line">        result[key1] = p_key1</span><br><span class="line"><span class="comment">#返回包含所有概率的字典</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="计算误判率"><a href="#计算误判率" class="headerlink" title="计算误判率"></a>计算误判率</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Err_Probability</span>(<span class="params">df</span>):</span></span><br><span class="line"><span class="comment">#误判的数量，初始设为0</span></span><br><span class="line">    err = <span class="number">0</span></span><br><span class="line">    content,Category = Get_Info(df)</span><br><span class="line">    <span class="comment">#对每一个样本进行检验</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line"><span class="comment">#获取当前循环中的样本</span></span><br><span class="line">        test = df.loc[i]</span><br><span class="line"><span class="comment">#调用前述方法获取分类结果</span></span><br><span class="line">        result = classify(test[<span class="number">0</span>:-<span class="number">1</span>],content,Category,df)</span><br><span class="line"><span class="comment">#最大概率对应的结果</span></span><br><span class="line">        pre = <span class="built_in">max</span>(result,key = result.get)</span><br><span class="line"><span class="comment">#如果预测与实际不符，则误判数量加1</span></span><br><span class="line">        <span class="keyword">if</span> pre != test[-<span class="number">1</span>]:</span><br><span class="line">            err += <span class="number">1</span></span><br><span class="line">        <span class="comment">#print(&#x27;预测:&#x27;,pre,&#x27;实际:&#x27;,test[-1])</span></span><br><span class="line"><span class="comment">#输出误判率</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;误判率: %.4f&#x27;</span> % (err / <span class="built_in">len</span>(df)))</span><br></pre></td></tr></table></figure><h2 id="单样本预测"><a href="#单样本预测" class="headerlink" title="单样本预测"></a>单样本预测</h2><p>这里着实没什么好说的。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">test,df</span>):</span></span><br><span class="line">    content,Category = Get_Info(df)</span><br><span class="line">    result = classify(test,content,Category,df)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;分类结果:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(test,<span class="built_in">max</span>(result,key = result.get)))</span><br></pre></td></tr></table></figure><h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="comment">#从Excel中读取数据</span></span><br><span class="line">    df = pd.read_excel(<span class="string">&#x27;playtennis.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment">#预分类数据</span></span><br><span class="line">    test = [<span class="string">&#x27;Rain&#x27;</span>, <span class="string">&#x27;Mild&#x27;</span>, <span class="string">&#x27;High&#x27;</span>, <span class="string">&#x27;Strong&#x27;</span>]</span><br><span class="line"><span class="comment">#误判率</span></span><br><span class="line">    Err_Probability(df)</span><br><span class="line"><span class="comment">#预测结果</span></span><br><span class="line">    predict(test, df)</span><br></pre></td></tr></table></figure><p>最后输出是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误判率: <span class="number">0.0714</span></span><br><span class="line">[<span class="string">&#x27;Rain&#x27;</span>, <span class="string">&#x27;Mild&#x27;</span>, <span class="string">&#x27;High&#x27;</span>, <span class="string">&#x27;Strong&#x27;</span>]分类结果:No</span><br></pre></td></tr></table></figure><h2 id="拉普拉斯平滑"><a href="#拉普拉斯平滑" class="headerlink" title="拉普拉斯平滑"></a>拉普拉斯平滑</h2><p><a href="https://zhuanlan.zhihu.com/p/26329951?utm_medium=social&utm_source=qq" title="知乎：朴素贝叶斯中的拉普拉斯平滑">知乎：朴素贝叶斯中的拉普拉斯平滑</a></p><hr><p>修改classify函数（为每个类别下的所有划分加1）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Laplace</span>(<span class="params">test,content,Category,df</span>):</span></span><br><span class="line">    index = df.columns</span><br><span class="line">    total_columns = <span class="built_in">len</span>(df)</span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key1 <span class="keyword">in</span> content.keys():</span><br><span class="line">        p_key1 = (Category[key1] + <span class="number">1</span>) / (total_columns + <span class="built_in">len</span>(Category))</span><br><span class="line">        <span class="keyword">for</span> t,z <span class="keyword">in</span> <span class="built_in">zip</span>(test,index[<span class="number">0</span>:-<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> t <span class="keyword">in</span> content[key1][z].keys():</span><br><span class="line">                p_t = (content[key1][z][t] + <span class="number">1</span>) / (Category[key1] + <span class="built_in">len</span>(content[key1][z]))</span><br><span class="line">            <span class="keyword">elif</span> t <span class="keyword">in</span> df[z].tolist():</span><br><span class="line">                p_t = <span class="number">1</span> / (Category[key1] + <span class="built_in">len</span>(content[key1][z]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p_t = <span class="number">1</span> / (Category[key1] + <span class="built_in">len</span>(content[key1][z]) + <span class="number">1</span>)</span><br><span class="line">            p_key1 *= p_t</span><br><span class="line">        result[key1] = p_key1</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="Matlab代码"><a href="#Matlab代码" class="headerlink" title="Matlab代码"></a>Matlab代码</h2><p>感觉这都不能称之为代码，需要手动把分类数据转换为数组，再看看朴素贝叶斯分类的原理，怎么都能做出来的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">clc;</span><br><span class="line">clear;</span><br><span class="line">n=0;y=0;</span><br><span class="line">a1=0;a2=0;</span><br><span class="line">b1=0;b2=0;</span><br><span class="line">c1=0;c2=0;</span><br><span class="line">d1=0;d2=0;</span><br><span class="line">data=[</span><br><span class="line">    1,1,1,1,2;</span><br><span class="line">    1,1,1,2,2;</span><br><span class="line">    2,1,1,1,1;</span><br><span class="line">    3,2,1,1,1;</span><br><span class="line">    3,3,2,1,1;</span><br><span class="line">    3,3,2,2,2;</span><br><span class="line">    2,3,2,2,1;</span><br><span class="line">    1,2,1,1,2;</span><br><span class="line">    1,3,2,1,1;</span><br><span class="line">    3,2,2,1,1;</span><br><span class="line">    1,2,2,2,1;</span><br><span class="line">    2,2,1,2,1;</span><br><span class="line">    2,1,2,1,1;</span><br><span class="line">    3,2,1,2,2</span><br><span class="line">    ];</span><br><span class="line">[e,f]=size(data);</span><br><span class="line">test=[1,1,1,2];</span><br><span class="line">for i=1:e</span><br><span class="line">    if data(i,5)==1</span><br><span class="line">        y=y+1;</span><br><span class="line">    else</span><br><span class="line">        n=n+1;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">for i=1:e</span><br><span class="line">    if data(i,1)==test(1)&amp;&amp;data(i,f)==1</span><br><span class="line">        a1=a1+1;</span><br><span class="line">    elseif data(i,1)==test(1)&amp;&amp;data(i,f)==2</span><br><span class="line">        a2=a2+1;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">for i=1:e</span><br><span class="line">    if data(i,2)==test(2)&amp;&amp;data(i,f)==1</span><br><span class="line">        b1=b1+1;</span><br><span class="line">    elseif data(i,2)==test(2)&amp;&amp;data(i,f)==2</span><br><span class="line">        b2=b2+1;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">for i=1:e</span><br><span class="line">    if data(i,3)==test(3)&amp;&amp;data(i,f)==1</span><br><span class="line">        c1=c1+1;</span><br><span class="line">    elseif data(i,3)==test(3)&amp;&amp;data(i,f)==2</span><br><span class="line">        c2=c2+1;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">for i=1:e</span><br><span class="line">    if data(i,4)==test(4)&amp;&amp;data(i,f)==1</span><br><span class="line">        d1=d1+1;</span><br><span class="line">    elseif data(i,4)==test(4)&amp;&amp;data(i,f)==2</span><br><span class="line">        d2=d2+1;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">Y=(y/e)*(a1/y)*(b1/y)*(c1/y)*(d1/y);</span><br><span class="line">N=(n/e)*(a2/n)*(b2/n)*(c2/n)*(d2/n);</span><br><span class="line">if Y&gt;N</span><br><span class="line">    disp(&#x27;Playtennis=YES!&#x27;);</span><br><span class="line">else</span><br><span class="line">    disp(&#x27;Playtennis=NO!&#x27;);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>折腾来折腾去算是搞掂了，但是我还要继续折腾，生命不息折腾不止！看知乎的文章似乎还需要拉普拉斯平滑，其实我也不知道这是个什么东西，回头我瞅瞅。</p><hr><p>拉普拉斯平滑的代码已更新，背后的数学原理还请自行学习。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写了一个贴吧自动灌水脚本</title>
      <link href="/2020/11/30/%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA%E8%B4%B4%E5%90%A7%E8%87%AA%E5%8A%A8%E7%81%8C%E6%B0%B4%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/11/30/%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA%E8%B4%B4%E5%90%A7%E8%87%AA%E5%8A%A8%E7%81%8C%E6%B0%B4%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>无聊的时候总想搞点事情，自己没有什么思路，打开csdn看到别人的自动评论脚本，我想了想，不如搞一个贴吧自动灌水脚本。</p><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><p>用到的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#发起网页请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#这个是配置文件，自己写的，主要保存cookies还有灌水的内容</span></span><br><span class="line"><span class="keyword">import</span> comment_conf <span class="keyword">as</span> settings</span><br><span class="line"><span class="comment">#时间、随机、正则表达式</span></span><br><span class="line"><span class="keyword">import</span> time,random,re</span><br><span class="line"><span class="comment">#解析网页</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br></pre></td></tr></table></figure><p>浏览器标识符(请求头):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这个用来抓取已有的楼层信息，不需要的话删掉</span></span><br><span class="line">headers_get = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#发起评论的post请求时要带上这个请求头，这里暂时缺少一个属性，获取帖子总页数后补齐</span></span><br><span class="line">headers_post = &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/javascript, */*; q=0.01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;tieba.baidu.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;https://tieba.baidu.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36&quot;</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>获取帖子已有楼层总页数，并抓取楼层内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#url为帖子的网页地址，tid为帖子的唯一标识符，即url后面那串数字，get_page为一个布尔值，这里默认为False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comment</span>(<span class="params">url,tid,get_page=<span class="literal">False</span></span>):</span></span><br><span class="line">    <span class="comment">#请求网页并编辑正则表达式，用于匹配帖子的总页数</span></span><br><span class="line">    req = requests.get(url = url,headers = headers_get)</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;pn=(.*?)&quot;&gt;尾页&#x27;</span>)</span><br><span class="line">    <span class="comment">#当前请求的页数为最后一页时，无法匹配到page_num，所以捕捉一下异常</span></span><br><span class="line">    <span class="comment">#其实总页数只需要获取一次就够了，这里懒得改了</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#查找帖子总页数，有时候会找到两个，任取一个即可</span></span><br><span class="line">        page_num = <span class="built_in">int</span>(re.findall(pattern,req.text)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        page_num = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#如果get_page指定为True，则完善headers属性，并返回总页数</span></span><br><span class="line">    <span class="keyword">if</span> get_page:</span><br><span class="line">        headers_post[<span class="string">&#x27;Referer&#x27;</span>] = <span class="string">&#x27;https://tieba.baidu.com/p/&#123;&#125;?pn=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(tid,page_num)</span><br><span class="line">        <span class="keyword">return</span> page_num</span><br><span class="line">    <span class="comment">#否则的话输出第一页的楼层信息，并返回总页数</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        html = bs(req.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        comments = html.find_all(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&#x27;d_post_content j_d_post_content&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> comment <span class="keyword">in</span> comments:</span><br><span class="line">            <span class="built_in">print</span>(comment.text.strip())</span><br><span class="line">        <span class="keyword">return</span> page_num</span><br></pre></td></tr></table></figure><p>发起评论：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tid为帖子标识符，content为将要回复的内容，Cookie为你的登录Cookie</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publish_comment</span>(<span class="params">tid,content,Cookie</span>):</span></span><br><span class="line">    <span class="comment">#贴吧回复接口</span></span><br><span class="line">    url = <span class="string">&quot;https://tieba.baidu.com/f/commit/post/add&quot;</span></span><br><span class="line">    <span class="comment">#tbs是重要属性，等下会讲如何获取</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;tid&#x27;</span>: tid,</span><br><span class="line">        <span class="string">&quot;tbs&quot;</span>: <span class="string">&quot;b***********&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;content&#x27;</span>: content,</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">#发起回复</span></span><br><span class="line">    req = requests.post(url,data = data,cookies = Cookie,headers = headers_post)</span><br><span class="line">    req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="comment">#检查是否成功</span></span><br><span class="line">    req = req.json()</span><br><span class="line">    <span class="keyword">if</span> req[<span class="string">&#x27;err_code&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;发布成功&#x27;</span>.<span class="built_in">format</span>(content))</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(req)</span><br></pre></td></tr></table></figure><p>主要函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里也指定一个布尔值，为True则发起回复，否则获取楼层信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">publish:<span class="built_in">bool</span> = <span class="literal">False</span></span>):</span></span><br><span class="line">    <span class="comment">#帖子的网页地址，/p/后面的“*”替换为帖子的tid</span></span><br><span class="line">    url = <span class="string">&quot;https://tieba.baidu.com/p/*********&quot;</span></span><br><span class="line">    <span class="comment">#将tid分离出来</span></span><br><span class="line">    tid = url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#publish为False时获取楼层信息</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> publish:</span><br><span class="line"><span class="comment">#捕捉第一页时顺便获取总页数</span></span><br><span class="line">        page_num = get_comment(url = url,tid = tid)</span><br><span class="line"><span class="comment">#如果总页数大于等于2才有继续执行的必要</span></span><br><span class="line">        <span class="keyword">if</span> page_num &gt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,page_num + <span class="number">1</span>):</span><br><span class="line"><span class="comment">#拼接当前页的url</span></span><br><span class="line">                url = <span class="string">&quot;https://tieba.baidu.com/p/&#123;&#125;?pn=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(tid,i)</span><br><span class="line"><span class="comment">#获取当前页楼层信息</span></span><br><span class="line">                get_comment(url = url,tid = tid)</span><br><span class="line">    <span class="comment">#publish为True时则进行灌水</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#也获取一下总页数把，虽然这里用不到</span></span><br><span class="line">        page_num = get_comment(url = url,get_page = <span class="literal">True</span>,tid = tid)</span><br><span class="line"><span class="comment">#根据需求修改循环的次数，这里是回复10次</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"><span class="comment">#我回复的内容是从一个列表里面随机选择的，可以根据需要自定义</span></span><br><span class="line">            content = random.choice(settings.data[<span class="string">&#x27;data&#x27;</span>])       </span><br><span class="line">            publish_comment(tid = tid,content = content,Cookie = settings.Cookie_Baidu)</span><br></pre></td></tr></table></figure><p>入口函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="comment">#如果获取楼层信息，不需要给定参数</span></span><br><span class="line">    <span class="comment">#run()</span></span><br><span class="line"><span class="comment">#发起灌水则要将参数指定为True</span></span><br><span class="line">    run(publish = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="配置文件参考"><a href="#配置文件参考" class="headerlink" title="配置文件参考"></a>配置文件参考</h2><p>评论模板参考的别人的，想必是csdn一键三连的模板。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要在这里补齐你的cookie</span></span><br><span class="line">Cookie_Baidu = &#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">        <span class="string">&quot;data&quot;</span>:[</span><br><span class="line">                <span class="string">&quot;写的很不错，感谢大神的分享！&quot;</span>,<span class="string">&quot;感谢大佬分享，很详细。&quot;</span>,<span class="string">&quot;学到了，支持!&quot;</span>,<span class="string">&quot;点赞支持一下，原创不容易，深有体会。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;博主，可以加你联系方式沟通交流吗？&quot;</span>,<span class="string">&quot;大佬的文章，行云流水，字字珠玑，已关注收藏。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;学到了，收藏一波~&quot;</span>,<span class="string">&quot;很不错分享～进步的路上一起努力！也期待您的点赞支持!&quot;</span>,</span><br><span class="line">                <span class="string">&quot;博主写的非常清晰，对我很有帮助，谢谢，方便可以互相关注。共同学习~&quot;</span>,</span><br><span class="line">                <span class="string">&quot;总结的不错。可以可以。很强。继续加油~&quot;</span>,<span class="string">&quot;这篇文章很不错，值得一看~&quot;</span>,</span><br><span class="line">                <span class="string">&quot;文章很赞，作者辛苦了!&quot;</span>,<span class="string">&quot;学到了，非常值得一看。&quot;</span>,<span class="string">&quot;走心好文，必须收藏！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;啥都不说了，请收下我的膝盖！&quot;</span>,<span class="string">&quot;太赞了！666666&quot;</span>,<span class="string">&quot;大佬，我准备跟你混了！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;佩服，佩服，一篇绝世好文！&quot;</span>,<span class="string">&quot;厉害了！大佬就是大佬!&quot;</span>,<span class="string">&quot;给大佬递茶~&quot;</span>,<span class="string">&quot;看完这个后刷新了我对技术的认知!&quot;</span>,</span><br><span class="line">                <span class="string">&quot;技术懂得人很多，但懂得分享的人少之又少，支持大佬!&quot;</span>,<span class="string">&quot;大佬，我要拜你为师！&quot;</span>,<span class="string">&quot;很棒呀，学习啦，谢谢分享！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;太优秀了！老铁~&quot;</span>,<span class="string">&quot;真棒！茅塞顿开的感觉。&quot;</span>,<span class="string">&quot;爱了爱了，干货满满，已收藏。&quot;</span>,<span class="string">&quot;看来我还有好长的技术路要走啊！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;大佬可否认识一下~&quot;</span>,<span class="string">&quot;点赞支持一下，原创不容易，深有体会。&quot;</span>,<span class="string">&quot;太实用了，准备一会试试。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;大佬出品，必属精品~&quot;</span>,<span class="string">&quot;一般不评论的，看到这感到非常的认同。&quot;</span>,<span class="string">&quot;由浅入深，适合有基础的技术人员。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;在CSDN学到了很多知识，真心希望CSDN越来越来好！&quot;</span>,<span class="string">&quot;比较简单，适合小白。&quot;</span>,<span class="string">&quot;分析的很到位，学到了很多，大赞！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;写的这么好，建议付费！&quot;</span>,<span class="string">&quot;写的不错，一起加油！&quot;</span>,<span class="string">&quot;支持博主，支持CSDN！&quot;</span>,<span class="string">&quot;大佬的文章一直是我坚持写作的动力。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;帮助很大，拒绝白嫖，点赞打赏走一波~&quot;</span>,<span class="string">&quot;最近也在学这个，博文真的写的挺好，感觉很有用~&quot;</span>,<span class="string">&quot;原创不易，继续加油，已收藏。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;大佬写的太棒了！支持多更！&quot;</span>,<span class="string">&quot;深有感触，请问可以转载么？&quot;</span>,<span class="string">&quot;这位仁兄高见，着实让人敬佩!&quot;</span>,<span class="string">&quot;太精辟了！竖起我的大拇指！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;都是博主辛苦创作，我来支持一下，奥利给！&quot;</span>,<span class="string">&quot;为了我的爱马仕，冲冲冲！&quot;</span>,<span class="string">&quot;活到老学到老，支持原创！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;刚入行，特别需要这样的文章滋养，强烈推荐！&quot;</span>,<span class="string">&quot;大佬的思考维度让人醍醐灌顶，牛皮PLUS！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;进我的收藏夹吧~&quot;</span>,<span class="string">&quot;老铁，你是吃代码长大的吗？&quot;</span>,<span class="string">&quot;如此详细，付费也会支持！&quot;</span>,<span class="string">&quot;学起来，头秃的那种~&quot;</span>,</span><br><span class="line">                <span class="string">&quot;好文，鉴定完毕！&quot;</span>,<span class="string">&quot;博主真是开发界的杠把子啊！&quot;</span>,<span class="string">&quot;文章非常有用，让我受益匪浅！&quot;</span>,<span class="string">&quot;看君一席文，胜读十年书！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;反手就是一个赞！&quot;</span>,<span class="string">&quot;先占个坑，慢慢看。&quot;</span>,<span class="string">&quot;代码之路任重道远，愿跟博主努力习之。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;大佬辛苦了，难道您就是那天赋异禀之人？您必是时代的弄潮儿~&quot;</span>,<span class="string">&quot;在最美的年华，做最好的自己，加油！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;看了你的文章,内心的仰慕之情油然而生,赶紧给大佬点个赞!&quot;</span>,<span class="string">&quot;很不错的文章，学到东西了！&quot;</span>,<span class="string">&quot;感谢博主分享，学到不少东西！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;好文！希望博主以后多多分享哈！&quot;</span>,<span class="string">&quot;君之妙笔，令鄙不及，佩服佩服！&quot;</span>,<span class="string">&quot;大佬的文章如行云流水,一气呵成,读后如醍醐灌顶,令我茅塞顿开~&quot;</span>,</span><br><span class="line">                <span class="string">&quot;学习的道路上一起进步，也期待你的关注与支持！&quot;</span>,<span class="string">&quot;简单易懂，化繁为简！大师已登峰造极！&quot;</span>,<span class="string">&quot;大佬的文章令我如痴如醉，请受小弟一拜~&quot;</span>,</span><br><span class="line">                <span class="string">&quot;放弃不难，但坚持一定很酷！&quot;</span>,<span class="string">&quot;文采四溢，大佬这是被耽搁的文学家啊！&quot;</span>,<span class="string">&quot;看三遍也看不够的好文，mark~&quot;</span>,<span class="string">&quot;最近一直在找相关的资料，这文章出现得真及时！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;写的很详细，学习到很多，感谢大佬！&quot;</span>,<span class="string">&quot;文绉绉的程序大佬最帅了！&quot;</span>,<span class="string">&quot;博主不光能写的一手好代码，还能写的一手好文章。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;大佬一出手，精品果然有~&quot;</span>,<span class="string">&quot;写的不错，果断收藏!&quot;</span>,<span class="string">&quot;感谢博主分享，讲的挺不错，希望后面有更多的文章。&quot;</span>,<span class="string">&quot;大佬666，看了之后受益很大。&quot;</span>,<span class="string">&quot;哇，好棒啊，崇拜的小眼神~&quot;</span>,</span><br><span class="line">                <span class="string">&quot;大佬写的太好了！&quot;</span>,<span class="string">&quot;大佬写的很好，手动点赞！&quot;</span>,<span class="string">&quot;大佬,看了你的文章,内心的仰慕之情油然而生,赶紧给大佬点个赞!&quot;</span>,</span><br><span class="line">                <span class="string">&quot;大佬的文章让我受益匪浅，如痴如醉，以后的日子还希望能够得到大佬的谆谆指点！&quot;</span>,<span class="string">&quot;学到了，点赞支持，一起加油！&quot;</span>,<span class="string">&quot;大佬的文章让我受益颇多，手动给大佬点赞！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;写的不错，just code it !&quot;</span>,<span class="string">&quot;优秀优秀，必须给个大大的赞！&quot;</span>,<span class="string">&quot;爱了爱了，得之我幸。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;看完大佬的文章，我的心情竟是久久不能平静。正如老子所云：大音希声，大象无形。我现在终于明白我缺乏的是什么了。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;感谢博主分享，讲的挺不错，希望后面有更多的文章，可以互关哦~&quot;</span>,<span class="string">&quot;大佬牛逼！&quot;</span>,<span class="string">&quot;哇，好棒啊，崇拜的小眼神 ，欢迎回赞，回评哦~~~&quot;</span>,</span><br><span class="line">                <span class="string">&quot;学到了，点赞支持，一起加油 (ง •̀o•́)ง (ง •̀o•́)ง&quot;</span>,<span class="string">&quot;自己每次写文章都要好多个小时，有时一整天，看到这样的文章忍不住点个赞&quot;</span>,<span class="string">&quot;感谢分享，对我这个菜鸡来说很友好。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;支持博主，文章干净利落。不像其他很多人写篇文章里面都是一些公众号二维码啥的。&quot;</span>,<span class="string">&quot;特别喜欢博主的写作风格，支持一波。&quot;</span>,<span class="string">&quot;下班回家看到博主文章更新，学到了。&quot;</span>,<span class="string">&quot;慕名而来，大佬你真的惊艳到我了！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;抛开吸引人的标题，博主开发的精神值得学习。&quot;</span>,<span class="string">&quot;大佬666，获益匪浅，灵感如泉涌般一发不可收拾！&quot;</span>,<span class="string">&quot;原创不易，继续加油，已收藏。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;写的不错，学习了，学习的道路上一起进步，也期待你的关注与支持！&quot;</span>,<span class="string">&quot;内容写的很好，期待多更！&quot;</span>,<span class="string">&quot;放弃不难，但坚持一定很酷！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;不错 本来准备自己总结一下，比我的全面。&quot;</span>,<span class="string">&quot;写的不错，顶个贴，点个赞，嘿嘿！&quot;</span>,<span class="string">&quot;博主解释的很全面，学到了。&quot;</span>,<span class="string">&quot;大佬，看了之后受益很大。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;大佬,看了你的文章,内心的仰慕之情油然而生,赶紧给大佬点个赞!&quot;</span>,<span class="string">&quot;写的挺不错的，继续加油哦！&quot;</span>,<span class="string">&quot;自己每次写文章都要好多个小时，有时一整天，看到这样的文章忍不住点个赞。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;这么好的文章，如果将来我再也看不到了，那我该怎么办？直到我毫不犹豫地把大佬的这篇文章收藏了，我内心的那种激动才逐渐平静下来。&quot;</span>,<span class="string">&quot;感觉文章思路挺清晰的~&quot;</span>,<span class="string">&quot;学到了，点赞支持，一起加油~&quot;</span>,</span><br><span class="line">                <span class="string">&quot;哇，好棒啊，崇拜的小眼神！&quot;</span>,<span class="string">&quot;感谢分享，开源是我们开发人员共同的目标，互惠互利。&quot;</span>,<span class="string">&quot;nice，赞一个！&quot;</span>,<span class="string">&quot;博主解释的很全面，学到了。&quot;</span>,<span class="string">&quot;这篇文章有东西的。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;写的不错，学习了，学习的道路上一起进步，也期待你的关注与支持！&quot;</span>,<span class="string">&quot;这篇文章很励志，也有点适合我。&quot;</span>,<span class="string">&quot;首次看博，第一个留言就给博主了，很不错&quot;</span>,<span class="string">&quot;我会认真研读的,谢谢大佬,辛苦辛苦!&quot;</span>,</span><br><span class="line">                <span class="string">&quot;很不错分享～进步的路上一起努力！也期待您的关注和点赞。&quot;</span>,<span class="string">&quot;膜拜大佬的技术,来我博客指点江山吧！&quot;</span>,<span class="string">&quot;写的不错 共勉~，最近也在开始写博客。大佬们来翻牌啊！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;博主写的很详细，作为小白的我，都能看得懂，谢谢分享！&quot;</span>,<span class="string">&quot;写的好好哦，我也在写博客，看了你的文章发现自己还有很多需要学习的地方，大佬写的很nice！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;博主写的非常好，有理论有例子，非常容易看懂，感谢博主！&quot;</span>,<span class="string">&quot;写得太齐全了，对于初学计算机网络的人说很有用，值得赞一下。&quot;</span>,<span class="string">&quot;还是蛮不错的，引导初学者了解基本的。&quot;</span>,</span><br><span class="line">                <span class="string">&quot;同样是程序员，为何你能如此秀！&quot;</span>,<span class="string">&quot;大佬的文章让我受益颇多！&quot;</span>,<span class="string">&quot;写的不错，学习了，学习的道路上一起进步，也期待你的关注与支持！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;博主写的非常清晰，对我很有帮助，谢谢，方便可以加个关注。共同学习！&quot;</span>,<span class="string">&quot;学到了，学到了,给大佬点赞！&quot;</span>,<span class="string">&quot;已关注，质量很高的博文！&quot;</span>]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="获取cookie和tbs"><a href="#获取cookie和tbs" class="headerlink" title="获取cookie和tbs"></a>获取cookie和tbs</h2><p>首先打开贴吧，登录，然后随便找一个帖子，F12打开开发者工具-&gt;NetWork-&gt;All，此时应该什么都没有，接下来发起一次回复，会出来一个add项目，点击可以看到Request-URL，就是贴吧提供的评论接口，往下翻，可以看到Request Headers和Form Data，Cookie和tbs就藏在这里。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>可能这样手动获取cookie和tbs还是比较low，如果我能实现提供账号密码就自动灌水的话再来修改。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python+OpenCV调整视频分辨率</title>
      <link href="/2020/11/27/Python+OpenCV%E8%B0%83%E6%95%B4%E8%A7%86%E9%A2%91%E5%88%86%E8%BE%A8%E7%8E%87/"/>
      <url>/2020/11/27/Python+OpenCV%E8%B0%83%E6%95%B4%E8%A7%86%E9%A2%91%E5%88%86%E8%BE%A8%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天帮老哥处理视频的时候发现分辨率不一致，需要处理一下，可以借助python+opencv来实现，很方便。</p><h2 id="获取视频信息"><a href="#获取视频信息" class="headerlink" title="获取视频信息"></a>获取视频信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment">#加载视频</span></span><br><span class="line">videoCapture = cv2.VideoCapture(<span class="string">&#x27;video.mp4&#x27;</span>)</span><br><span class="line"><span class="comment">#读取视频fps(帧率)</span></span><br><span class="line">fps = videoCapture.get(cv2.CAP_PROP_FPS)</span><br><span class="line"><span class="comment">#读取视频的宽度</span></span><br><span class="line">Frame_Width = videoCapture.get(cv2.CAP_PROP_FRAME_WIDTH)</span><br><span class="line"><span class="comment">#读取视频的高度</span></span><br><span class="line">Frame_Height = videoCapture.get(cv2.CAP_PROP_FRAME_HEIGHT)</span><br><span class="line"><span class="comment">#读取视频总帧数</span></span><br><span class="line">FrameNumber = videoCapture.get(cv2.CAP_PROP_FRAME_COUNT)</span><br><span class="line"><span class="comment">#获取视频时长，单位为秒</span></span><br><span class="line">video_time = FrameNumber / fps</span><br><span class="line"><span class="comment">#输出信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;time:&#123;&#125;s\nfps:&#123;&#125;\nWidth:&#123;&#125;\nHeight:&#123;&#125;\nNumber:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(video_time,fps,Frame_Width,FrameHeight,FrameNumber))</span><br></pre></td></tr></table></figure><h2 id="更改帧率"><a href="#更改帧率" class="headerlink" title="更改帧率"></a>更改帧率</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">videoCapture = cv2.VideoCapture(<span class="string">&#x27;video.mp4&#x27;</span>)</span><br><span class="line"><span class="comment">#获取原视频帧率</span></span><br><span class="line">fps = videoCapture.get(cv2.CAP_PROP_FPS)</span><br><span class="line"><span class="comment">#读取视频总帧数</span></span><br><span class="line">FrameNumber = videoCapture.get(cv2.CAP_PROP_FRAME_COUNT)</span><br><span class="line"><span class="comment">#预保存的分辨率</span></span><br><span class="line">size = (<span class="number">1920</span>, <span class="number">1080</span>)</span><br><span class="line"><span class="comment">#创建videoWriter对象</span></span><br><span class="line">videoWriter = cv2.VideoWriter(<span class="string">&#x27;video_opencv.mp4&#x27;</span>, cv2.VideoWriter_fourcc(<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;D&#x27;</span>), fps, size)</span><br><span class="line"><span class="comment">#对每一帧进行处理</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(FrameNumber)):</span><br><span class="line">    <span class="comment">#逐帧读取</span></span><br><span class="line">    success, frame = videoCapture.read()</span><br><span class="line">    <span class="keyword">if</span> success:</span><br><span class="line">        <span class="comment">#利用resize方法处理分辨率并写入videoWriter对象，这里的大小要跟上面的size保持一致</span></span><br><span class="line">        frame = cv2.resize(frame, (<span class="number">1920</span>, <span class="number">1080</span>))</span><br><span class="line">        videoWriter.write(frame)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#释放对象，不然可能无法在外部打开</span></span><br><span class="line">videoWriter.release()</span><br></pre></td></tr></table></figure><h2 id="合并音频"><a href="#合并音频" class="headerlink" title="合并音频"></a>合并音频</h2><p>opencv处理过的视频是无声的，我们可以用moviepy模块进行混流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> VideoFileClip,AudioFileClip</span><br><span class="line"><span class="comment">#读取原视频和处理过的视频</span></span><br><span class="line">video1 = VideoFileClip(<span class="string">&#x27;video.mp4&#x27;</span>)</span><br><span class="line">video2 = VideoFileClip(<span class="string">&#x27;video_opencv.mp4&#x27;</span>)</span><br><span class="line"><span class="comment">#从原视频获取声音</span></span><br><span class="line">audio = video1.audio   <span class="comment">#.volumex(0.5)</span></span><br><span class="line"><span class="comment">#为处理过的视频添加声音</span></span><br><span class="line">new_video = video2.set_audio(audio)</span><br><span class="line"><span class="comment">#保存新视频</span></span><br><span class="line">new_video.to_videofile(<span class="string">&#x27;new_video.mp4&#x27;</span>,remove_temp = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>以上，权当笔记。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬取新闻直播间快讯</title>
      <link href="/2020/11/26/python%E7%88%AC%E5%8F%96%E6%96%B0%E9%97%BB%E7%9B%B4%E6%92%AD%E9%97%B4%E5%BF%AB%E8%AE%AF/"/>
      <url>/2020/11/26/python%E7%88%AC%E5%8F%96%E6%96%B0%E9%97%BB%E7%9B%B4%E6%92%AD%E9%97%B4%E5%BF%AB%E8%AE%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天上班的时候老哥问我能不能把cctv的视频下载下来，本着能播放就能下载的原则，我打开了F12。。。。回归正题，想获得完整的视频下载地址是有些难度的，不过把所有的视频流按顺序写进同一个二进制文件也是可行的办法。顺便尝试了一下从命令行获取参数，以及在下载过程中使用进度条。</p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#爬取模块</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#正则表达式、文件夹、系统变量</span></span><br><span class="line"><span class="keyword">import</span> re,os,sys</span><br><span class="line"><span class="comment">#进度条相关</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br></pre></td></tr></table></figure><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><p>根据参数获取url地址（这里提供一个url样例，是播放页面的地址）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span>:</span><br><span class="line">    url = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sys.exit()</span><br><span class="line">    <span class="comment">#url = &#x27;https://tv.cctv.com/2020/11/26/VIDEkd2TSFPv3uK8Ias25jYL201126.shtml?spm=C28340.P1dzdfA9CsHZ.S29237.42&#x27;</span></span><br></pre></td></tr></table></figure><p>浏览器标识（请求头），并创建“新闻联播”文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;新闻联播&#x27;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&#x27;新闻联播&#x27;</span>)</span><br><span class="line">os.chdir(<span class="string">&#x27;新闻联播&#x27;</span>)</span><br></pre></td></tr></table></figure><p>获取guid和视频标题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetInfo</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#请求视频地址，并编码为utf-8</span></span><br><span class="line">        req = requests.get(url = url,headers = headers)</span><br><span class="line">        req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        <span class="comment">#正则匹配guid（视频唯一标识符）</span></span><br><span class="line">        pattern_guid = re.<span class="built_in">compile</span>(<span class="string">&#x27;var\sguid\s=\s&quot;(.*?)&quot;;&#x27;</span>)</span><br><span class="line">        <span class="comment">#正则匹配网页中的视频标题</span></span><br><span class="line">        pattern_title = re.<span class="built_in">compile</span>(<span class="string">&#x27;var\scommentTitle\s=\s&quot;(.*?)&quot;;&#x27;</span>)</span><br><span class="line">        guid = re.findall(pattern_guid,req.text)[<span class="number">0</span>]</span><br><span class="line">        title = re.findall(pattern_title,req.text)[<span class="number">0</span>].replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment">#返回获取到的信息</span></span><br><span class="line">        <span class="keyword">return</span> guid,title</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment">#如果出现异常则返回None</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>,<span class="literal">None</span></span><br></pre></td></tr></table></figure><p>获取视频流的总段数，并按顺序写进二进制文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#guid，title为上面函数获取到的信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetVideo</span>(<span class="params">guid,title</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#拼接出保存视频流信息文件的url地址（将花括号替换为了guid）</span></span><br><span class="line">        ts_list_url = <span class="string">&quot;https://hls.cntv.lxdns.com/asp/hls/850/0303000a/3/default/&#123;&#125;/850.m3u8?maxbr=2048&quot;</span>.<span class="built_in">format</span>(guid)</span><br><span class="line">        <span class="comment">#请求目标地址</span></span><br><span class="line">        req_ts = requests.get(url = ts_list_url,headers = headers)</span><br><span class="line">        <span class="comment">#正则匹配，查询返回信息中共有多少个“.ts”</span></span><br><span class="line">        pattern_ts = re.<span class="built_in">compile</span>(<span class="string">&quot;\.ts&quot;</span>)</span><br><span class="line">        num = <span class="built_in">len</span>(re.findall(pattern_ts,req_ts.text))</span><br><span class="line">        <span class="comment">#创建二进制文件，根据title命名</span></span><br><span class="line">        f = <span class="built_in">open</span>(title + <span class="string">&#x27;.mp4&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(title)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        调用进度条模块写循环，保存每一段视频流</span></span><br><span class="line"><span class="string">        desc为进度条的自定义提示信息，ncols为进度条长度</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(num),desc = <span class="string">&#x27;正在下载...&#x27;</span>,ncols=<span class="number">80</span>):</span><br><span class="line">            <span class="comment">#拼接视频流的url，将两个花括号分别替换为guid、当前循环的i值</span></span><br><span class="line">            <span class="comment">#中间的2000代表清晰度，即2k高清，其他选项有480、720、1200</span></span><br><span class="line">            ts_url = <span class="string">&quot;https://hls.cntv.lxdns.com/asp/hls/2000/0303000a/3/default/&#123;&#125;/&#123;&#125;.ts&quot;</span>.<span class="built_in">format</span>(guid,i)</span><br><span class="line">            <span class="comment">#请求与写入</span></span><br><span class="line">            req = requests.get(url = ts_url,headers = headers)</span><br><span class="line">            f.write(req.content)</span><br><span class="line">        <span class="comment">#解除文件占用</span></span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment">#返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> e</span><br></pre></td></tr></table></figure><p>调节程序的运行并捕捉错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="comment">#调用函数获取guid和title</span></span><br><span class="line">    guid,title = GetInfo()</span><br><span class="line">    <span class="comment">#如果返回值不是None</span></span><br><span class="line">    <span class="keyword">if</span> guid <span class="keyword">and</span> title:</span><br><span class="line">        <span class="comment">#下载视频并捕捉返回值</span></span><br><span class="line">        debug = GetVideo(guid, title)</span><br><span class="line">        <span class="comment">#如果返回值不是0，则打印错误信息</span></span><br><span class="line">        <span class="keyword">if</span> debug != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(debug)</span><br><span class="line">        <span class="comment">#退出程序</span></span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#如果返回值都是None，大概率是提供的url地址不对（当然也可能是网站有变动）</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;下载失败!请检查URL地址！&#x27;</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"><span class="comment">#入口函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">cmd下切换到py文件所在路径</span></span><br><span class="line">python spider_cctv.py https://tv.cctv.com/2020/11/26/VIDEkd2TSFPv3uK8Ias25jYL201126.shtml?spm=C28340.P1dzdfA9CsHZ.S29237.42</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>其实没有什么反爬措施，主要是在分析url，以及匹配到视频对应的guid。请勿将视频用于非法途径！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次反爬虫破解</title>
      <link href="/2020/11/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E7%88%AC%E8%99%AB%E7%A0%B4%E8%A7%A3/"/>
      <url>/2020/11/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E7%88%AC%E8%99%AB%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>参考文献来自<a href="https://blog.csdn.net/hihell" title="csdn梦想橡皮擦">csdn梦想橡皮擦</a>,本次尝试的是网易有道词典的接口，这类教程网上有很多，但大多过时了，也不敢确定本文的有效性能保持多久，所以记录代码的同时，一并记录下方法。有道的反爬原理是生成本地随机变量进行验证，如果不能摸清随机变量的生成规则，就只能收到{‘errorcode’:’50’}，另外，有道对请求头也有一定要求。</p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#发起网页请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#对字符进行md5加密</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment">#获取时间戳</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#生成随机数</span></span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h2 id="获取随机变量"><a href="#获取随机变量" class="headerlink" title="获取随机变量"></a>获取随机变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#translate为要翻译的内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_salt_sign</span>(<span class="params">translate</span>):</span></span><br><span class="line">    <span class="comment">#在浏览器控制台(F12-Console)中输入&quot;navigator.appVersion&quot;</span></span><br><span class="line">    app_version = <span class="string">&quot;5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36&quot;</span></span><br><span class="line">    <span class="comment">#对上面获取到的内容进行md5加密</span></span><br><span class="line">    bv = hashlib.md5(app_version.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="comment">#获取当前时间戳，乘以1000，然后取整</span></span><br><span class="line">    lts = <span class="built_in">str</span>(<span class="built_in">int</span>(<span class="number">1000</span> * time.time()))</span><br><span class="line">    <span class="comment">#lts加上0-10的一个随机字符</span></span><br><span class="line">    salt = lts + <span class="built_in">str</span>(random.randint(<span class="number">0</span>,<span class="number">10</span>))</span><br><span class="line">    <span class="comment">#sign为一个常量+要翻译的内容+salt+一个常量，然后进行md5加密</span></span><br><span class="line">    sign = hashlib.md5((<span class="string">&quot;fanyideskweb&quot;</span> + translate + salt + <span class="string">&quot;]BjuETDhU)zqSxf-=B#7m&quot;</span>).encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> salt,sign,lts,bv</span><br></pre></td></tr></table></figure><h2 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">params</span>():</span></span><br><span class="line">    <span class="comment">#空字典(Form Data)</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="comment">#要翻译的内容</span></span><br><span class="line">    translate = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    data[<span class="string">&#x27;i&#x27;</span>] = translate</span><br><span class="line">    <span class="comment">#默认值</span></span><br><span class="line">    data[<span class="string">&#x27;from&#x27;</span>] = <span class="string">&#x27;AUTO&#x27;</span></span><br><span class="line">    data[<span class="string">&#x27;to&#x27;</span>] = <span class="string">&#x27;AUTO&#x27;</span></span><br><span class="line">    data[<span class="string">&#x27;smartresult&#x27;</span>] = <span class="string">&#x27;dict&#x27;</span></span><br><span class="line">    <span class="comment">#&quot;fanyideskweb&quot;即为上面的第一个常量</span></span><br><span class="line">    data[<span class="string">&#x27;client&#x27;</span>] = <span class="string">&#x27;fanyideskweb&#x27;</span></span><br><span class="line">    <span class="comment">#获取变量并存入字典</span></span><br><span class="line">    data[<span class="string">&#x27;salt&#x27;</span>],data[<span class="string">&#x27;sign&#x27;</span>],data[<span class="string">&#x27;lts&#x27;</span>],data[<span class="string">&#x27;bv&#x27;</span>] = generate_salt_sign(translate)</span><br><span class="line">    <span class="comment">#以下皆为默认值</span></span><br><span class="line">    data[<span class="string">&#x27;doctype&#x27;</span>] = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    data[<span class="string">&#x27;version&#x27;</span>] = <span class="string">&#x27;2.1&#x27;</span></span><br><span class="line">    data[<span class="string">&#x27;keyfrom&#x27;</span>] = <span class="string">&#x27;fanyi.web&#x27;</span></span><br><span class="line">    data[<span class="string">&#x27;action&#x27;</span>] = <span class="string">&#x27;FY_BY_REALTlME&#x27;</span></span><br><span class="line">    data[<span class="string">&#x27;typoResult&#x27;</span>] = <span class="string">&#x27;false&#x27;</span></span><br><span class="line">    <span class="comment">#时间戳的整数类型，用于构造Cookie</span></span><br><span class="line">    temp = <span class="built_in">int</span>(data[<span class="string">&#x27;lts&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data,temp</span><br></pre></td></tr></table></figure><h2 id="主要函数"><a href="#主要函数" class="headerlink" title="主要函数"></a>主要函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tran</span>():</span></span><br><span class="line">    <span class="comment">#有道的接口url地址</span></span><br><span class="line">    url = <span class="string">&quot;http://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;</span></span><br><span class="line">    <span class="comment">#获取参数字典</span></span><br><span class="line">    data,temp = params()</span><br><span class="line">    <span class="comment">#构造请求头，Cookie末尾的字符串为当前时间戳减5</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/javascript, */*; q=0.01&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Length&#x27;</span>: <span class="built_in">str</span>(<span class="built_in">len</span>(data)),</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;OUTFOX_SEARCH_USER_ID=-263132750@10.108.160.101; JSESSIONID=aaaN1fFGaN7vmh3Msh_xx; OUTFOX_SEARCH_USER_ID_NCOO=914767987.7880249; ___rl__test__cookies=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(temp - <span class="number">5</span>),</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;fanyi.youdao.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;http://fanyi.youdao.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://fanyi.youdao.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#发起post请求</span></span><br><span class="line">    result = requests.post(url = url,headers = headers,data = data)</span><br><span class="line">    <span class="comment">#输出获取的内容，可以使用json模块将其格式化</span></span><br><span class="line">    <span class="built_in">print</span>(result.text)</span><br></pre></td></tr></table></figure><h2 id="查找对应参数"><a href="#查找对应参数" class="headerlink" title="查找对应参数"></a>查找对应参数</h2><p>本站对于图片的支持不是很好，我在这里简单口述一下方法，首先打开<a href="http://fanyi.youdao.com/" title="有道">有道</a>，F12打开开发者工具，选择Network-All，然后输入一些内容进行翻译，Network会自动刷新，选择Name</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">translate_o?smartresult=<span class="built_in">dict</span>&amp;smartresult=rule</span><br></pre></td></tr></table></figure><p>点击Preview，即可看到翻译的内容，点击Headers，往下翻，即可看到Request Headers和Form Data，这就是我们发起post请求时传递的内容，有一部分是定值，主要变化的是salt、sign、lts这三项。接下来找到上述文件的Initiator属性，鼠标悬停，选择t.translate，点进去，再点点击左下角的{}对文本格式化，可以看到函数变得有规律了，这里记录着Form Data里的内容，可有几项仍然隐藏着，按CTRL+F打开搜索，查询var r = function,应该会匹配到两项，其中一个就记录着salt，sign，lts以及bv的生成规则(要注意sign的最后一个参数，如果跟本文不一样则进行替换)，这是一个JavaScript函数，解析后可以发现正是上面generate_salt_sign函数的内容，使用python复现规则也不难。</p><h2 id="代码的优化"><a href="#代码的优化" class="headerlink" title="代码的优化"></a>代码的优化</h2><p>实际上并不需要完全传递headers和data，删减尝试后对代码进行简化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_salt_sign</span>(<span class="params">translate</span>):</span></span><br><span class="line">    lts = <span class="built_in">str</span>(<span class="built_in">int</span>(<span class="number">1000</span> * time.time()))</span><br><span class="line">    salt = lts + <span class="built_in">str</span>(random.randint(<span class="number">0</span>,<span class="number">10</span>))</span><br><span class="line">    sign = hashlib.md5((<span class="string">&quot;fanyideskweb&quot;</span> + translate + salt + <span class="string">&quot;]BjuETDhU)zqSxf-=B#7m&quot;</span>).encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> salt,sign</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">params</span>():</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    translate = <span class="built_in">input</span>(<span class="string">&#x27;请输入要翻译的内容:&#x27;</span>)</span><br><span class="line">    data[<span class="string">&#x27;i&#x27;</span>] = translate</span><br><span class="line">    data[<span class="string">&#x27;client&#x27;</span>] = <span class="string">&#x27;fanyideskweb&#x27;</span></span><br><span class="line">    data[<span class="string">&#x27;salt&#x27;</span>],data[<span class="string">&#x27;sign&#x27;</span>] = generate_salt_sign(translate)</span><br><span class="line">    data[<span class="string">&#x27;keyfrom&#x27;</span>] = <span class="string">&#x27;fanyi.web&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tran</span>():</span></span><br><span class="line">    url = <span class="string">&quot;http://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;</span></span><br><span class="line">    data = params()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;OUTFOX_SEARCH_USER_ID=-263132750@10.108.160.101;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://fanyi.youdao.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    result = requests.post(url = url,headers = headers,data = data)</span><br><span class="line">    <span class="built_in">print</span>(result.text)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tran()</span><br></pre></td></tr></table></figure><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>如果把接口url里面的”_o”去掉，则很容易就能获得返回的内容，但翻译的效果似乎会差一些。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django+nginx+gunicorn部署网站</title>
      <link href="/2020/11/21/Django+nginx+gunicorn%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99/"/>
      <url>/2020/11/21/Django+nginx+gunicorn%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>试过了apache2，uwsgi，这次尝试下gunicorn，本文权当学习笔记。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br><span class="line">sudo apt-get install python3</span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line">sudo pip3 install virtualenv</span><br></pre></td></tr></table></figure><h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建</span></span><br><span class="line">python3 -m virtualenv venv</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">source venv/bin/activate</span><br></pre></td></tr></table></figure><h3 id="安装python包"><a href="#安装python包" class="headerlink" title="安装python包"></a>安装python包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -Ur requirements.txt</span><br></pre></td></tr></table></figure><h3 id="收集静态资源"><a href="#收集静态资源" class="headerlink" title="收集静态资源"></a>收集静态资源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意在settings.py中添加STATIC_ROOT路径</span></span><br><span class="line">python manage.py collectstatic --no-input</span><br></pre></td></tr></table></figure><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建文件</span></span><br><span class="line">sudo vim /etc/nginx/sites-available/myproject.conf</span><br></pre></td></tr></table></figure><p>贴入以下内容，并根据实际进行修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  charset utf-8;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name 0.0.0.0;  # 改成你的 IP</span><br><span class="line"></span><br><span class="line">  location /static &#123;</span><br><span class="line">    #修改成你的静态资源路径</span><br><span class="line">    alias /home/user/myproject/collectedstatic;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /media &#123;</span><br><span class="line">    #修改成你的media路径</span><br><span class="line">    alias /home/user/myproject/media;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_pass http://unix:/tmp/0.0.0.0.socket;  # 改成你的 IP</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立软连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/myproject.conf /etc/nginx/sites-enabled</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装gunicorn（虚拟环境下）</span></span><br><span class="line">(venv) ../myproject$pip3 install gunicorn</span><br><span class="line"><span class="meta">#</span><span class="bash">重启nginx</span></span><br><span class="line">(venv) ../myproject$sudo service nginx restart</span><br><span class="line"><span class="meta">#</span><span class="bash">启动gunicorn</span></span><br><span class="line">(venv) ../myproject$gunicorn --bind unix:/tmp/0.0.0.0.socket my_blog.wsgi:application</span><br><span class="line"><span class="meta">#</span><span class="bash">可选参数，前两个为创建日志文件，-D为后台运行</span></span><br><span class="line">gunicorn --access-logfile access.log --error-logfile error.log -D --bind unix:/tmp/0.0.0.0.socket myblog.wsgi:application</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开放Ubuntu虚拟机端口</title>
      <link href="/2020/11/21/%E5%BC%80%E6%94%BEUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AB%AF%E5%8F%A3/"/>
      <url>/2020/11/21/%E5%BC%80%E6%94%BEUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>有时候我们需要某个端口做测试，确定无误后再部署到服务端，但有些端口是默认关闭的，本文介绍一下如何打开端口并持久化开放。</p><h2 id="使用以下命令"><a href="#使用以下命令" class="headerlink" title="使用以下命令"></a>使用以下命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装iptables</span></span><br><span class="line">sudo apt-get install iptables</span><br><span class="line"><span class="meta">#</span><span class="bash">开放端口</span></span><br><span class="line">sudo iptables -I INPUT -p tcp --dport 端口 -j ACCEPT</span><br><span class="line"><span class="meta">#</span><span class="bash">保存规则</span></span><br><span class="line">sudo iptables-save</span><br><span class="line"><span class="meta">#</span><span class="bash">注意，以上规则每次重启都要重新配置，可以使用以下方法持久化</span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装iptables-persistent</span></span><br><span class="line">sudo apt-get install iptables-persistent</span><br><span class="line"><span class="meta">#</span><span class="bash">持久化规则</span></span><br><span class="line">sudo netfilter-persistent save</span><br><span class="line">sudo netfilter-persistent reload</span><br></pre></td></tr></table></figure><p>#写在后面<br>如果要开放云服务器的端口，去管理控制台就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Ubuntu搭建代理服务器</title>
      <link href="/2020/11/21/%E4%BD%BF%E7%94%A8Ubuntu%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/11/21/%E4%BD%BF%E7%94%A8Ubuntu%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天闲来无事，把最近搞好的django项目部署到了虚拟机里面，为什么没有放到线上呢，服务器资源不够呀，目前我那可爱的服务器已经为我运行了三个站点，再多的话俺怕它受不鸟。回归正题，部署完成后我照旧在windows下进行访问，一开始没有成功，忘了遇到啥问题了，应该是nginx没有配置好，解决的过程中我打开了一次Ubuntu的本地hosts，看到我以前自定义的两个域名（都转到了127.0.0.1，方便测试nginx根据server name转发请求），此时我陷入了深深的沉思，我能不能把虚拟机作为代理服务器，让windows也能通过自定义域名访问本地web项目呢？</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>说干就干，把web项目搞定之后我就开始搞，在百度上一通搜索，最终敲定了两个方案，tinyproxy和dante server。这里分别介绍一下两者用法。</p><h2 id="tinyproxy"><a href="#tinyproxy" class="headerlink" title="tinyproxy"></a>tinyproxy</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装服务</span></span><br><span class="line">sudo apt-get install tinyproxy</span><br><span class="line"><span class="meta">#</span><span class="bash">修改配置文件</span></span><br><span class="line">vim /etc/tinyproxy/tinyproxy.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">主要修改以下两项</span></span><br><span class="line">port 8888 #默认端口，可以修改成你要使用的端口</span><br><span class="line">Allow 127.0.0.1 #允许访问的IP，添加你的IP进去，注意让其单独成行，不要空格分割</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">sudo service tinyproxy start</span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">sudo service tinyproxy restart</span><br><span class="line"><span class="meta">#</span><span class="bash">停止</span></span><br><span class="line">sudo service tinyproxy stop</span><br></pre></td></tr></table></figure><p>然后修改windows代理就可以了，如果连接失败的话，可以检查下虚拟机有没有开放对应的端口。</p><h2 id="dante"><a href="#dante" class="headerlink" title="dante"></a>dante</h2><p>上述方法虽然好用，但是不提供socks5协议(可能有但是我没有找到)，又百度一遍找到了dante server这个小可爱。<br>首先还是安装服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install dante-server</span><br></pre></td></tr></table></figure><p>备份原始配置文件（就是改个名字）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/danted.conf /etc/danted.conf.back</span><br></pre></td></tr></table></figure><p>创建新的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/danted.conf</span><br></pre></td></tr></table></figure><p>贴入以下内容（根据需要进行更改）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">此为匿名登录配置信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash">日志记录</span></span><br><span class="line">logoutput: /var/log/danted.log</span><br><span class="line"><span class="meta">#</span><span class="bash">把汉字改成你的IP，port后面修改成你要使用的端口</span></span><br><span class="line">internal: 你的内网IP地址 port = 1080</span><br><span class="line">external: 你的内网IP地址</span><br><span class="line"><span class="meta">#</span><span class="bash">如果使用IP不行的话可以试试网卡，指定端口就可以了</span></span><br><span class="line">internal: eth0 port = 1080</span><br><span class="line">external: eth0</span><br><span class="line"><span class="meta">#</span><span class="bash">验证方式，none代表匿名</span></span><br><span class="line">method: none</span><br><span class="line">user.privileged: proxy</span><br><span class="line">user.notprivileged: nobody</span><br><span class="line">user.libwrap: nobody</span><br><span class="line"><span class="meta">#</span><span class="bash">表示能接入的ip规则，可以限定连接ip</span></span><br><span class="line">client pass &#123;</span><br><span class="line">from: 0.0.0.0/0 to: 0.0.0.0/0</span><br><span class="line">log: connect disconnect</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pass &#123;</span><br><span class="line">from: 0.0.0.0/0 to: 0.0.0.0/0 port gt 1023</span><br><span class="line">command: bind</span><br><span class="line">log: connect disconnect</span><br><span class="line">&#125;</span><br><span class="line">pass &#123;</span><br><span class="line">from: 0.0.0.0/0 to: 0.0.0.0/0</span><br><span class="line">command: connect udpassociate</span><br><span class="line">log: connect disconnect</span><br><span class="line">&#125;</span><br><span class="line">block &#123;</span><br><span class="line">from: 0.0.0.0/0 to: 0.0.0.0/0</span><br><span class="line">log: connect error</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果要使用登录验证，首先要创建一个不能login的用户，此用户不能使用服务器上任何服务，但可以用于验证代理服务器，创建方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建用户,改成你要使用的用户名</span></span><br><span class="line">useradd 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash">初始化密码，不要创建完就忘了。。</span></span><br><span class="line">passwd 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash">验证密码后修改用户配置文件</span></span><br><span class="line">sudo vim /etc/passwd</span><br><span class="line">一般来说新创建的用户都在最后一行，将该用户的shell改成/bin/false，wq退出</span><br></pre></td></tr></table></figure><p>此为需要登录验证的配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">logoutput: /var/log/danted.log</span><br><span class="line">internal: 你的内网IP地址 port = 你的端口</span><br><span class="line">external: 你的内网IP地址</span><br><span class="line"><span class="meta">#</span><span class="bash">如果使用IP不行的话试试网卡</span></span><br><span class="line"><span class="meta">#</span><span class="bash">internal: eth0 port = 1080</span></span><br><span class="line"><span class="meta">#</span><span class="bash">external: eth0</span></span><br><span class="line">method: username</span><br><span class="line">user.privileged: root</span><br><span class="line">user.notprivileged: 刚才创建的用户名(注意前面的空格)</span><br><span class="line">user.libwrap: nobody</span><br><span class="line">client pass &#123;</span><br><span class="line">from: 0.0.0.0/0 to: 0.0.0.0/0</span><br><span class="line">log: connect disconnect</span><br><span class="line">&#125;</span><br><span class="line">pass &#123;</span><br><span class="line">        from: 0.0.0.0/0 to: 0.0.0.0/0</span><br><span class="line">        command: bind connect udpassociate</span><br><span class="line">        log: error</span><br><span class="line">        method: username</span><br><span class="line">&#125;</span><br><span class="line">block &#123;</span><br><span class="line">from: 0.0.0.0/0 to: 0.0.0.0/0</span><br><span class="line">log: connect error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存配置文件后执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动dante服务</span></span><br><span class="line">sudo /etc/init.d/danted start</span><br><span class="line"><span class="meta">#</span><span class="bash">查看运行状态</span></span><br><span class="line">sudo netstat -anp | grep 你的端口</span><br><span class="line"><span class="meta">#</span><span class="bash">或者是以下命令</span></span><br><span class="line">sudo service dante start</span><br><span class="line">sudo lsof -i:你的端口</span><br></pre></td></tr></table></figure><p>有输出的话应该就是成功了，开始愉快的使用代理吧~</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>虽然代理服务器是配置成功了，但是我在windows下访问自定义域名并没有跳到我的web项目，纳闷，不知道哪里做的不对T_T。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近在搞双系统</title>
      <link href="/2020/11/19/%E6%9C%80%E8%BF%91%E5%9C%A8%E6%90%9E%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/11/19/%E6%9C%80%E8%BF%91%E5%9C%A8%E6%90%9E%E5%8F%8C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="我在做什么"><a href="#我在做什么" class="headerlink" title="我在做什么"></a>我在做什么</h2><p>最近双11买了一块1T的固态，因为电脑只有一个硬盘接口，所以原本的256G固态算是废弃了。买固态的时候顺手买了个移动硬盘盒，正好，可以利用起来，我就想着搞一搞双硬盘双系统，但仅仅这么做可满足不了需求。</p><h2 id="我想要的"><a href="#我想要的" class="headerlink" title="我想要的"></a>我想要的</h2><p>因为256G是在usb3.0接口上，所以我想从Windows引导进Ubuntu，类似于开机的时候，给两个启动项，可以自己选择系统进入，来来回回搞了好多遍，所以考虑另一种办法，用Ubuntu的grub引导Windows，这样的话，只要设置电脑优先从UEFI启动，同样能实现开机选择，不过这种做法很容易把Windows主引导搞坏，已经折腾了三天，对我，对电脑，还有优盘都是折磨。。。<br>在公司电脑上搞双系统差点进不去Windows，修复引导都没用。<br><strong>今晚最后试一次，不成功便成仁！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>这是一篇不正经的读书心得</title>
      <link href="/2020/11/16/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E4%B8%8D%E6%AD%A3%E7%BB%8F%E7%9A%84%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97/"/>
      <url>/2020/11/16/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E4%B8%8D%E6%AD%A3%E7%BB%8F%E7%9A%84%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="《解忧杂货店》"><a href="#《解忧杂货店》" class="headerlink" title="《解忧杂货店》"></a>《解忧杂货店》</h2><p>2020年11月15号晚，我翻开了这本书，本以为是一篇推理小说，打算先看上50页，毕竟推理小说比较烧脑，然而它是奇幻温情小说，讲述了浪矢爷爷和三个迷途的年轻人（翔太、敦也、幸平）帮助他人解决烦恼的故事，四个多小时看完了300多页，一共六个故事，我从未读过这样的小说，买东野圭吾的书从来没有失望过。</p><h2 id="《圆圈正义》"><a href="#《圆圈正义》" class="headerlink" title="《圆圈正义》"></a>《圆圈正义》</h2><p>罗翔老师的著作，期许已久，曾向某个女孩讨要过一本，机缘差错下我拒收了，双11自己买了一本来读，似乎还是签名版。重温了一遍罗老师的妙言锦句，大有裨益。承认自己的无知乃是开启智慧的大门，当然，这句话是引用自苏格拉底的。最近囿于一系列不称心之事，我快要迷失了自我，差点被内心的黑暗所腐蚀了。重拾对未来的期许，改变世界，从改变自己开始。侠之大者，为国为民，侠之小者，为友为邻，我非侠士，我为我的家人和我自己。</p><h2 id="《梦的解析》"><a href="#《梦的解析》" class="headerlink" title="《梦的解析》"></a>《梦的解析》</h2><p>西格蒙德·弗洛伊德[奥地利]著，目前看了5页，觉得很深奥，在考虑要不要继续读下去。到25号晚上已读了260页，弗洛伊德认为梦是愿望的达成，对此我不敢苟同，和许多人一样，我无法再完全认同弗洛伊德的观点了。11月27号晚，我匆匆读完了这本书，感觉自己是为了读完而坚持读，一目十行，不得书中真意，甚至可能是为了功利主义在读，我想读完之后发个朋友圈，虽然最后没有这么做。说实话，认真读也不见得能读懂，书中表达的意思太过晦涩，只能浅显的对“梦是愿望的达成”有一些认知，而弗洛伊德对梦中意象的诠释，我不能完全认同。说来也怪，25号和26号我连续两天梦见自己迟到，一开始想不明白为什么，28号早上我睡到了十点才起床，我才明白自己是想睡个懒觉。</p><h2 id="《罗翔说刑法96讲》"><a href="#《罗翔说刑法96讲》" class="headerlink" title="《罗翔说刑法96讲》"></a>《罗翔说刑法96讲》</h2><p>历时半年，我终于看完了这一系列刑法课，虽然这不是一本书，不过也在此记录一下吧。这96讲让我学到了很多，海量的法律知识，可以让我明辨是非，另外，还教会我如何辩证的去思考、如何设身处地的为他人着想，而且远不止如此。</p><h2 id="《卡拉马佐夫兄弟》"><a href="#《卡拉马佐夫兄弟》" class="headerlink" title="《卡拉马佐夫兄弟》"></a>《卡拉马佐夫兄弟》</h2><p>这是一部伟大的作品，书中每个人物，每件事都值得回味，凭我的语言功底肯定不能详细讲述，书中探讨了爱情、亲情、伦理、宗教，甚至延伸到法律，可惜，这部伟大的作品并不完善，陀思妥耶夫斯基创作完第一部因病逝世，我们无法看到那个虔诚的信徒阿列克谢·费奥多洛维奇·卡拉马佐夫会有怎样的经历，但我相信，他一定有金子般的心。米佳和格鲁申卡，卡佳和伊凡，也都会获得幸福。</p><h2 id="《罪与罚》"><a href="#《罪与罚》" class="headerlink" title="《罪与罚》"></a>《罪与罚》</h2><p>这部小说为陀思妥耶夫斯基赢得了世界性的赞誉，也理应如此。讲述了拉斯柯尔尼科夫从犯罪到抵抗最终忏悔的心理过程，对人物的心理刻画相当深刻，在叙述主人公罪与罚经过的同时，展现了19世纪中后期俄国的现实画卷，刻画一个卑劣的人，却通过那个人维护自己声誉的行动中下笔。描绘高尚的人，通过那种整洁，却不是为了她自己。故事的结局很美妙，拉斯柯尔尼科夫与索尼娅会获得幸福的。</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决Ubuntu中MySQL8.0出现ERROR(1449)</title>
      <link href="/2020/11/16/%E8%A7%A3%E5%86%B3Ubuntu%E4%B8%ADMySQL8.0%E5%87%BA%E7%8E%B0ERROR(1449)/"/>
      <url>/2020/11/16/%E8%A7%A3%E5%86%B3Ubuntu%E4%B8%ADMySQL8.0%E5%87%BA%E7%8E%B0ERROR(1449)/</url>
      
        <content type="html"><![CDATA[<h2 id="发现错误"><a href="#发现错误" class="headerlink" title="发现错误"></a>发现错误</h2><p>登录mysql，使用show databases;和show tables;这两个命令时报错ERROR 1449，而且备份数据库时报了同样的错误，这样的话卸载mysql重装就变得非常危险。</p><h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><p>ERROR 1449 (HY000): The user specified as a definer (‘mysql.infoschema‘@’localhost’) does not exist</p><h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><p>报错信息提示用户mysql.infoschema@localhost不存在，执行命令<br><code>select user,host from mysql.user;</code><br>然而看到mysql.infoschema用户是存在的，这让人一头雾水，去搜索了一圈，说是让使用mysql_upgrade命令，但是这个命令在mysql8.0已经被废弃了，但是我们还有别的解决办法。</p><h2 id="两种方案"><a href="#两种方案" class="headerlink" title="两种方案"></a>两种方案</h2><p>第一种：<br>在终端执行<code>sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</code>打开mysqld.cnf文件<br>在末尾键入以下代码(作用是跳过mysql的登录验证)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">skip-external-locking</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><p>wq退出，<code>service mysql restart</code>重启mysql server，这样就实现了mysql的免密登录，在终端下输入mysql再回车，使用show databases;命令，如果运气好的话，应该不会再报错了，也可以正常备份。<br>可是mysql免密登录在本地还好，甚至要方便一些，但在服务端有很大的风险，没事，还有第二种方案。<br>第二种：<br>注释掉刚才添加过的配置文件信息，重启mysql，mysql -uroot -p登录，执行下列命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除导致报错的用户</span></span><br><span class="line">DROP USER <span class="string">&#x27;mysql.infoschema&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment">#重新创建该用户,密码自己定义,留空也可以</span></span><br><span class="line">CREATE USER <span class="string">&#x27;mysql.infoschema&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="comment">#赋予权限</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;mysql.infoschema&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"><span class="comment">#使更改生效</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>此时使用show databases;命令正常了，问题圆满解决，不需要卸载重装。</p><h2 id="可能导致的问题"><a href="#可能导致的问题" class="headerlink" title="可能导致的问题"></a>可能导致的问题</h2><p>或许你使用了上述的方法，但发现web项目不能访问，以wordpress为例，会出现连接数据库时出错，这时在终端使用以下命令：<br><code>mysql -u wordpress -p</code><br>输入你的密码，应该是不能正常连接的，这与mysql8.0的加密方式有关，使用以下方式进行修正：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登录mysql</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment">#选择数据库</span></span><br><span class="line">use mysql;</span><br><span class="line"><span class="comment">#修改plugin字段</span></span><br><span class="line">update user <span class="built_in">set</span> plugin=<span class="string">&quot;mysql_native_password&quot;</span>;</span><br><span class="line"><span class="comment">#删除原有用户</span></span><br><span class="line">drop user <span class="string">&#x27;wordpress&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment">#重新创建,密码要跟原来的保持一致，当然也可以重新设置，然后修改项目配置文件</span></span><br><span class="line">CREATE USER <span class="string">&#x27;wordpress&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="comment">#赋予权限</span></span><br><span class="line">GRANT <span class="built_in">all</span> ON wordpress.* TO <span class="string">&#x27;wordpress&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><p>重启mysql服务，再次访问web项目正常。如果你的项目有很多个，可能每一个都要修改，但是数据不会丢失。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3中ctypes的简单使用</title>
      <link href="/2020/11/10/python3%E4%B8%ADctypes%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/11/10/python3%E4%B8%ADctypes%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>闲来无事，学习一下使用python调用动态链接库，就用到了ctypes库。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调用ctypes中的各类方法</span></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> cdll,CDLL,WinDLL,windll</span><br><span class="line"><span class="comment">#调用platform获取当前操作系统</span></span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> platform.system() == <span class="string">&#x27;Windows&#x27;</span>:</span><br><span class="line">    <span class="comment">#windows下调用的是msvcrt.dll文件</span></span><br><span class="line">    libc = cdll.LoadLibrary(<span class="string">&#x27;msvcrt.dll&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> platform.system() == <span class="string">&#x27;Linux&#x27;</span>:</span><br><span class="line">    <span class="comment">#Linux下调用.so文件</span></span><br><span class="line">    libc = cdll.LoadLibrary(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#python3中字符串默认使用Unicode，需要将其转换为bytes</span></span><br><span class="line">libc.printf(<span class="string">&quot;Hello World!\n&quot;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"><span class="comment">#如果没有输出，请在命令行下执行py文件</span></span><br></pre></td></tr></table></figure><h2 id="gcc编译DLL"><a href="#gcc编译DLL" class="headerlink" title="gcc编译DLL"></a>gcc编译DLL</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用gcc</span></span><br><span class="line">gcc -shared -o filename.dll filename.c</span><br><span class="line"><span class="comment">#使用g++</span></span><br><span class="line">g++ -shared -o filename.dll filename.cpp</span><br><span class="line"><span class="comment">#Linux下的命令</span></span><br><span class="line">gcc -fPIC -shared filename.c -o filename.so</span><br><span class="line">g++ -fPIC --share filename.cpp -o filename.so</span><br><span class="line"><span class="comment">#注意：使用g++时需要在cpp文件里加上extern &quot;C&quot;&#123;&#125;，使用nm命令可查看链接库中的函数</span></span><br></pre></td></tr></table></figure><h2 id="VS2019"><a href="#VS2019" class="headerlink" title="VS2019"></a>VS2019</h2><p>首先创建MFC动态链接库程序，在对应的cpp文件里写入函数，在对应的头文件里声明函数，然后在后缀为.def的文件里写入函数名，不需要分号，另外，如果python版本为32位，在Release的时候选择x86，python为64位版本则选择x64。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在C++中调用DLL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*ApiAdd)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>,c = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//编码格式为Unicode，“test.dll”前面需要加L(LPCTSTR)</span></span><br><span class="line">HINSTANCE hDllInst = <span class="built_in">LoadLibrary</span>(<span class="string">L&quot;test.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hDllInst == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Success!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">ApiAdd myfun = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//这里只是为函数重命名，我写的函数是判断两个数较大的那个</span></span><br><span class="line">myfun = (ApiAdd)<span class="built_in">GetProcAddress</span>(hDllInst, <span class="string">&quot;maxnum&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (myfun != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = <span class="built_in">myfun</span>(a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line"><span class="comment">//释放句柄</span></span><br><span class="line"><span class="built_in">FreeLibrary</span>(hDllInst);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows访问虚拟机中的web项目</title>
      <link href="/2020/10/30/Windows%E8%AE%BF%E9%97%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84web%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/10/30/Windows%E8%AE%BF%E9%97%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84web%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><p>今天突发奇想，虚拟机中搭建了web项目，那我能不能在Windows下访问呢？带着这个问题，我在Ubuntu虚拟机中启动了一个django项目，虚拟机中访问127.0.0.1:8000正常，机智如我，在Windows下打开了chrome，输入127….结果喜闻乐见，百度之后得知要修改服务器地址，设置为0.0.0.0:8000：<br><code>python manage.py runserver 0.0.0.0:8000</code><br>而且访问的应该是虚拟机的ipv4地址，查看命令是ifconfig。做完这些我在chrome中输入了虚拟机地址。。然而并没有什么卵用，接着我想到我Windows下根本ping不通虚拟机，那怎么办，难道就这么放弃吗？tan 90！！！我把虚拟机的网络连接方式改成了桥接网卡，这样的话虚拟机虽然不能连接外网了(公司代理服务器屏蔽了桥接网卡时的虚拟机地址)，但是Windows再次ping虚拟机的时候正常，似乎看到了一缕曙光，ok，冲冲冲，启动django项目，windows访问虚拟机地址，成功到达了网站首页！！</p><h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><p>我是要把Ubuntu当服务器的，肯定绕不过nginx这个可爱又迷人的小玩意儿，很多操作在搭建本站时已经用过了，也算轻车熟路，使用nginx+uwsgi启动web项目后，在虚拟机中访问正常，在Windows下却跳到了腾讯首页，卧了个槽，又想起自己修改过虚拟机的本地hosts，之前给自己挖过的坑得慢慢填…还原hosts配置文件，修改nginx配置文件，不再跳转到qq.com的域名下，重启nginx，uwsgi重新挂载配置文件，清除Windows浏览器记录，这些搞完就正常了，此时我的虚拟机就类似于一个web服务器。</p><h2 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h2><p>虚拟机的ipv4地址开头与windows一致，都属于公司IP，那我的同事们是否可以访问我的web项目呢？我找同事帮我测试了一下，结果居然顺利到达了，这样看来我似乎是搭建一个局域网服务器,可以供同IP下的所有人使用，我把django项目换成了wordpress，修改url配置后结果与预期完全一致。<br>顺便找到了wordpress无法安装主题、无法上传文件的解决办法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开放文件夹读写权限:</span></span><br><span class="line">sudo chmod -R  <span class="number">777</span> wordpress/</span><br><span class="line"><span class="comment">//修改wp-config.php配置文件，在末尾添加:</span></span><br><span class="line"><span class="built_in">define</span>(<span class="string">&quot;FS_METHOD&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line"><span class="built_in">define</span>(<span class="string">&quot;FS_CHMOD_DIR&quot;</span>, <span class="number">0777</span>);</span><br><span class="line"><span class="built_in">define</span>(<span class="string">&quot;FS_CHMOD_FILE&quot;</span>, <span class="number">0777</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术至上 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑白科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium模拟登录QQ邮箱</title>
      <link href="/2020/10/30/selenium%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95QQ%E9%82%AE%E7%AE%B1/"/>
      <url>/2020/10/30/selenium%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95QQ%E9%82%AE%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本来想利用自动化测试实现跳过猫眼验证中心，自动拖动滑块验证的功能是实现了，但猫眼还有别的检测方法来判断用户行为，所以这条路没有走通，在这里记录下QQ邮箱的自动登录。</p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于sleep</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#selenium自动化框架</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br></pre></td></tr></table></figure><h2 id="配置options"><a href="#配置options" class="headerlink" title="配置options"></a>配置options</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#后面两行可以无界面驱动chrome</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line"><span class="comment">#chrome_options.add_argument(&#x27;--headless&#x27;)</span></span><br><span class="line"><span class="comment">#chrome_options.add_argument(&#x27;--disable-gpu&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><p>简单说一下如何找模块对应的id，在网页按f12审查元素，鼠标找到目标模块，右键，检查。<br>如果网页中能找到id但browser定位不到，可以看看是不是没有切换iframe。<br>请参阅<a href="https://blog.csdn.net/huilan_same/article/details/52200586" title="selenium定位之iframe">selenium定位之iframe</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line"><span class="comment">#n你可以在config文件里写自己的账号密码，不需要的话删掉即可</span></span><br><span class="line">    <span class="keyword">import</span> config</span><br><span class="line"><span class="comment">#获取账号密码</span></span><br><span class="line">mailuser = config.mailusername</span><br><span class="line">    mailpsw = config.mailpassword</span><br><span class="line"><span class="comment">#创建browser对象，实质上用于驱动chrome</span></span><br><span class="line">    browser = webdriver.Chrome(executable_path = <span class="string">&#x27;chromedriver.exe&#x27;</span>,options = chrome_options)</span><br><span class="line"><span class="comment">#访问目标地址</span></span><br><span class="line">    browser.get(<span class="string">&#x27;http://mail.qq.com/&#x27;</span>)</span><br><span class="line"><span class="comment">#窗口最大化</span></span><br><span class="line">    <span class="comment">#browser.maximize_window()</span></span><br><span class="line"><span class="comment">#切换到对应的iframe</span></span><br><span class="line">    <span class="comment">#login_frame = browser.find_element_by_id(&#x27;login_frame&#x27;)</span></span><br><span class="line"><span class="comment">#与上一行同理，选择喜欢的方式即可</span></span><br><span class="line">    browser.switch_to.frame(<span class="string">&#x27;login_frame&#x27;</span>)</span><br><span class="line"><span class="comment">#根据id找到账号输入框</span></span><br><span class="line">    username = browser.find_element_by_id(<span class="string">&#x27;u&#x27;</span>)</span><br><span class="line"><span class="comment">#清空输入框</span></span><br><span class="line">    username.clear()</span><br><span class="line"><span class="comment">#输入账号</span></span><br><span class="line">    username.send_keys(mailuser)</span><br><span class="line"><span class="comment">#根据id找到密码输入框，清空后输入密码</span></span><br><span class="line">    password = browser.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;p&quot;]&#x27;</span>)</span><br><span class="line">    password.clear()</span><br><span class="line">    password.send_keys(mailpsw)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#根据id找到登录按钮</span></span><br><span class="line">    loginButton = browser.find_element_by_id(<span class="string">&#x27;login_button&#x27;</span>)</span><br><span class="line"><span class="comment">#定义一个存储browser事件的对象</span></span><br><span class="line">    ac1 = ActionChains(browser)</span><br><span class="line"><span class="comment">#事件为点击loginbutton按钮，并实施该事件，如果不perform，则暂不执行</span></span><br><span class="line">    ac1.click(loginButton).perform()</span><br><span class="line"><span class="comment">#休眠3秒，不然无法正确获取滑块验证模块</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#如果出现滑块验证，则切换到对应的iframe，登录成功的话则不做任何事情</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    verify = browser.find_element_by_id(<span class="string">&#x27;tcaptcha_iframe&#x27;</span>)</span><br><span class="line">    browser.switch_to.frame(verify)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment">#滑块要右移的距离</span></span><br><span class="line">    axis = <span class="number">165</span></span><br><span class="line"><span class="comment">#执行滑块验证</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="comment">#这里用出现异常来跳出循环</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#当验证通过，则无法找到滑块对应的id，此时将跳出循环</span></span><br><span class="line">            dragElement = browser.find_element_by_id(<span class="string">&#x27;tcaptcha_drag_button&#x27;</span>)</span><br><span class="line"><span class="comment">#定义browser事件</span></span><br><span class="line">            ac2 = ActionChains(browser)</span><br><span class="line"><span class="comment">#根据距离移动滑块axis为x轴，0为y轴</span></span><br><span class="line">            ac2.drag_and_drop_by_offset(dragElement,axis,<span class="number">0</span>).perform()</span><br><span class="line"><span class="comment">#休眠两秒</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#验证失败则距离加5，三次以后验证码会更新，此时将axis还原</span></span><br><span class="line">            axis += <span class="number">5</span></span><br><span class="line">            <span class="keyword">if</span> axis &gt; <span class="number">180</span>:</span><br><span class="line">                axis = <span class="number">165</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#休眠五秒</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#退出浏览器</span></span><br><span class="line">    browser.quit()</span><br></pre></td></tr></table></figure><h2 id="两个技巧"><a href="#两个技巧" class="headerlink" title="两个技巧"></a>两个技巧</h2><p>selenium测试时会出现命令行窗口，不过我们有办法隐藏它:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改源码：Lib\site-packages\selenium\webdriver\common\ _services.py</span><br><span class="line">找到start()，添加配置参数 creationflags=<span class="number">134217728</span> 即可</span><br></pre></td></tr></table></figure><p>部分网站会检测浏览器的window.navigator.webdriver，此项在正常浏览器中值为undefined，在chromedriver中为true，成为了selenium可识别的指纹，不过仍有办法将其擦除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为你的webdriver对象(t替换browser)添加如下代码</span></span><br><span class="line"><span class="comment">#此改动在webdriver对象关闭前一直有效</span></span><br><span class="line">browser.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;</span><br><span class="line">              <span class="string">&quot;source&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;</span></span><br><span class="line"><span class="string">                  get: () =&gt; undefined</span></span><br><span class="line"><span class="string">                &#125;)</span></span><br><span class="line"><span class="string">              &quot;&quot;&quot;</span></span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解猫眼字体反爬</title>
      <link href="/2020/10/27/%E7%A0%B4%E8%A7%A3%E7%8C%AB%E7%9C%BC%E5%AD%97%E4%BD%93%E5%8F%8D%E7%88%AC/"/>
      <url>/2020/10/27/%E7%A0%B4%E8%A7%A3%E7%8C%AB%E7%9C%BC%E5%AD%97%E4%BD%93%E5%8F%8D%E7%88%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本项目很久之前就想尝试，觉得难，所以一直在拖，这次终于有时间搞了一下。猫眼的反爬虫策略还是比较强大的，会判断用户行为，如果在一段时间内频繁访问会使ip被暂时屏蔽，这个问题可以使用IP代理来解决。此外还使用了字体反爬来保护票房、票价等重要信息，而且这个字体反爬在不断更新，最初的时候使用单一的字体文件，后来升级到每次刷新网页都会更新字体文件，而且字体文件中的坐标并不一致，这让爬取变的更加困难，但是相同数字之间总有相似的地方，通过聚类思想我们仍然可以找到映射关系，这种方法不保证不会出错，因为真实的映射关系只有猫眼的程序猿那里有，我们只是使用算法进行推断，如果出现错误，可以尝试使用更精确的算法。本文使用的是欧式距离，相对简单一些。主要分为以下几个部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 下载一份基础字体文件(在电影页面中审查元素，找到network-font然后刷新)</span><br><span class="line"><span class="number">2</span> 使用fontcreator工具(百度即可)确定基础字体文件中字形与文本的映射关系</span><br><span class="line"><span class="number">3</span> 计算新字体文件与基础字体文件中坐标点的欧式距离(统计学中的聚类思想)</span><br><span class="line"><span class="number">4</span> 根据最小的欧式距离建立新字体文件中的字形与文本的映射关系</span><br></pre></td></tr></table></figure><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fonttools解析字体文件并生成xml</span></span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"><span class="comment">#使用随机的代理IP</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#re正则表达式，用于匹配woff文件下载地址及字体坐标等</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#用于获取网页信息</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#用于解析网页，在本文中部分内容无法解析</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="comment">#用于计算欧式距离</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h2 id="建立基础映射"><a href="#建立基础映射" class="headerlink" title="建立基础映射"></a>建立基础映射</h2><p>本部分内容暂请参考<a href="https://blog.csdn.net/qq_43308242/article/details/104214811" title="CSDN">CSDN</a>，如有时间我会整理一下。</p><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#伪装浏览器请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#设置IP代理</span></span><br><span class="line">proxies=[&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;114.103.168.183:3000&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;175.43.156.42:9999&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;218.64.148.47:9000&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;221.224.136.211:35101&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;http:&#x27;</span>:<span class="string">&#x27;175.42.129.65:9999&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;117.64.225.154:1133&#x27;</span>&#125;]</span><br><span class="line"><span class="comment">#我所使用的基础映射</span></span><br><span class="line">relation_table = &#123;<span class="string">&#x27;uniEF67&#x27;</span>:<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;uniF0D5&#x27;</span>:<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;uniED8E&#x27;</span>:<span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;uniEBBA&#x27;</span>:<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;uniF3D8&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;uniE6A9&#x27;</span>:<span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;uniE01D&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;uniECE9&#x27;</span>:<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;uniE106&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;uniF8D2&#x27;</span>:<span class="string">&#x27;5&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="请求网页"><a href="#请求网页" class="headerlink" title="请求网页"></a>请求网页</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Html</span>(<span class="params">url</span>):</span></span><br><span class="line"><span class="comment">#请求网页，并使用随机的代理IP</span></span><br><span class="line">    req = requests.get(url,headers = headers,proxies = random.choice(proxies))</span><br><span class="line"><span class="comment">#将编码设置为utf-8，不然网页中的中文都会变成乱码</span></span><br><span class="line">    req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="comment">#有时候requests会请求到验证中心，所以储存一下真实访问的url</span></span><br><span class="line">    real_url = req.url</span><br><span class="line"><span class="comment">#网页文本</span></span><br><span class="line">    html = req.text</span><br><span class="line"><span class="comment">#爬取到一次网页后可以暂存为文本文件，防止在debug过程中访问时出现验证中心</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    f = open(&#x27;movie.txt&#x27;,&#x27;w&#x27;,encoding = &#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="string">    f.write(html)</span></span><br><span class="line"><span class="string">    f.close()</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#访问到正常网页时才能获取到电影标题，所以在这里捕捉一下异常</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#从网页中获取电影标题，使用BeautifulSoup进行解析</span></span><br><span class="line">        title = bs(html,<span class="string">&#x27;lxml&#x27;</span>).find(<span class="string">&#x27;h1&#x27;</span>,class_ = <span class="string">&quot;name&quot;</span>).text</span><br><span class="line"><span class="comment">#利用正则表达式匹配到口碑、评分人数、票房对应的加密信息</span></span><br><span class="line">        pattern_span = re.<span class="built_in">compile</span>(<span class="string">&#x27;&gt;(&amp;#.*?\..*;)&#x27;</span>)</span><br><span class="line">        ppl = re.findall(pattern_span, html)</span><br><span class="line"><span class="comment">#返回四个主要信息</span></span><br><span class="line">        <span class="keyword">return</span> title,html,ppl,real_url</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line"><span class="comment">#如果出现验证中心，就只返回验证中心地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,real_url</span><br></pre></td></tr></table></figure><h2 id="获取新字体"><a href="#获取新字体" class="headerlink" title="获取新字体"></a>获取新字体</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Woff</span>(<span class="params">html</span>):</span></span><br><span class="line"><span class="comment">#使用正则表达式匹配到woff文件的下载地址</span></span><br><span class="line">    pattern_woff = re.<span class="built_in">compile</span>(<span class="string">&quot;url\(\&#x27;(.*.woff)\&#x27;\)\s&quot;</span>)</span><br><span class="line"><span class="comment">#构造完整地址</span></span><br><span class="line">    woff_url = <span class="string">&#x27;http:&#x27;</span> + re.findall(pattern_woff,html)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#将字体文件保存到本地</span></span><br><span class="line">    new_woff = requests.get(url = woff_url,headers = headers)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;new_woff.woff&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(new_woff.content)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><h2 id="计算欧式距离"><a href="#计算欧式距离" class="headerlink" title="计算欧式距离"></a>计算欧式距离</h2><p>详请参阅<a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E5%BA%A6%E9%87%8F/1274107?fromtitle=%E6%AC%A7%E5%BC%8F%E8%B7%9D%E7%A6%BB&fromid=2809635&fr=aladdin" title="欧式距离">欧式距离</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#向此函数传递两个列表，然后调用numpy计算欧式距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare_axis</span>(<span class="params">axis1,axis2</span>):</span></span><br><span class="line"><span class="comment">#如果向量维度不一致，则对较短的那个补充0元素</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(axis1) &lt; <span class="built_in">len</span>(axis2):</span><br><span class="line">        axis1.extend([<span class="number">0</span>,<span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(axis2) - <span class="built_in">len</span>(axis1)))</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(axis2) &lt; <span class="built_in">len</span>(axis1):</span><br><span class="line">        axis2.extend([<span class="number">0</span>,<span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(axis1) - <span class="built_in">len</span>(axis2)))</span><br><span class="line"><span class="comment">#将列表转换为数组</span></span><br><span class="line">    axis1 = np.array(axis1)</span><br><span class="line">    axis2 = np.array(axis2)</span><br><span class="line"><span class="comment">#返回欧式距离</span></span><br><span class="line">    <span class="keyword">return</span> np.sqrt(np.<span class="built_in">sum</span>(np.square(axis1 - axis2)))</span><br></pre></td></tr></table></figure><h2 id="从XML读取字体坐标"><a href="#从XML读取字体坐标" class="headerlink" title="从XML读取字体坐标"></a>从XML读取字体坐标</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file为传递的xml文件名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Read_Font</span>(<span class="params">file</span>):</span></span><br><span class="line"><span class="comment">#以读方式打开</span></span><br><span class="line">    f_base = <span class="built_in">open</span>(file,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="comment">#使用BeautifulSoup进行解析</span></span><br><span class="line">    html_base = bs(f_base.read(),<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#找到所有包含字体坐标的片段</span></span><br><span class="line">    ttglyph = html_base.find(<span class="string">&#x27;glyf&#x27;</span>).find_all(<span class="string">&#x27;ttglyph&#x27;</span>)</span><br><span class="line">    f_base.close()</span><br><span class="line"><span class="comment">#返回片段列表</span></span><br><span class="line">    <span class="keyword">return</span> ttglyph</span><br><span class="line"></span><br><span class="line"><span class="comment">#清洗字符串取得坐标值列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Axis</span>(<span class="params">string</span>):</span></span><br><span class="line">    axis = []</span><br><span class="line"><span class="comment">#正则匹配字符串中所有坐标，此时得到的元素类似&quot;x=&quot;1&quot; y=&quot;2&quot;&quot;</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;pt\son=&quot;[0,1]?&quot;\s(.*?)&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">#re只能从字符串中匹配，使用str进行转换</span></span><br><span class="line">    axis_list = re.findall(pattern,<span class="built_in">str</span>(string))</span><br><span class="line"><span class="comment">#遍历匹配到的元素列表</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> axis_list:</span><br><span class="line"><span class="comment">#将元素根据空格进行分割，得到[x=&quot;1&quot;,y=&quot;2&quot;]</span></span><br><span class="line">        zb = item.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment">#再根据“=”进行分割，替换掉双引号，并转换为整数</span></span><br><span class="line">        x = <span class="built_in">int</span>(zb[<span class="number">0</span>].split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        y = <span class="built_in">int</span>(zb[<span class="number">1</span>].split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="comment">#保存到坐标列表</span></span><br><span class="line">        axis.append([x,y])</span><br><span class="line"><span class="comment">#将清洗后的坐标返回</span></span><br><span class="line">    <span class="keyword">return</span> axis</span><br></pre></td></tr></table></figure><h2 id="Unicode映射"><a href="#Unicode映射" class="headerlink" title="Unicode映射"></a>Unicode映射</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#建立基础字体文件中的uni与新字体文件中的uni之间的映射</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BaseToNew</span>(<span class="params">ttglyph_base,ttglyph_new</span>):</span></span><br><span class="line">    basetonew = []</span><br><span class="line"><span class="comment">#因为有一个无用的字符，所以从索引1开始遍历</span></span><br><span class="line">    <span class="keyword">for</span> base <span class="keyword">in</span> ttglyph_base[<span class="number">1</span>:]:</span><br><span class="line"><span class="comment">#找到一个字体坐标与新字体的最小欧式距离后要将value重置</span></span><br><span class="line">        value = []</span><br><span class="line"><span class="comment">#还有另外一个无用的字符x，写一个if进行判断</span></span><br><span class="line">        <span class="keyword">if</span> base.get(<span class="string">&#x27;name&#x27;</span>) != <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line"><span class="comment">#调用前述方法获取坐标列表</span></span><br><span class="line">            axis_base = Get_Axis(base)</span><br><span class="line"><span class="comment">#枚举新字体文件中的字体坐标字符串，也可以不使用枚举，本来是想记录最小欧式距离索引的</span></span><br><span class="line">        <span class="keyword">for</span> index,new <span class="keyword">in</span> <span class="built_in">enumerate</span>(ttglyph_new[<span class="number">1</span>:]):</span><br><span class="line"><span class="comment">#同样的，忽略x</span></span><br><span class="line">            <span class="keyword">if</span> new.get(<span class="string">&#x27;name&#x27;</span>) != <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line"><span class="comment">#调用前述方法获取坐标列表</span></span><br><span class="line">                axis_new = Get_Axis(new)</span><br><span class="line"><span class="comment">#计算两个axis之间的欧式距离，并保存到value列表</span></span><br><span class="line">                value.append(compare_axis(axis_base,axis_new))</span><br><span class="line"><span class="comment">#新字体文件每被遍历一遍，都要计算最小的欧式距离，并记录新旧对应的Unicode编码</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(value)):</span><br><span class="line"><span class="comment">#判断是否是最小的欧式距离</span></span><br><span class="line">            <span class="keyword">if</span> value[i] == <span class="built_in">min</span>(value):</span><br><span class="line"><span class="comment">#如果是，则从字符串中获取新字形的Unicode</span></span><br><span class="line"><span class="comment">#因为忽略了开头的无用信息，所以这里需要加1</span></span><br><span class="line">                new_code = ttglyph_new[i + <span class="number">1</span>].get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">#获取旧字形对应的Unicode</span></span><br><span class="line">                base_code = base.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">#建立一个映射</span></span><br><span class="line">                basetonew.append(&#123;<span class="string">&quot;basecode&quot;</span>:base_code,<span class="string">&quot;newcode&quot;</span>:new_code&#125;)</span><br><span class="line"><span class="comment">#如果已经找到最小的欧式距离，则无需比较后续数据</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="comment">#返回建立完成的Unicode映射</span></span><br><span class="line">    <span class="keyword">return</span> basetonew</span><br></pre></td></tr></table></figure><h2 id="UNI-NUM映射"><a href="#UNI-NUM映射" class="headerlink" title="UNI-NUM映射"></a>UNI-NUM映射</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据基础映射和Unicode映射建立新的UNI-NUM映射</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NewToNum</span>(<span class="params">basetonew</span>):</span></span><br><span class="line">    newtonum = &#123;&#125;</span><br><span class="line"><span class="comment">#遍历基础映射中所有的键</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> relation_table.keys():</span><br><span class="line"><span class="comment">#获取值，即基础映射中对应的文本</span></span><br><span class="line">        value = relation_table[key]</span><br><span class="line"><span class="comment">#遍历Unicode映射</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(basetonew)):</span><br><span class="line"><span class="comment">#如果键与Unicode映射中的基础UNI相对应，那么就建立一个新的字形映射</span></span><br><span class="line">            <span class="keyword">if</span> key == basetonew[i][<span class="string">&#x27;basecode&#x27;</span>]:</span><br><span class="line"><span class="comment">#在这里将新的UNI进行转换，改成全小写，并将&quot;uni&quot;替换为&quot;&amp;#x&quot;</span></span><br><span class="line"><span class="comment">#在末尾添加&quot;;&quot;号，此时得到的Unicode编码与网页中显示的一致</span></span><br><span class="line">                newtonum[basetonew[i][<span class="string">&#x27;newcode&#x27;</span>].lower().replace(<span class="string">&#x27;uni&#x27;</span>,<span class="string">&#x27;&amp;#x&#x27;</span>) + <span class="string">&#x27;;&#x27;</span>] = value</span><br><span class="line"><span class="comment">#返回新的UNI-NUM映射</span></span><br><span class="line">    <span class="keyword">return</span> newtonum</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据新的映射获取结果，ppl为之前正则匹配到的加密信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Result</span>(<span class="params">newtonum,ppl</span>):</span></span><br><span class="line">    result = []</span><br><span class="line"><span class="comment">#遍历ppl列表</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> ppl:</span><br><span class="line"><span class="comment">#遍历新映射中的键</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> newtonum.keys():</span><br><span class="line"><span class="comment">#如果在item中能找到键，就将键替换为对应的值</span></span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> item:</span><br><span class="line">                item = item.replace(key,newtonum[key])</span><br><span class="line"><span class="comment">#向result列表中添加替换完成的item,此时的item已经解密完毕</span></span><br><span class="line">        result.append(item)</span><br><span class="line"><span class="comment">#返回result</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="基础函数"><a href="#基础函数" class="headerlink" title="基础函数"></a>基础函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Basic</span>(<span class="params">ppl</span>):</span></span><br><span class="line"><span class="comment">#使用fonttools包读取字体文件</span></span><br><span class="line">    base_font = TTFont(<span class="string">&#x27;base_font.woff&#x27;</span>)</span><br><span class="line">    base_font.saveXML(<span class="string">&#x27;base_font.xml&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    new_font = TTFont(<span class="string">&#x27;new_woff.woff&#x27;</span>)</span><br><span class="line">    new_font.saveXML(<span class="string">&#x27;new_woff.xml&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#从xml文件中读取字体坐标信息</span></span><br><span class="line">    ttglyph_base = Read_Font(<span class="string">&#x27;base_font.xml&#x27;</span>)</span><br><span class="line">    ttglyph_new = Read_Font(<span class="string">&#x27;new_woff.xml&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#获取新旧映射关系</span></span><br><span class="line">    basetonew = BaseToNew(ttglyph_base, ttglyph_new)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#获取新的UNI-NUM映射</span></span><br><span class="line">    newtonum = NewToNum(basetonew)</span><br><span class="line">    <span class="comment">#解析加密信息</span></span><br><span class="line">    result = Result(newtonum,ppl)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="其余代码"><a href="#其余代码" class="headerlink" title="其余代码"></a>其余代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这是一个测试用函数，前提是你已经将网页保存为文本，使你debug的时候不会遇到验证中心</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;movie.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    req = f.read()</span><br><span class="line">    pattern_span = re.<span class="built_in">compile</span>(<span class="string">&#x27;&gt;(&amp;#.*?\..*;)&#x27;</span>)</span><br><span class="line">    ppl = re.findall(pattern_span, req)</span><br><span class="line">    f.close()</span><br><span class="line">    title = bs(req,<span class="string">&#x27;lxml&#x27;</span>).find(<span class="string">&#x27;h1&#x27;</span>,class_ = <span class="string">&quot;name&quot;</span>).text</span><br><span class="line">    result = Get_Basic(ppl)</span><br><span class="line">    <span class="built_in">print</span>(title)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;猫眼口碑&#x27;</span>,ppl[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;万人评分&#x27;</span>.<span class="built_in">format</span>(ppl[<span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;累计票房&#123;&#125;亿&#x27;</span>.<span class="built_in">format</span>(ppl[<span class="number">2</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;猫眼口碑&#x27;</span>,result[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;万人评分&#x27;</span>.<span class="built_in">format</span>(result[<span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;累计票房&#123;&#125;亿&#x27;</span>.<span class="built_in">format</span>(result[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="comment">#你要爬取的目标url，批量爬取时写成列表并在后面加一个循环</span></span><br><span class="line">    url = <span class="string">&#x27;https://maoyan.com/films/42964&#x27;</span></span><br><span class="line"><span class="comment">#获取电影标题，网页信息，加密数据，访问的真实url</span></span><br><span class="line">    title,html,ppl,real_url = Get_Html(url)</span><br><span class="line"><span class="comment">#捕捉可能出现的验证中心异常</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#从网页中的woff_url下载新的字体文件</span></span><br><span class="line">        Get_Woff(html)</span><br><span class="line"><span class="comment">#获取解密信息</span></span><br><span class="line">        result = Get_Basic(ppl)</span><br><span class="line"><span class="comment">#输出猫眼程序猿辛苦维护的数据。。。</span></span><br><span class="line">        <span class="built_in">print</span>(title)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猫眼口碑&#x27;</span>,result[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;万人评分&#x27;</span>.<span class="built_in">format</span>(result[<span class="number">1</span>]))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;累计票房&#123;&#125;亿&#x27;</span>.<span class="built_in">format</span>(result[<span class="number">2</span>]))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">如果出现了验证中心，那么就去浏览器访问一下输出的real_url</span></span><br><span class="line"><span class="string">拖动滑动条完成验证，然后重新执行程序即可</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(real_url)</span><br><span class="line"><span class="comment">#程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#test()</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>整整一天，从早8点到晚22点破解了这个反爬，期间参阅了很多资料，最终发现使用聚类算法才能解析猫眼现有反爬策略。<br>之前学习的时候积累了一些语法的使用，不然今天肯定搞不完这个东西，或者说就算搞完了，也只是复制别人的代码，而不能完全读懂。<br>学习，重在积累。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python生成随机密码并操作剪贴板</title>
      <link href="/2020/10/27/Python%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AF%86%E7%A0%81%E5%B9%B6%E6%93%8D%E4%BD%9C%E5%89%AA%E8%B4%B4%E6%9D%BF/"/>
      <url>/2020/10/27/Python%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AF%86%E7%A0%81%E5%B9%B6%E6%93%8D%E4%BD%9C%E5%89%AA%E8%B4%B4%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#操作字符串</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="comment">#从列表中获取随机元素</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#操作剪贴板，copy为向剪贴板传递，paste为从剪贴板读取</span></span><br><span class="line"><span class="keyword">from</span> pyperclip <span class="keyword">import</span> copy,paste</span><br></pre></td></tr></table></figure><h2 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成密文列表</span></span><br><span class="line">alnums = [x <span class="keyword">for</span> x <span class="keyword">in</span> string.ascii_letters + string.digits <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;l&#x27;</span>)]</span><br><span class="line"><span class="comment">#产生随机密码，可以根据需要修改传递的参数n</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genpass</span>(<span class="params">n=<span class="number">16</span></span>):</span></span><br><span class="line">    passwd = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        passwd += random.choice(alnums)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(passwd)</span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    n = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码位数：&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> n != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        n = <span class="built_in">int</span>(n)</span><br><span class="line">        passwd = genpass(n)</span><br><span class="line">        copy(passwd)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        passwd = genpass()</span><br><span class="line">        copy(passwd)</span><br><span class="line">    <span class="built_in">print</span>(passwd)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬取城市天气信息</title>
      <link href="/2020/10/26/Python%E7%88%AC%E5%8F%96%E5%9F%8E%E5%B8%82%E5%A4%A9%E6%B0%94%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/10/26/Python%E7%88%AC%E5%8F%96%E5%9F%8E%E5%B8%82%E5%A4%A9%E6%B0%94%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本次尝试爬取<a href="https://www.amap.com/" title="高德地图">高德地图</a>中全国部分城市天气信息，程序主要是对json字符串进行操作，如果有天气方面的数据分析需求，可以把代码稍作修改，放到服务器上定时跑一个月，就可以得到数量相当可观的数据。</p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#网页请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#操作json字符串，在本文中可用可不用</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#用于使程序暂停数秒</span></span><br><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#城市及对应的adcode保存在该url指向的json文本中，在高德地图官网审查元素可以找到该url</span></span><br><span class="line">url_city = <span class="string">&#x27;https://www.amap.com/service/cityList?version=2020101417&#x27;</span></span><br><span class="line"><span class="comment">#使用该url和城市的adcode可以构造出完整的城市天气信息地址</span></span><br><span class="line">url_weather = <span class="string">&#x27;https://www.amap.com/service/weather?adcode=&#123;&#125;&#x27;</span></span><br><span class="line"><span class="comment">#模拟浏览器进行访问</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="城市列表"><a href="#城市列表" class="headerlink" title="城市列表"></a>城市列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_city</span>():</span></span><br><span class="line"><span class="comment">#发起get请求</span></span><br><span class="line">    req = requests.get(url = url_city,headers = headers)</span><br><span class="line"><span class="comment">#将信息保存为字典</span></span><br><span class="line">    city_info = req.json()</span><br><span class="line"><span class="comment">#如果你想将信息保存为文本文件可以启用下面的代码</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    f = open(&#x27;city.txt&#x27;,&#x27;w&#x27;)</span></span><br><span class="line"><span class="string">    f.write(req.text)</span></span><br><span class="line"><span class="string">    f.close()</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#定义空列表用于存储城市信息</span></span><br><span class="line">    city_list = []</span><br><span class="line"><span class="comment">#根据A到Z的索引进行遍历，需要使用ASCII码</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>,<span class="number">91</span>):</span><br><span class="line"><span class="comment">#因为有些索引不包含城市，比如I，所以需要捕捉一下异常</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#这里的index_city是一个列表，列表中又包含字典元素</span></span><br><span class="line">            index_city = city_info[<span class="string">&#x27;data&#x27;</span>][<span class="string">&quot;cityByLetter&quot;</span>][<span class="built_in">chr</span>(i)]</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> index_city:</span><br><span class="line">                city_list.append((index[<span class="string">&#x27;adcode&#x27;</span>],index[<span class="string">&#x27;name&#x27;</span>]))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#返回城市列表</span></span><br><span class="line">    <span class="keyword">return</span> city_list</span><br></pre></td></tr></table></figure><h2 id="获取天气信息"><a href="#获取天气信息" class="headerlink" title="获取天气信息"></a>获取天气信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_weather</span>(<span class="params">city_list</span>):</span></span><br><span class="line"><span class="comment">#用于记录出错的城市</span></span><br><span class="line">    error_list = []</span><br><span class="line"><span class="comment">#创建一个文本文档保存天气信息，需要爬取多天信息可以使用日期命名</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;weather.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment">#枚举每一个城市</span></span><br><span class="line">    <span class="keyword">for</span> i,city <span class="keyword">in</span> <span class="built_in">enumerate</span>(city_list):</span><br><span class="line"><span class="comment">#有些城市信息在访问时出错，为了不前功尽弃也需要捕捉异常</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#定义一个空字典</span></span><br><span class="line">            item = &#123;&#125;</span><br><span class="line"><span class="comment">#对城市信息发起get请求</span></span><br><span class="line">            weather = requests.get(url = url_weather.<span class="built_in">format</span>(city[<span class="number">0</span>]),headers = headers)</span><br><span class="line"><span class="comment">#记录城市adcode</span></span><br><span class="line">            item[<span class="string">&#x27;adcode&#x27;</span>] = city[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#记录城市名称</span></span><br><span class="line">            item[<span class="string">&#x27;name&#x27;</span>] = city[<span class="number">1</span>]</span><br><span class="line"><span class="comment">#记录天气时间</span></span><br><span class="line">            item[<span class="string">&#x27;time&#x27;</span>] = weather.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;report_time&#x27;</span>]</span><br><span class="line"><span class="comment">#记录具体天气信息，如晴、阴、多云</span></span><br><span class="line">            item[<span class="string">&#x27;weather&#x27;</span>] = weather.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;live&#x27;</span>][<span class="string">&#x27;weather_name&#x27;</span>]</span><br><span class="line"><span class="comment">#记录当前温度</span></span><br><span class="line">            item[<span class="string">&#x27;temperature&#x27;</span>] = weather.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;live&#x27;</span>][<span class="string">&#x27;temperature&#x27;</span>]</span><br><span class="line"><span class="comment">#记录当天最低温度</span></span><br><span class="line">            item[<span class="string">&#x27;min_temp&#x27;</span>] = weather.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;forecast_data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;min_temp&#x27;</span>]</span><br><span class="line"><span class="comment">#记录当天最高温度</span></span><br><span class="line">            item[<span class="string">&#x27;max_temp&#x27;</span>] = weather.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;forecast_data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;max_temp&#x27;</span>]</span><br><span class="line"><span class="comment">#将字典转换为字符串，加入换行符后写入文本文件，再次操作时使用json即可</span></span><br><span class="line">            f.write(<span class="built_in">str</span>(item) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">#输出提示信息</span></span><br><span class="line">            <span class="built_in">print</span>(city[<span class="number">1</span>],<span class="string">&#x27;天气已获取&#x27;</span>)</span><br><span class="line"><span class="comment">#使程序休眠0.5s</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line"><span class="comment">#遇到错误时记录城市的索引位置、adcode、名称</span></span><br><span class="line">            error_list.append((i,city[<span class="number">0</span>],city[<span class="number">1</span>]))</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#关闭打开的文本文档</span></span><br><span class="line">    f.close()</span><br><span class="line"><span class="comment">#输出error_list</span></span><br><span class="line">    <span class="built_in">print</span>(error_list)</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    city_list = get_city()</span><br><span class="line">    get_weather(city_list)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python绘制蒙太奇图片(opencv)</title>
      <link href="/2020/10/25/Python%E7%BB%98%E5%88%B6%E8%92%99%E5%A4%AA%E5%A5%87%E5%9B%BE%E7%89%87(opencv)/"/>
      <url>/2020/10/25/Python%E7%BB%98%E5%88%B6%E8%92%99%E5%A4%AA%E5%A5%87%E5%9B%BE%E7%89%87(opencv)/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>原理其实很简单，把目标图像划分成许多区域，然后从给定的图库里寻找一张和本区域最相似的图片，将找到的图片贴到对应区域上，重复这一过程，然后就得到了目标图片。</p><p>本文所用素材来自<a href="http://lol.qq.com/" title="lol官方网站">lol官方网站</a>，详情参阅<a href="https://www.ljczero.top/article/2020/9/14/41.html" title="爬取LOL英雄皮肤">爬取LOL英雄皮肤</a>，批量爬取的代码会抽时间写进去。</p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#OpenCV</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment">#操作文件夹</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#构造像素点矩阵</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#用于获取点图中出现频率最高的像素点</span></span><br><span class="line"><span class="keyword">import</span> collections</span><br></pre></td></tr></table></figure><h2 id="一个小问题"><a href="#一个小问题" class="headerlink" title="一个小问题"></a>一个小问题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">OpenCV无法直接加载含有中文路径的图片，所以需要自定义一个方法</span></span><br><span class="line"><span class="string">同样的，如果要保存到中文路径，也需要定义一个方法，请自行搜索</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cv_imread</span>(<span class="params">file_path</span>):</span></span><br><span class="line">        cv_img = cv2.imdecode(np.fromfile(file_path,dtype = np.uint8),-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> cv_img</span><br></pre></td></tr></table></figure><h2 id="缩小素材"><a href="#缩小素材" class="headerlink" title="缩小素材"></a>缩小素材</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将素材修改为100x100像素的文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ready_img</span>():</span></span><br><span class="line"><span class="comment">#主要路径</span></span><br><span class="line">    readpath = <span class="string">&#x27;./英雄联盟&#x27;</span></span><br><span class="line"><span class="comment">#将路径下所有文件及文件夹加载为列表</span></span><br><span class="line">    directorys = os.listdir(readpath)</span><br><span class="line">    <span class="comment">#创建点图的保存路径</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;save&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;save&#x27;</span>)</span><br><span class="line">    savepath = <span class="string">&#x27;./save&#x27;</span></span><br><span class="line">    <span class="comment">#n = 0</span></span><br><span class="line"><span class="comment">#遍历所有文件夹</span></span><br><span class="line">    <span class="keyword">for</span> directory <span class="keyword">in</span> directorys:</span><br><span class="line"><span class="comment">#获取文件夹下所有图片，加载为列表</span></span><br><span class="line">        photos = os.listdir(readpath + <span class="string">&#x27;/&#x27;</span> + directory)</span><br><span class="line"><span class="comment">#逐个处理</span></span><br><span class="line">        <span class="keyword">for</span> photo <span class="keyword">in</span> photos:</span><br><span class="line"><span class="comment">#捕捉一下异常</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#获取图片相对路径</span></span><br><span class="line">                file = readpath + <span class="string">&#x27;/&#x27;</span> + directory + <span class="string">&#x27;/&#x27;</span> + photo</span><br><span class="line"><span class="comment">#使用自定义方法读取图片</span></span><br><span class="line">                img = cv_imread(file)</span><br><span class="line"><span class="comment">#将图片修改为100x100像素</span></span><br><span class="line">                img = cv2.resize(img,(<span class="number">100</span>,<span class="number">100</span>))</span><br><span class="line"><span class="comment">#将修改后的图片写入文件</span></span><br><span class="line">                cv2.imwrite(savepath + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(n) + <span class="string">&#x27;.jpg&#x27;</span>,img)</span><br><span class="line">                <span class="comment">#n += 1</span></span><br><span class="line"><span class="comment">#遇到异常时输出图片名称并继续</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(photo)</span><br><span class="line">                <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="获取索引"><a href="#获取索引" class="headerlink" title="获取索引"></a>获取索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index</span>():</span></span><br><span class="line"><span class="comment">#设置点图路径</span></span><br><span class="line">    readpath = <span class="string">&#x27;./save&#x27;</span></span><br><span class="line"><span class="comment">#将点图加载为列表</span></span><br><span class="line">    files = os.listdir(readpath)</span><br><span class="line">    <span class="comment">#n = 0</span></span><br><span class="line"><span class="comment">#创建一个空字符串</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#遍历所有点图</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line"><span class="comment">#创建空列表</span></span><br><span class="line">        li = []</span><br><span class="line">        <span class="comment">#n += 1</span></span><br><span class="line"><span class="comment">#OpenCV读取图片，注：如果包含中文路径还请使用cv_imread方法</span></span><br><span class="line">        imgpath = readpath + <span class="string">&#x27;/&#x27;</span> + file</span><br><span class="line">        img = cv2.imread(imgpath)</span><br><span class="line"><span class="comment">#循环读取每个像素点</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">                b = img[i,j,<span class="number">0</span>]</span><br><span class="line">                g = img[i,j,<span class="number">1</span>]</span><br><span class="line">                r = img[i,j,<span class="number">2</span>]</span><br><span class="line"><span class="comment">#将每个像素点的bgr信息保存到列表中</span></span><br><span class="line">                li.append((b,g,r))</span><br><span class="line">        <span class="comment">#获取出现最多的一个像素点</span></span><br><span class="line">        most = collections.Counter(li).most_common(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#将所有信息处理成规范格式，并加到字符串</span></span><br><span class="line">        s += file</span><br><span class="line">        s += <span class="string">&#x27;:&#x27;</span></span><br><span class="line">        s += <span class="built_in">str</span>(most[<span class="number">0</span>][<span class="number">0</span>]).replace(<span class="string">&#x27;(&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;)&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">        s += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="comment">#将信息保存为文本文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;filename.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    f.write(s)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h2 id="创建蒙太奇图片"><a href="#创建蒙太奇图片" class="headerlink" title="创建蒙太奇图片"></a>创建蒙太奇图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#预处理，从文本中读取信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_ready</span>():</span></span><br><span class="line"><span class="comment">#文件路径</span></span><br><span class="line">    readpath = <span class="string">&#x27;./save&#x27;</span></span><br><span class="line"><span class="comment">#读取信息</span></span><br><span class="line">    fs = <span class="built_in">open</span>(<span class="string">&#x27;filename.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line"><span class="comment">#创建空列表</span></span><br><span class="line">    dic = []</span><br><span class="line"><span class="comment">#读取每一行</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fs.readlines():</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"><span class="comment">#拆分信息</span></span><br><span class="line">        temp = line.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"><span class="comment">#文件名</span></span><br><span class="line">        file = temp[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#bgr信息以逗号分隔，也需要拆分</span></span><br><span class="line">        bgr = temp[<span class="number">1</span>].split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        b = <span class="built_in">int</span>(bgr[<span class="number">0</span>])</span><br><span class="line">        g = <span class="built_in">int</span>(bgr[<span class="number">1</span>])</span><br><span class="line">        r = <span class="built_in">int</span>(bgr[<span class="number">2</span>])</span><br><span class="line"><span class="comment">#将信息以元组方式添加到列表</span></span><br><span class="line">        dic.append((file,(b,g,r)))</span><br><span class="line">    <span class="keyword">return</span> dic</span><br><span class="line"><span class="comment">#开始创建</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_now</span>():</span></span><br><span class="line"><span class="comment">#文件路径</span></span><br><span class="line">    readpath = <span class="string">&#x27;./save&#x27;</span></span><br><span class="line"><span class="comment">#读取目标图片</span></span><br><span class="line">    img = cv2.imread(<span class="string">&#x27;new_york.jpg&#x27;</span>)</span><br><span class="line"><span class="comment">#获取图片的尺寸</span></span><br><span class="line">    s = np.shape(img)</span><br><span class="line"><span class="comment">#创建一个一百倍大小的点阵，目标图片不要过大</span></span><br><span class="line">    big = np.zeros((<span class="number">100</span> * s[<span class="number">0</span>],<span class="number">100</span> * s[<span class="number">1</span>],<span class="number">3</span>),dtype = np.uint8)</span><br><span class="line"><span class="comment">#调用前述方法获取信息</span></span><br><span class="line">    list1 = create_ready()</span><br><span class="line"><span class="comment">#遍历每一个像素点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(s[<span class="number">0</span>]):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(s[<span class="number">1</span>]):</span><br><span class="line"><span class="comment">#获取该像素点的bgr信息</span></span><br><span class="line">            b = img[i,j,<span class="number">0</span>]</span><br><span class="line">            g = img[i,j,<span class="number">1</span>]</span><br><span class="line">            r = img[i,j,<span class="number">2</span>]</span><br><span class="line"><span class="comment">#将信息打乱，防止相似像素点都取到相同点图</span></span><br><span class="line">            np.random.shuffle(list1)</span><br><span class="line"><span class="comment">#遍历每一条信息</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> list1:</span><br><span class="line"><span class="comment">#获取信息中的bgr信息</span></span><br><span class="line">                imgb = item[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">                imgg = item[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">                imgr = item[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">                <span class="comment">#计算欧氏距离</span></span><br><span class="line">                distance = (imgb - b) ** <span class="number">2</span> + (imgg - g) ** <span class="number">2</span> + (imgr - r) ** <span class="number">2</span></span><br><span class="line"><span class="comment">#如果距离小于给定值则跳出循环，并获取对应的文件名</span></span><br><span class="line">                <span class="keyword">if</span> distance &lt; <span class="number">75</span>:</span><br><span class="line">                    filepath = readpath + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(item[<span class="number">0</span>])</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"><span class="comment">#读取该点图</span></span><br><span class="line">            little = cv2.imread(filepath)</span><br><span class="line"><span class="comment">#填充大图中对应的像素点</span></span><br><span class="line">            big[i * <span class="number">100</span>:(i + <span class="number">1</span>) * <span class="number">100</span>,j * <span class="number">100</span>:(j + <span class="number">1</span>) * <span class="number">100</span>] = little</span><br><span class="line"><span class="comment">#保存填充完毕的蒙太奇图片</span></span><br><span class="line">    cv2.imwrite(<span class="string">&quot;bigyork.jpg&quot;</span>,big)</span><br><span class="line"></span><br><span class="line"><span class="comment">#入口函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ready_img()</span><br><span class="line">    get_index()</span><br><span class="line">    get_photo()</span><br><span class="line">    create_now()</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>因为素材太少，所以最后得到的图片并不理想，就不再贴结果了。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>庚子札记(2020.9.24 -- 2020.10.19)</title>
      <link href="/2020/10/23/%E5%BA%9A%E5%AD%90%E6%9C%AD%E8%AE%B0(2020.9.24%20--%202020.10.19)/"/>
      <url>/2020/10/23/%E5%BA%9A%E5%AD%90%E6%9C%AD%E8%AE%B0(2020.9.24%20--%202020.10.19)/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本文仅为保留记忆碎片而作。请勿转载，读过还望一笑置之。</p><h2 id="09-24-星期四-阴历八月初八"><a href="#09-24-星期四-阴历八月初八" class="headerlink" title="09.24 星期四 阴历八月初八"></a>09.24 星期四 阴历八月初八</h2><p>由于前段时间身体不适，咳嗽加重且伴有一定程度的喘息，我觉得这样拖下去小命要不保，自己已经22岁整了，有必要对自己的身体负责，于是我请了一天假，本来打算请病假，可今天是生日啊，如果问题不大，下午我还可以休息一下，最终请了事假去看医生。打车到武汉大学人民医院东院，离公司很近，大概2.3公里，打车10元，起步费，到医院时大概是上午八点半，在自助办卡机那里摸索了几分钟，办好就诊卡，挂呼吸内科的专家号，然后在候诊区坐了一会儿，到9点20分我被叫去就诊，今天坐诊的是商医生，问过病情后，给我开了DR和心电图的检查，这两个检查做完并且拿到报告，时间是10点50，心电图报告正常，DR显示左下肺有炎症，但是被心脏挡住了，具体看不清楚，医生又给开了CT的检查，排队的人很多，做完这个就到12点50了，取到CT的报告后，等到下午两点再去找医生，下午没有挂号，感谢保安大哥，没有拦我，只是说了句肯定需要再次排队，就放我进去了，医生暂时不在，这段时间我在思考要不要回家治，因为在这里不知道医保能不能用。医生看过片子后建议我住院，我当时没同意，拿上报告和片子回了园区，打算买晚上的火车票回家，跟爸爸打了电话，然后跟主管Joe联系请病假，过了一会儿主管说职工医保可以用，因为公司已经给交过一个月了，暂时自费住院，到时候再报销，听到这个消息我重新考虑了一下，如果回家的话，老爹还要分心照顾我，亲戚朋友们可能还要抽空去医院看我，那我为什么不能一个人把所有事情都办好呢，最后还是决定留下来，一个人去住院，晚上六点多再赶到医院，他们已经下班，今天只能作罢，回园区睡觉。</p><h2 id="09-25-星期五-阴历八月初九"><a href="#09-25-星期五-阴历八月初九" class="headerlink" title="09.25 星期五 阴历八月初九"></a>09.25 星期五 阴历八月初九</h2><p>今天早上仍旧八点多赶到医院，挂呼吸内科的号，今天坐诊的医生是李医生，我告诉她昨天的情况，拿出报告给她看，并说要住院，她看过片子后给我开了核酸以及抗体检测，毕竟我这也是肺炎，特殊时期，安全第一，做完后我回园区休息了三个小时，下午2点回到医院，暂时只有核酸的报告，我在旁边坐到快4点，抗体报告也出来了，都是阴性。我拿着两份报告去门诊一楼一个很小的房间登记，盖过章，说明我有住院资格了，去收费窗口预交了2000块，接下来我拿着那份算是入院许可的东西，赶往5号楼10楼，接下来的24天，这里是我另一个根据地。上楼后，第一印象是这医院不是很挤，至少没有在楼道里加床位。到了护士站，让我坐下量生命体征，我很想说一句无生命体征，话到了嘴边，最终没有皮这一下，又被问了一些个人情况，比如说，学历、身高、体重、住哪，还有应急联系人。<br>在两份记不清什么作用的同意书上签过字，护士姐姐们给我带上了医院的腕带，好吧，现在我是她们的人了。接着去了病房，6号房17床，嗯，此时病房里空无一人，一个挺年轻的医生再次询问了我的病情，比如有没有发烧、咳嗽之类的，我一一回答，旁边有人在记，记不清是医生还是护士了，或许是赵护士。在此期间我问晚上能不能回去住，被告知晚上一定要在，此路不通，我也就不再多想了。接下来我又见到了谁呢，呼吸科的吴主任，看着很慈祥，还有管房叶护士，都是些简单的交待，之后就没人理我了，差不多到五点半，我的药配好了，打针第一天，用的消炎药是头孢，还有一瓶很多的药，记不住了。。<br>没过多久今天的针就打完了，接下来也没别的事，我躺在床上思考人生，后来护士过来给我一份超声甲状腺的检查单，让我明天去做。晚上10点开始睡觉，不知道护士来过几次，因为是第一天住院，我睡眠很浅，有人站在门口的时候我都有意识，至少有三次吧，没有看表，不知道是几点。</p><h2 id="09-26-星期六-阴历八月初十"><a href="#09-26-星期六-阴历八月初十" class="headerlink" title="09.26 星期六 阴历八月初十"></a>09.26 星期六 阴历八月初十</h2><p>早上五点被叫醒，要抽血做血常规和肝功能，当时迷迷糊糊的，嗓子似乎还有点哑，感觉身体很虚弱，抽血的时候问护士姐姐为什么这么早，她说干完了这些好去干别的，我又迷糊着说了句上班好早啊，她说是夜班啊，又不是这个点跑来上班的，我说夜班辛苦啊，护士姐姐说夜班挺磨人的。莫名又想到了那个上夜班快疯了的女孩。抽过血又眯了一会儿，六点闹钟响了，起床洗漱在病房里转悠，被护士姐姐看到，问睡不着吗，我说已经休息够了。7点40的时候去门诊做超声，还好去的早，等了40分钟就到我了，做完当场拿到报告，甲状腺结节4a级，自己百度了一下，似乎还挺严重，但是4a的良性率还行，苦笑了一下。回到5号楼把报告拿给医生看，医生说4级以上都要切除，我承认我当时被吓到了，但害怕不会让病魔消失。从今天开始有了点心理作用，有事没事就在脖子那里捏几下，一直都摸不到。回到病房，叶护士看到我，去给我配了药，开始打今天的针，今天加了雾化吸入，早晚各一次，跟以前做的不太一样，要舒服很多。听到一天要打三次后我要求打留置针，不然身上要被捅成马蜂窝了，血管都不够用。一般来说，早上雾化和打针时间是八点，下午打针时间是14点，晚上雾化是六点，打针是八点，今天上午和下午各加了一瓶细辛脑，装在一瓶被黑色塑料袋包着的瓶子里，从今天到10月7号，用药都是如此。下午耳鼻喉的医生过来会诊，告诉我先把肺炎治好再转科过去做手术，因为手术要打全麻，可能导致肺炎加重，只能听医生安排了，当时我并不太想做手术，因为甲状腺不是阑尾，能留还是留着吧，想必也不会把甲状腺全切。今天又做了尿常规和大便常规，基本没有问题。空闲时间翻了几页《瓦尔登湖》，还是完全看不懂。上午打针的时候护士姐姐说我一看就是IT男，或许我该考虑换一身行头。傍晚的时候15床来了病人，是一个19岁大二在读的学生，不明原因咳血，医生下午不知道用什么药，给他开了点葡萄糖。</p><h2 id="09-27-星期日-阴历八月十一"><a href="#09-27-星期日-阴历八月十一" class="headerlink" title="09.27 星期日 阴历八月十一"></a>09.27 星期日 阴历八月十一</h2><p>今天医生查房，带着几个研究生，挨个听我肺上的声音，我一直吸气呼气，很配合，咳咳，该咳嗽的时候再象征性的咳两声，咳完他们就听不到声音了，耶！<br>早上15床小伙子不知道为什么流了鼻血，耳鼻喉的医生过来通知他去做咽喉镜，在此之前呼吸科已经给他开了气管镜的检查。打针的时候，跟叶护士唠嗑，她问我是学生吗，我说已经工作了，刚毕业三个月，我又说在考虑要不要回去再读两年，护士姐姐说，是读研吗？先把婚结了，我当场就说不可能，护士姐姐很忧伤的说自己都快30了，我惊为天人，说了句是吗，我以为还没有我大，另一个护士，我想应该就是孙护士吧，这个时候我并不知道她姓什么，戴着碎花帽子，衣服左下角有一块可能是不小心弄到的油污，医院里面医生和护士一直都带着口罩，我从未看到谁完整的面容，吴主任除外，10楼电梯旁边有他的介绍，上面有照片。只能从帽子、身形、声音等来判断了。孙护士说小伙子真会说话，我特么居然没有感到尴尬，看来脸皮厚度够了。另外不知道叶护士说是我要大两岁，还是说孙护士比我大两岁呢。<br>中午偷偷溜出去买了一份炒面，并且顺利的侦查到医院接热水的地方，不愧是我，一时间居然不知道怎么用的，被保洁阿姨上了一堂课。<br>吃过午饭休息了一会儿，到14点被叫醒开始打针，期间翻了几页《瓦尔登湖》，莫名奇妙觉得自己把书看完就能出院，然而理想与现实差距甚远，发现看不进去，只能去看《罗翔说刑法》。再晚点的时候订了明天的早餐，稀饭馒头和鸡蛋，一共6块，晚上就没什么事情了，仍旧是到了10点睡觉。</p><h2 id="09-28-星期一-阴历八月十二"><a href="#09-28-星期一-阴历八月十二" class="headerlink" title="09.28 星期一 阴历八月十二"></a>09.28 星期一 阴历八月十二</h2><p>今天15床小伙子去做了检查，回来的时候非常痛苦，说不出话而且还一直咳血，虽说这是气管镜的正常反应，但还是觉得有点吓人，我给了他一卷纸，并且把小垃圾桶给了他，相比之下我的甲状腺检查是真的很人性了，此刻的我还不知道自己也要做气管镜。小伙子的检查结果是鼻子那里长了东西，类似于息肉，确诊后第二天他就转到耳鼻喉科准备做手术了，病房里再次只剩我一人。<br>中午我出去买饭顺手帮他带了一份汤，一份10块，那个卖汤的阿姨还有点不情愿。都是一个人住院，就互相帮助吧，今天到30号叶护士休假，医生查房也没问什么问题，下午偷溜回园区拿了电脑，然而用的次数不超过五次，晚上打针的时候，跟护士说过谢谢，护士姐姐说它（药）都没滴，最后给我搞了点医用胶带把胳膊上的皮拉紧，这操作确实是第一次见，不得不说，高！护士姐姐摸了摸针管周围，说胳膊上这个地方已经发硬，针该换了，不然晚上胳膊要肿，我说那打完拔掉吧。打完针某实习护士过来封管，我说把针拔掉吧，她又去叫来了老师，拔针的时候15床小伙说拔针比打针还吓人，护士姐姐说可是一点都不痛啊。确实没什么感觉就拔掉了。今天打完针我暂时解除了“封印”。<br>晚上给我打针和拔针的，应该是孙护士吧，现在我并不知道她的名字。</p><h2 id="09-29-星期二-阴历八月十三"><a href="#09-29-星期二-阴历八月十三" class="headerlink" title="09.29 星期二 阴历八月十三"></a>09.29 星期二 阴历八月十三</h2><p>今天早上病友转科了，我说过几天我也会过去，可这一过就是一个月，今天重新打留置针的时候护士姐姐说我的血管是在难为她，不过还是一针见血，这一根针管一直用到10月7号，很棒！然后是今天，也可能是明天下午，我的第二个病友来了。<br>今天打针的时候跟护士姐姐闲聊，她惊讶我今年居然能找到工作，其实我是校招就签好的，<br>不然我大概率就是家里蹲。</p><h2 id="09-30-星期三-阴历八月十四"><a href="#09-30-星期三-阴历八月十四" class="headerlink" title="09.30 星期三 阴历八月十四"></a>09.30 星期三 阴历八月十四</h2><p>今天打针是孙护士和某实习生，她们俩在吐槽一个病人，是一个脾气很坏的婆婆，她总是在跟医院的人吵架，进五号楼的时候看到保安要查陪护证明或腕带，这些她是有的，但还是要跟保安吵两句，具体在吵什么我也听不懂，说的方言，我猜是对医院的制度很不满，或者是无聊想找人吵两句而已。在10楼的时候有事没事要跟医生护士吵。孙护士对那个实习生说不要理她，她说什么都是对的，听到这句话我很想笑，但不敢笑出声。<br>今天中午出去买饭，过完马路听到一声急刹车，回头看的时候，有个叔叔躺在地上，医院门口发生了一场车祸，问题应该不严重，车速不快，本着远离是非的心态，我买完饭就溜回了病房。<br>今天下午我的第二个病友来了，是一个43岁的大哥，每次打针都要说一句明天不打了，结果第二天还是要打。</p><h2 id="10-01-星期四-阴历八月十五"><a href="#10-01-星期四-阴历八月十五" class="headerlink" title="10.01 星期四 阴历八月十五"></a>10.01 星期四 阴历八月十五</h2><p>真是悲惨的一天，没有月饼吃，也不能出去玩，唯一让我觉得有点节日氛围的，就是病房门口挂的国旗了。今天叶护士休假回来了，她说去练科三了，听到这句话我又想到自己拿完驾照就没摸过车。打针的时候大哥打开了电视看去年的阅兵，偶尔看看电视也不错，至少不会那么无聊，下午翻看了好多页《瓦尔登湖》，我想在假期结束前把书看完，我很担心书看不完不能出院，这个心理作用一直在“激励”着我去看书。</p><h2 id="10-02-星期五-阴历八月十六"><a href="#10-02-星期五-阴历八月十六" class="headerlink" title="10.02 星期五 阴历八月十六"></a>10.02 星期五 阴历八月十六</h2><p>今天中午大哥收拾东西先走了，说等五号回来做检查，做完胃镜做肠镜，真的强！对镜检毫无畏惧。本来他是来治脚伤顺便检查身体，不知道为什么就住到呼吸科来了，说是肺上有结节，我以前做CT似乎也有。搞不懂。<br>暂时只剩我一个人了，等到下午4点多，我的第三个病友来了，一个55岁的伯伯，二型呼衰加慢阻肺，能走但走不能走太远，是护士推着进来的，他儿子没做核酸检测，暂时上不来，没法陪护，但是我在这里，Who am I?社会主义五好青年，没有什么困难是不能解决的。晚上下雨，我下楼给那位称呼我为师傅的30岁大哥（伯伯的儿子）送伞，真的服气，我装作不生气好吧。点晚餐的时候顺便帮伯伯点了一份牛肉面。吃饱了剩下的都不是问题。<br>这个伯伯要经常查血气，看二氧化碳含量，抽血气应该很疼，因为动脉比较深，不像静脉就在表面。护士姐姐今天似乎没什么手感，四个人一起，十多分钟才搞好。</p><h2 id="10-03-星期六-阴历八月十七"><a href="#10-03-星期六-阴历八月十七" class="headerlink" title="10.03 星期六 阴历八月十七"></a>10.03 星期六 阴历八月十七</h2><p>今天医生查房打算过两天让我去复查CT，听到这句话我挺高兴，以为能出院了，下午打针的时候疯狂的翻《瓦尔登湖》，今天下午就看了50多页，生怕看不完。<br>中午吃饭也是跟伯伯一起点，就是顺路跑个腿，外面雨很大，取餐的时候看到保安跟一个乱停车的人差点打起来，也是醉了，没敢多看，提着饭我就溜了。<br>下午4点的时候伯伯的儿子到了，晚餐我就只点了自己的，想到可能要出院了，晚上睡觉都很开心。<br>八点多打针的时候，听到外面有人吵架，也是方言，根本听不懂在吵什么。<br>大概是九点多，伯伯闻到有烟味，他儿子也闻到了，我没有闻到，大哥出去看了看，有人在走廊窗户边抽烟，大哥应该是说请不要在医院抽烟，那人没有理他，大哥去找护士说要投诉，护士姐姐也很无奈，说那家有人在抢救，最好还是不要搭理他们，难道你想挨打吗。护士姐姐和大哥两人情绪都很激动，差点吵起来，伯伯教训了大哥几句，说护士也是为了你好，事情就这么平息了，不过大哥还是心有不服。<br>我把一切看在眼里，其实这种情况我不知道要怎么办。</p><h2 id="10-04-星期日-阴历八月十八"><a href="#10-04-星期日-阴历八月十八" class="headerlink" title="10.04 星期日 阴历八月十八"></a>10.04 星期日 阴历八月十八</h2><p>今天医生给我开了CT还有肺功能的检查，上午打完针我就去做CT，没开门，那只能下午，中午跟伯伯一起吃的饭，点了鱼香肉丝和酸辣土豆丝两个菜，还有一份西红柿鸡蛋汤，吃起来感觉很不错，伯伯请客，我也没有推脱，很感谢。<br>下午没打针，先去做的CT ，然后去肺功能，等肺功能做完的时候CT的报告也就出来了，可是结果不如人意呢，对比原片只是稍显吸收，肺功能倒是没有问题，本来殷医生说我肺上有啰音。本来开的是舒张，拿到报告后医生给我换成激发重新做了一遍，麻烦了那个检查的医生姐姐两次，一直没把握好检查的节奏，浪费了好长时间。做激发的时候需要用药，刺激咳嗽，略微痛苦。<br>看到检查结果心情不是太好，早早的睡了。</p><h2 id="10-05-星期一-阴历八月十九"><a href="#10-05-星期一-阴历八月十九" class="headerlink" title="10.05 星期一 阴历八月十九"></a>10.05 星期一 阴历八月十九</h2><p>今天早上有点不想起床，心情还是很低落，伯伯就开导了我几句，但是自己仍然想不通，可能是在医院呆久了压抑，加上检查结果并不理想。<br>白天打针的时候伯伯跟我聊天，说钱是什么，钱就是人身上的灰，花钱就当是洗澡了，灰过几天还会有的，然后跟我聊他年轻时候的经历，自己开车出去，300公里见不到一个人，别人都不敢去，但他敢。另外还聊一些他家中的事情。<br>伯伯说有些话也就跟我说说，因为是陌生人，出院了大家就不认识了，也不会有什么负担。<br>伯伯似乎有点抑郁，可能是慢性病太久了吧，总会乱想，晚上也睡不好，精神科医生给他开了抗抑郁的药物，不知道有没有用。<br>早上查房医生告诉我要做气管镜，谈话过程中医生了解到我曾经得过肺炎，让我把家里的片子拿来比对一下，我想是抓到了救命稻草，因为真的不想做镜检，我就打电话让老爸给我邮寄。心情似乎又好了一些。</p><h2 id="10-06-星期二-阴历八月二十"><a href="#10-06-星期二-阴历八月二十" class="headerlink" title="10.06 星期二 阴历八月二十"></a>10.06 星期二 阴历八月二十</h2><p>今天下午打完针回去取了片子，出医院的时候是四点半，等公交时看到伯伯打来微信电话，应该是订早餐的人来了。伯伯帮我点了第二天的早餐，不然我就只能吃面包了。取过片子后在园区吃了晚饭，然后去理了发，头发长的快像野人了。等到6点回医院，拿给刘医生看说还是没有好转，没办法，只能继续消炎了，心情又开始低落。<br>今天的大哥43岁出院了，或许是转到消化科，他胃上有息肉。<br>晚上仍旧睡的很早。好久没看到那顶碎花帽子了，应该是在休假。</p><h2 id="10-07-星期三-阴历八月廿一"><a href="#10-07-星期三-阴历八月廿一" class="headerlink" title="10.07 星期三 阴历八月廿一"></a>10.07 星期三 阴历八月廿一</h2><p>今天医生查房再次建议做气管镜，我同意了，我不想做但并不怕。跟医生商量说今天针打完先停两天，我觉得现在用头孢意义不大了，打完没什么感觉，不像头两天打过后就不怎么喘了。我说等10号内镜室上班的时候我再回来，医生说可以，我就暂且离开医院回了园区，晚上又被叫去签了特殊检查同意书，一开始我以为商医生让我签的就是，没曾想签的是拒绝特殊检查。一波三折事情总算办好了。晚上去病房看到隔壁床伯伯家阿姨来陪护，晚餐点多了，送我一盒小花卷，真好，回宿舍的时候我顺手买了个锅盔，这就是今天的晚餐。</p><h2 id="10-08-星期四-阴历八月廿二"><a href="#10-08-星期四-阴历八月廿二" class="headerlink" title="10.08 星期四 阴历八月廿二"></a>10.08 星期四 阴历八月廿二</h2><p>今天上班，无事发生。</p><h2 id="10-09-星期五-阴历八月廿三"><a href="#10-09-星期五-阴历八月廿三" class="headerlink" title="10.09 星期五 阴历八月廿三"></a>10.09 星期五 阴历八月廿三</h2><p>今天上班，无事发生。</p><h2 id="10-10-星期六-阴历八月廿四"><a href="#10-10-星期六-阴历八月廿四" class="headerlink" title="10.10 星期六 阴历八月廿四"></a>10.10 星期六 阴历八月廿四</h2><p>今天我带着室友去了医院，说是做特殊检查需要带一个人，实际上室友在门诊玩了两个小时手机，我在里面一根管子从鼻子到肺，因为早有心理准备，也没有感觉到那么痛苦。检查右肺的时候感觉还好，没有咳，到左肺反应很严重，因为炎症都在这边，医生看到有好多痰，肺部有脓肿导致气管变形，通过管子打了点药，医生不敢多碰，说这里一碰就出血。咳的时候也不能用力，但又止不住的咳。做完检查咳血两个小时，感觉顺带咳出好多的痰，咳出来之后呼吸又顺畅许多。到中午饿的不行，点了一碗稀饭垫了垫。<br>今天早上进病房看到第四个病友，是一个64岁的大伯，不知道什么时候来的，CT显示他肺部有肿瘤。<br>等到下午4点多医生来给16床伯伯调呼吸机，我问了下检查结果出来没有，医生说还没有，等到五点我又跑回了园区。</p><h2 id="10-11-星期日-阴历八月廿五"><a href="#10-11-星期日-阴历八月廿五" class="headerlink" title="10.11 星期日 阴历八月廿五"></a>10.11 星期日 阴历八月廿五</h2><p>今天早上去医院，医生查房告诉我仍有炎症，需要继续消炎，但是打算换药，改用莫西沙星，感觉这个药的效果还是比头孢好一些的。<br>跟医生商量，说可以白天上班，晚上到医院打针，我觉得这就很方便。<br>叶护士似乎去学习了，今天来打针的是孙护士，好久不见。她问我是不是上次就住17床，我说我压根就没出院，只是有两天上班，没来打针。可能是我理了发，一时间没认不出来。<br>两瓶药，大概一个半小时打完，之后我又溜了。不仅仅是方便自己，我回去的话可以把床位留给隔壁床的阿姨睡，后面一周不管再晚我都会回去。</p><h2 id="10-12-星期一-阴历八月廿六"><a href="#10-12-星期一-阴历八月廿六" class="headerlink" title="10.12 星期一 阴历八月廿六"></a>10.12 星期一 阴历八月廿六</h2><p>白天上班。<br>晚上打针仍旧是孙护士，说我钢针打多了手上全是孔，我说没办法，上班带着留置针不方便。<br>隔壁床伯伯住久了，似乎心情不太好，觉得一直在医院打针也没有看到好转，二氧化碳含量一直在65上下。不过他就快出院了，回家保养就可以。</p><h2 id="10-13-星期二-阴历八月廿七"><a href="#10-13-星期二-阴历八月廿七" class="headerlink" title="10.13 星期二 阴历八月廿七"></a>10.13 星期二 阴历八月廿七</h2><p>白天上班。<br>晚上打针是一个不认识的护士！在昨天扎过的地方又扎了一下，虽然一针见血，但真的很痛啊，而且手上紫了一小块，我的天。<br>今天16床的伯伯已经出院，希望他的病不要再发作。15床的64岁的大伯说自己去做气管镜，医生没看到肿瘤，然后又做了一个8400多的顶级CT，还是没看到，确诊只是肺部有炎症，打消炎针就行。检查虽然贵，不过做完检查他心里不慌了。</p><h2 id="10-14-星期三-阴历八月廿八"><a href="#10-14-星期三-阴历八月廿八" class="headerlink" title="10.14 星期三 阴历八月廿八"></a>10.14 星期三 阴历八月廿八</h2><p>白天上班。<br>今天是打针是孙护士，我说还是左手，但是那根血管就算了，昨天跟前天扎到同一个地方，现在都紫了。她问我昨天是她打的吗，我说不是，她好像松了一口气。当然不是。那顶帽子不是碎花的。</p><h2 id="10-15-星期四-阴历八月廿九"><a href="#10-15-星期四-阴历八月廿九" class="headerlink" title="10.15 星期四 阴历八月廿九"></a>10.15 星期四 阴历八月廿九</h2><p>白天上班。<br>晚上打针的时候，孙护士跟我打了个招呼，让我觉得意外又开心，今天打的右手，她看到我手上的腕带，问我上班也带着吗，我说是啊，怕弄丢了进不来医院，她问我工作是做什么的，我迟疑了两秒，想说程序猿但又不敢说，她说如果不想回答就当没问，那当然不能这么当没问，我说自己是做软件测试的，目前还在学习中，公司给了三台电脑让我们测试。打针的时候稍微偏了一下，挪了下针头才看到有血流出来。她问刚才那一下疼不疼，我说还好啊，她说今天打针没手感，我想起来入职抽血的时候，有个护士在我胳膊上捅了两分钟才出来血，居然把护士姐姐逗笑了，很小声很文静，真好。<br>今天隔壁床多了个17岁的小伙子，似乎也是该去耳鼻喉科的。</p><h2 id="10-16-星期五-阴历八月三十"><a href="#10-16-星期五-阴历八月三十" class="headerlink" title="10.16 星期五 阴历八月三十"></a>10.16 星期五 阴历八月三十</h2><p>白天上班。<br>今天打针是另外一个护士姐姐，说我血管不太明显，可能是最近针打多了，我问还会恢复吗，她说当然会。打的时候我说一句一针不行就再来一针，护士姐姐似乎觉得我不信任她，笑着说就没失手过。<br>今天没有见到孙护士。</p><h2 id="10-17-星期六-阴历九月初一"><a href="#10-17-星期六-阴历九月初一" class="headerlink" title="10.17 星期六 阴历九月初一"></a>10.17 星期六 阴历九月初一</h2><p>今天不上班，早上我就去了医院，医生查房的时候说我是金黄色葡萄球菌，肺部有脓肿，但是打针有一周了，可以再复查一下，本意是让我周日去做，可是我拿到单子后今天就去做了，下午四点取到结果，医生说过两天可以出院了。至于甲状腺那里，会再叫耳鼻喉的医生过来会诊。<br>今天15床大伯打针的时候跟护士姐姐吐槽，说昨天的师傅（护士）手艺不行，扎了三次。又问护士姐姐昨天是你吗。我憋住了衣冠禽兽般的笑。<br>我等医生到五点半，医生没有来，只能回园区去了，走之前隔壁床弟弟让我再来的时候帮忙带几瓶营养快线，他现在不能吃硬东西，一吃喉咙就疼。<br>今天没有见到孙护士。</p><h2 id="10-18-星期日-阴历九月初二"><a href="#10-18-星期日-阴历九月初二" class="headerlink" title="10.18 星期日 阴历九月初二"></a>10.18 星期日 阴历九月初二</h2><p>早上8点20左右到医院，给隔壁床小伙子带了四瓶营养快线，不得不说还挺重。<br>上午打完针就一直在等医生过来会诊，午饭也没去买，下午三点半左右医生来了，建议出院调养两周，如果肺炎没有出现反复，就可以择期行甲状腺手术。<br>今天那个64岁伯伯出院了。<br>今天没有见到孙护士。</p><h2 id="10-19-星期一-阴历九月初三"><a href="#10-19-星期一-阴历九月初三" class="headerlink" title="10.19 星期一 阴历九月初三"></a>10.19 星期一 阴历九月初三</h2><p>今天请假去医院，打完针就一直等着办出院手续，隔壁床弟弟转科去了耳鼻喉。<br>今天打针的是赵护士，她说终于见到我人了。<br>下午三点开始办手续，要收病人没床位了才想起我，10分钟左右手续办好，回到病房收拾完东西，17床已经来了新的病人，我把雾化面罩丢进了垃圾桶，接下来带着所有的CT影像以及住院材料去办理结账，再去一号楼四楼预约病历邮寄，这些事情办妥大概到四点，然后带着所有东西回了园区，在等926路公交的时候取下带了24天的腕带。<br>今天没有看到孙护士，但她应该是在的，经常听到有人叫她名字。<br>就算遇到了真心喜欢的女子，也只敢相忘于江湖，止于此，谢谢你。</p><h2 id="记忆碎片"><a href="#记忆碎片" class="headerlink" title="记忆碎片"></a>记忆碎片</h2><p>9月26号的时候跟YY打了QQ电话，12分钟，她安慰我说甲状腺手术很轻松的。后来她说分手好难熬，而我第二天才看到她的QQ消息（手机陪伴我五年，它已心力憔悴），从此再也没有过消息。</p><p>GOD F知道我住院以后甚至要来照顾我，不得不说，还有个这样的朋友，真不错。</p><p>住院前主管说抽空来看看我，住院后几天同事大姐也说要来，医院管控比较严，就没有麻烦他们，十分感谢。</p><p>有一次做完雾化，孙护士取不下雾化工具，问我能不能帮帮忙，我刚下床她就取下来了，这样造成的结果是第二天我用蛮力拔了雾化器五分钟，最后发现往里按一下就会自动弹出来。后来每次做完雾化我都会先取下来，叶护士还很惊讶，问我怎么取下来的。</p><p>有一次晚上等926路等了四十分钟，最后上了922路，我在佛祖岭下车的时候看到926路迎面开来。</p><p>《瓦尔登湖》在第一次复查CT（10月4号）前已经看完了。</p><p>算上24号在门诊的费用以及多次打车，总费用接近18000。</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python绘图之matplotlib</title>
      <link href="/2020/10/23/python%E7%BB%98%E5%9B%BE%E4%B9%8Bmatplotlib/"/>
      <url>/2020/10/23/python%E7%BB%98%E5%9B%BE%E4%B9%8Bmatplotlib/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>记录一些matplotlib绘图常用语法。谨防遗忘。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#更改绘图风格</span></span><br><span class="line">plt.style.use(<span class="string">&#x27;seaborn-whitegrid&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建图形对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment">#创建坐标轴对象</span></span><br><span class="line">ax = plt.axes()</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成numpy数组</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#分别绘制正弦、余弦函数图像</span></span><br><span class="line">plt.plot(x,np.cos(x))</span><br><span class="line">plt.plot(x,np.sin(x))</span><br><span class="line"><span class="comment">#也可以操作坐标轴绘图，跟上面作用一致</span></span><br><span class="line">ax.plot(x,np.sin(x))</span><br><span class="line"></span><br><span class="line"><span class="comment">#多种方式修改线条颜色</span></span><br><span class="line">plt.plot(x,np.sin(x - <span class="number">0</span>),color = <span class="string">&#x27;blue&#x27;</span>)         <span class="comment">#颜色名称</span></span><br><span class="line">plt.plot(x,np.sin(x - <span class="number">1</span>),color = <span class="string">&#x27;g&#x27;</span>)            <span class="comment">#颜色简写名称(rgbcmyk)</span></span><br><span class="line">plt.plot(x,np.sin(x - <span class="number">2</span>),color = <span class="string">&#x27;0.75&#x27;</span>)         <span class="comment">#介于0-1之间的灰阶值</span></span><br><span class="line">plt.plot(x,np.sin(x - <span class="number">3</span>),color = <span class="string">&#x27;#FFDD44&#x27;</span>)      <span class="comment">#16进制RRGGBB值</span></span><br><span class="line">plt.plot(x,np.sin(x - <span class="number">4</span>),color = (<span class="number">1.0</span>,<span class="number">0.2</span>,<span class="number">0.3</span>))  <span class="comment">#RGB元组的颜色值，每个值介于0-1</span></span><br><span class="line">plt.plot(x,np.sin(x - <span class="number">5</span>),color = <span class="string">&#x27;chartreuse&#x27;</span>)   <span class="comment">#能支持所有HTML颜色名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改线条风格</span></span><br><span class="line">plt.plot(x,x + <span class="number">0</span>,linestyle = <span class="string">&#x27;solid&#x27;</span>)</span><br><span class="line">plt.plot(x,x + <span class="number">1</span>,linestyle = <span class="string">&#x27;dashed&#x27;</span>)</span><br><span class="line">plt.plot(x,x + <span class="number">2</span>,linestyle = <span class="string">&#x27;dashdot&#x27;</span>)</span><br><span class="line">plt.plot(x,x + <span class="number">3</span>,linestyle = <span class="string">&#x27;dotted&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改线条风格</span></span><br><span class="line">plt.plot(x,x + <span class="number">4</span>,linestyle = <span class="string">&#x27;-&#x27;</span>) <span class="comment">#实线</span></span><br><span class="line">plt.plot(x,x + <span class="number">5</span>,linestyle = <span class="string">&#x27;--&#x27;</span>) <span class="comment">#虚线</span></span><br><span class="line">plt.plot(x,x + <span class="number">6</span>,linestyle = <span class="string">&#x27;-.&#x27;</span>) <span class="comment">#长短点虚线</span></span><br><span class="line">plt.plot(x,x + <span class="number">7</span>,linestyle = <span class="string">&#x27;:&#x27;</span>) <span class="comment">#点线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#同时修改线条颜色和风格</span></span><br><span class="line">plt.plot(x,x + <span class="number">0</span>,<span class="string">&#x27;-g&#x27;</span>)<span class="comment">#绿色实线</span></span><br><span class="line">plt.plot(x,x + <span class="number">1</span>,<span class="string">&#x27;--c&#x27;</span>)<span class="comment">#天青色虚线</span></span><br><span class="line">plt.plot(x,x + <span class="number">2</span>,<span class="string">&#x27;-.k&#x27;</span>)<span class="comment">#黑色长短点虚线</span></span><br><span class="line">plt.plot(x,x + <span class="number">3</span>,<span class="string">&#x27;:r&#x27;</span>)<span class="comment">#红色点线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#绘图的同时指定线条风格、颜色，以及图形对应的图例</span></span><br><span class="line">plt.plot(x,np.sin(x),<span class="string">&#x27;-g&#x27;</span>,label = <span class="string">&#x27;sin(x)&#x27;</span>)</span><br><span class="line">plt.plot(x,np.cos(x),<span class="string">&#x27;:b&#x27;</span>,label = <span class="string">&#x27;cos(x)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定坐标轴范围</span></span><br><span class="line">plt.xlim(-<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line">plt.ylim(-<span class="number">1.5</span>,<span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以将坐标轴反转</span></span><br><span class="line">plt.xlim(<span class="number">10</span>,<span class="number">0</span>)</span><br><span class="line">plt.ylim(<span class="number">1.2</span>,-<span class="number">1.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用axis指定坐标轴范围，传递的参数是一个4元素列表</span></span><br><span class="line">plt.axis([-<span class="number">1</span>,<span class="number">11</span>,-<span class="number">1.5</span>,<span class="number">1.5</span>])</span><br><span class="line"><span class="comment">#将坐标轴范围设定为与图像契合</span></span><br><span class="line">plt.axis(<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line"><span class="comment">#让x、y轴使用相同的单位</span></span><br><span class="line">plt.axis(<span class="string">&#x27;equal&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设定绘图标题</span></span><br><span class="line">plt.title(<span class="string">&#x27;A Sine Curve&#x27;</span>)</span><br><span class="line"><span class="comment">#设定x轴标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="comment">#设定y轴标题</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;sin(x)&#x27;</span>)</span><br><span class="line"><span class="comment">#设定图例</span></span><br><span class="line">plt.legend()</span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中json模块的使用</title>
      <link href="/2020/10/20/python%E4%B8%ADjson%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/10/20/python%E4%B8%ADjson%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>从9月26号因病住院，到10月19号暂时出院，这期间一直没有机会写博客，在园区的时候也总忍不住玩游戏，必须要做些什么才行，就慢慢的回到学习的状态吧。</p><h2 id="Json模块"><a href="#Json模块" class="headerlink" title="Json模块"></a>Json模块</h2><p>该模块为python3.x自带模块，无需使用pin install命令进行安装。<br>使用方式：<br>import json</p><h2 id="json-loads"><a href="#json-loads" class="headerlink" title="json.loads()"></a>json.loads()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#input</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">a = <span class="string">&quot;[1,2,3,4]&quot;</span></span><br><span class="line">b = <span class="string">&#x27;&#123;&quot;k1&quot;:1,&quot;k2&quot;:2&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(json.loads(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(json.loads(a)))</span><br><span class="line"><span class="built_in">print</span>(json.loads(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(json.loads(b)))</span><br><span class="line"><span class="comment">#output</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&#123;&#x27;<span class="title">k1</span>&#x27;:</span> <span class="number">1</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="json-dumps"><a href="#json-dumps" class="headerlink" title="json.dumps()"></a>json.dumps()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#input</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b = &#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line">c = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">d = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;中国&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(json.dumps(a))</span><br><span class="line"><span class="built_in">print</span>(json.dumps(b))</span><br><span class="line"><span class="built_in">print</span>(json.dumps(c))</span><br><span class="line"><span class="built_in">print</span>(json.dumps(d))</span><br><span class="line"><span class="comment">#想要正常输出中文需要将ensure_ascii指定为False</span></span><br><span class="line"><span class="built_in">print</span>(json.dumps(d,ensure_ascii = <span class="literal">False</span>))</span><br><span class="line"><span class="built_in">print</span>(chardet.detect(json.dumps(d).encode()))</span><br><span class="line"><span class="comment">#output</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">&#123;<span class="string">&quot;k1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;k2&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;\u4e2d\u56fd&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;中国&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;ascii&#x27;</span>, <span class="string">&#x27;confidence&#x27;</span>: <span class="number">1.0</span>, <span class="string">&#x27;language&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="json-dump"><a href="#json-dump" class="headerlink" title="json.dump()"></a>json.dump()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment">#将a保存到digital.json文件中</span></span><br><span class="line">json.dump(a,<span class="built_in">open</span>(<span class="string">&quot;digital.json&quot;</span>,<span class="string">&quot;w&quot;</span>))</span><br><span class="line">b = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;我&quot;</span>&#125;</span><br><span class="line"><span class="comment">#name.json中的“我”字为正常中文</span></span><br><span class="line">json.dump(b,<span class="built_in">open</span>(<span class="string">&quot;name.json&quot;</span>,<span class="string">&quot;w&quot;</span>),ensure_ascii = <span class="literal">False</span>)</span><br><span class="line"><span class="comment">#name2.json中的“我”字为Unicode编码</span></span><br><span class="line">json.dump(b,<span class="built_in">open</span>(<span class="string">&quot;name2.json&quot;</span>,<span class="string">&quot;w&quot;</span>),ensure_ascii = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="json-load"><a href="#json-load" class="headerlink" title="json.load()"></a>json.load()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#input</span></span><br><span class="line">number = json.load(<span class="built_in">open</span>(<span class="string">&quot;digital.json&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(number))</span><br><span class="line"><span class="built_in">print</span>(number)</span><br><span class="line">b = json.load(<span class="built_in">open</span>(<span class="string">&quot;name.json&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(b.keys())[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(b[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="comment">#output</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">[1, 2, 3, 4]</span></span><br><span class="line"><span class="class">&#123;&#x27;<span class="title">name</span>&#x27;:</span> <span class="string">&#x27;我&#x27;</span>&#125;</span><br><span class="line">name</span><br><span class="line">我</span><br></pre></td></tr></table></figure><h2 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取豆瓣电影及评分</span></span><br><span class="line"><span class="keyword">import</span> josn</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/j/search_subjects?type=movie&amp;tag=%E7%83%AD%E9%97%A8&amp;page_limit=50&amp;page_start=0&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Referer&#x27;</span>:<span class="string">&#x27;https://movie.douban.com&#x27;</span>,<span class="string">&#x27;Connection&#x27;</span>:<span class="string">&#x27;keep-alive&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">req = requests.get(url = url,headers = headers)</span><br><span class="line">html = req.text</span><br><span class="line">hjson = json.loads(html)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> hjson[<span class="string">&quot;subjects&quot;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(item[<span class="string">&#x27;rate&#x27;</span>],item[<span class="string">&#x27;title&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> jsonpath</span><br><span class="line">url = <span class="string">&#x27;http://www.lagou.com/lbs/getAllCitySearchLabels.json?&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36&#x27;</span>, <span class="string">&#x27;Referer&#x27;</span>:<span class="string">&#x27;https://movie.douban.com&#x27;</span>,<span class="string">&#x27;Connection&#x27;</span>:<span class="string">&#x27;keep-alive&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">req = requests.get(url = url,headers = headers)</span><br><span class="line">html = req.text</span><br><span class="line">hjson = json.loads(html)</span><br><span class="line"><span class="comment">#输出拼音首字母为A的城市</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> hjson[<span class="string">&#x27;content&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;allCitySearchLabels&#x27;</span>][<span class="string">&quot;A&quot;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(item[<span class="string">&#x27;name&#x27;</span>],item[<span class="string">&#x27;code&#x27;</span>])</span><br><span class="line"><span class="comment">#使用jsonpath解析数据，并将所有城市保存</span></span><br><span class="line">citylist = jsonpath.jsonpath(hjson,<span class="string">&quot;$..name&quot;</span>)</span><br><span class="line">content = json.dumps(citylist,ensure_ascii = <span class="literal">False</span>)</span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;city.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">fp.write(content)</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>json.loads()将json字符串转换为python类型，json.dumps()将python类型转换为json字符串。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>19号出院后我写了大概6400字的日记，记录住院这些天的所见所闻，文笔不好，只作留存记忆用，如果哪天我想起来为那篇日记润色，就会一点点的写到博客里。<br>若是遇到了真心喜欢的女子，怕也只敢相忘于江湖。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次多线程的使用</title>
      <link href="/2020/09/21/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/09/21/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>同事老哥想让我把一个网站上所有的pdf资料爬下来，但实在是太多了，可能会对网站造成破坏，所以想了个折中的方式，把所有书的下载链接爬取下来。为了提升效率，简单的用了一下多线程。</p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请求网页</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#操作excel</span></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="comment">#调用多线程</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="comment">#解析网页</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br></pre></td></tr></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#目标地址，一共有863页</span></span><br><span class="line">urls = [<span class="string">&#x27;http://www.allitebooks.org/page/&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">864</span>)]</span><br><span class="line"><span class="comment">#设置请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.13 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#创建表格</span></span><br><span class="line">wb = openpyxl.Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">ws.title = <span class="string">&#x27;books&#x27;</span></span><br><span class="line"><span class="comment">#添加第一列</span></span><br><span class="line">ws.append([<span class="string">&#x27;BookName&#x27;</span>,<span class="string">&#x27;DownloadLinks&#x27;</span>])</span><br><span class="line">threading_list = []</span><br><span class="line"><span class="comment">#调整列宽</span></span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>]:</span><br><span class="line">    ws.column_dimensions[column].width = <span class="number">13.0</span></span><br></pre></td></tr></table></figure><h2 id="运行函数"><a href="#运行函数" class="headerlink" title="运行函数"></a>运行函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">urls,i</span>):</span></span><br><span class="line"><span class="comment">#当urls不为空的时候循环执行</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="comment">#为空时跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(urls) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#请求网页,获取urls列表中的第一条，并删除该条</span></span><br><span class="line">            res = requests.get(url = urls.pop(<span class="number">0</span>),headers = headers)</span><br><span class="line">            res.encoding = res.apparent_encoding</span><br><span class="line"><span class="comment">#解析网页并找到该页所有书目</span></span><br><span class="line">            bf = bs(res.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">            book_list = bf.find_all(<span class="string">&#x27;h2&#x27;</span>,class_ = <span class="string">&quot;entry-title&quot;</span>)</span><br><span class="line"><span class="comment">#逐条清洗数据</span></span><br><span class="line">            <span class="keyword">for</span> book <span class="keyword">in</span> book_list:</span><br><span class="line"><span class="comment">#获取书名</span></span><br><span class="line">                book_title = book.find(<span class="string">&#x27;a&#x27;</span>).text</span><br><span class="line"><span class="comment">#获取书籍详细页面地址</span></span><br><span class="line">                book_url = book.find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line"><span class="comment">#请求详细页面</span></span><br><span class="line">                res = requests.get(url = book_url, headers = headers)</span><br><span class="line">                res.encoding = res.apparent_encoding</span><br><span class="line"><span class="comment">#解析获得电子书下载地址</span></span><br><span class="line">                bz = bs(res.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">                download_links = bz.find(<span class="string">&#x27;span&#x27;</span>,class_ = <span class="string">&quot;download-links&quot;</span>).find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line"><span class="comment">#保存合格的数据（即下载地址后缀为pdf的数据）</span></span><br><span class="line">                second_name = download_links.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> second_name[-<span class="number">1</span>] == <span class="string">&#x27;pdf&#x27;</span>:</span><br><span class="line">                    ws.append([book_title, download_links])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;线程--&gt;%d--&gt;已获取一页&quot;</span> % i)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建五个线程</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    t = threading.Thread(target = run,args = (urls,i,))</span><br><span class="line">    t.start()</span><br><span class="line"><span class="comment">#将线程添加到线程列表</span></span><br><span class="line">    threading_list.append(t)</span><br><span class="line"><span class="comment">#让主线程等待所有子线程执行完毕</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threading_list:</span><br><span class="line">    t.join()</span><br><span class="line"><span class="comment">#保存工作表</span></span><br><span class="line">wb.save(<span class="string">&#x27;allitebooks.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>这个网站是国外的，所以就算是用了多线程，也花了接近两个小时才获取全部数据，2333.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyecharts绘制动态图表</title>
      <link href="/2020/09/21/pyecharts%E7%BB%98%E5%88%B6%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A1%A8/"/>
      <url>/2020/09/21/pyecharts%E7%BB%98%E5%88%B6%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文来自微信公众号：python数据分析之禅，创作不易，请支持原作者。</p><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用到的包</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="comment">#微博热搜地址</span></span><br><span class="line">BASE_URL = <span class="string">&#x27;https://s.weibo.com/top/summary&#x27;</span></span><br><span class="line"><span class="comment">#创建csv文件，并填入表头</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.csv&#x27;</span>,<span class="string">&#x27;wt&#x27;</span>,newline = <span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f_csv = csv.writer(f)</span><br><span class="line">    f_csv.writerow([<span class="string">&#x27;时间&#x27;</span>,<span class="string">&#x27;排名&#x27;</span>,<span class="string">&#x27;热度&#x27;</span>,<span class="string">&#x27;内容&#x27;</span>])</span><br><span class="line"><span class="comment">#设置请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#爬取数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="comment">#请求热搜地址</span></span><br><span class="line">    res = requests.get(url = BASE_URL,headers = headers)</span><br><span class="line">    res.encoding = res.apparent_encoding</span><br><span class="line">    <span class="comment">#使用BeautifulSoup解析网页</span></span><br><span class="line">    html = bs(res.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    items = html.find_all(<span class="string">&#x27;td&#x27;</span>,class_ = <span class="string">&quot;td-02&quot;</span>)</span><br><span class="line">    <span class="comment">#获取当前时间并格式化</span></span><br><span class="line">    time_stramp = time.strftime(<span class="string">&#x27;%Y/%m/%d %H:%M&#x27;</span>,time.localtime())</span><br><span class="line">    <span class="comment">#枚举热搜榜前10</span></span><br><span class="line">    <span class="keyword">for</span> i,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(items[<span class="number">1</span>:<span class="number">11</span>]):</span><br><span class="line">        <span class="comment">#空列表用于保存一条数据</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="comment">#根据顺序排名</span></span><br><span class="line">        rank = <span class="string">&#x27;第&#123;0&#125;名&#x27;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>)</span><br><span class="line">        <span class="comment">#获取热度</span></span><br><span class="line">        num = item.find(<span class="string">&#x27;span&#x27;</span>).text</span><br><span class="line">        <span class="comment">#获取热搜标题</span></span><br><span class="line">        title = item.find(<span class="string">&#x27;a&#x27;</span>).text</span><br><span class="line">        <span class="comment">#添加到列表中</span></span><br><span class="line">        result.append(time_stramp)</span><br><span class="line">        result.append(rank)</span><br><span class="line">        result.append(num)</span><br><span class="line">        result.append(title)</span><br><span class="line">        <span class="comment">#将列表写入csv文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.csv&#x27;</span>,<span class="string">&#x27;a+&#x27;</span>,newline = <span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f_csv = csv.writer(f)</span><br><span class="line">            f_csv.writerow(result)</span><br><span class="line">    <span class="comment">#输出时间</span></span><br><span class="line">    <span class="built_in">print</span>(time_stramp)</span><br><span class="line"><span class="comment">#设定计划，微博热搜每分钟更新一次，所以每分钟执行一次</span></span><br><span class="line">schedule.every(<span class="number">1</span>).minutes.do(run)</span><br><span class="line"><span class="comment">#开始执行计划</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    schedule.run_pending()</span><br></pre></td></tr></table></figure><h2 id="让数据动起来"><a href="#让数据动起来" class="headerlink" title="让数据动起来"></a>让数据动起来</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用到的包</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar,Timeline,Grid</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ThemeType</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pyecharts.<span class="built_in">globals</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> CurrentConfig</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="comment">#禁用警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"><span class="comment">#禁用pyecharts1.9.0安全警告</span></span><br><span class="line">pyecharts.<span class="built_in">globals</span>._WarningControl.ShowWarning = <span class="literal">False</span></span><br><span class="line"><span class="comment">#更改静态文件目录，你需要将js文件移到对应的目录下</span></span><br><span class="line">CurrentConfig.ONLINE_HOST = <span class="string">&quot;./js/&quot;</span></span><br><span class="line"><span class="comment">#从csv文件读入数据</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;1.csv&#x27;</span>,encoding = <span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="comment">#创建Timeline对象，用于按顺序演示数据，theme是一种图表风格</span></span><br><span class="line">tl = Timeline(&#123;<span class="string">&#x27;theme&#x27;</span>:ThemeType.MACARONS&#125;)</span><br><span class="line"><span class="comment">#如果数据更多的话，可以修改range后面括号中的数字</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="comment">#创建柱形图</span></span><br><span class="line">    bar = (</span><br><span class="line">        Bar(&#123;<span class="string">&#x27;theme&#x27;</span>:ThemeType.MACARONS&#125;)</span><br><span class="line">        .add_xaxis(<span class="built_in">list</span>(data[<span class="string">&#x27;内容&#x27;</span>])[i*<span class="number">10</span>:i*<span class="number">10</span>+<span class="number">10</span>][::-<span class="number">1</span>])<span class="comment">#横坐标(标题)</span></span><br><span class="line">        .add_yaxis(<span class="string">&#x27;微博热搜榜&#x27;</span>,<span class="built_in">list</span>(data[<span class="string">&#x27;热度&#x27;</span>])[i*<span class="number">10</span>:i*<span class="number">10</span>+<span class="number">10</span>][::-<span class="number">1</span>])<span class="comment">#纵坐标(热度)</span></span><br><span class="line">        .reversal_axis()<span class="comment">#图形反转</span></span><br><span class="line">        <span class="comment">#添加时间标签</span></span><br><span class="line">        .set_global_opts(</span><br><span class="line">            title_opts = opts.TitleOpts(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">list</span>(data[<span class="string">&#x27;时间&#x27;</span>])[i*<span class="number">10</span>]),pos_right = <span class="string">&#x27;0%&#x27;</span>,pos_bottom = <span class="string">&#x27;15%&#x27;</span>),</span><br><span class="line">            xaxis_opts = opts.AxisOpts(</span><br><span class="line">                splitline_opts = opts.SplitLineOpts(is_show = <span class="literal">True</span>),</span><br><span class="line">                position = <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">                name_gap = <span class="number">10</span>,</span><br><span class="line">                boundary_gap = [<span class="string">&#x27;20%&#x27;</span>,<span class="string">&#x27;20%&#x27;</span>]),</span><br><span class="line">            yaxis_opts = opts.AxisOpts(splitline_opts = opts.SplitLineOpts(is_show = <span class="literal">True</span>),</span><br><span class="line">                                       axislabel_opts = opts.LabelOpts(color = <span class="string">&#x27;#FF7F50&#x27;</span>)),)</span><br><span class="line">        .set_series_opts(label_opts = opts.LabelOpts(position = <span class="string">&#x27;right&#x27;</span>,color = <span class="string">&quot;#9400D3&quot;</span>))<span class="comment">#将标签放在图形右边</span></span><br><span class="line">        )</span><br><span class="line">    grid = (</span><br><span class="line">        Grid()</span><br><span class="line">        .add(bar,grid_opts = opts.GridOpts(pos_left = <span class="string">&quot;25%&quot;</span>,pos_right = <span class="string">&quot;0%&quot;</span>))<span class="comment">#图形整体右移</span></span><br><span class="line">        )</span><br><span class="line">    tl.add(grid,<span class="string">&quot;&#123;&#125;年&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">    tl.add_schema(</span><br><span class="line">        <span class="comment">#设置播放速度(单位应该是毫秒)</span></span><br><span class="line">        play_interval = <span class="number">100</span>,</span><br><span class="line">        <span class="comment">#是否隐藏timeline组件</span></span><br><span class="line">        is_timeline_show = <span class="literal">False</span>,</span><br><span class="line">        <span class="comment">#是否自动播放</span></span><br><span class="line">        is_auto_play = <span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line"><span class="comment">#保存绘制的图表</span></span><br><span class="line">tl.render(<span class="string">&#x27;微博热搜.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>不得不说，仍没有透彻理解pyecharts的绘图规则，但是这个似乎还挺好玩，也有一定的视觉效果。<br>ps：爬取热搜数据需要自行设定次数或在爬取足量数据后手动打断。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取LOL任意英雄皮肤</title>
      <link href="/2020/09/14/%E7%88%AC%E5%8F%96LOL%E4%BB%BB%E6%84%8F%E8%8B%B1%E9%9B%84%E7%9A%AE%E8%82%A4/"/>
      <url>/2020/09/14/%E7%88%AC%E5%8F%96LOL%E4%BB%BB%E6%84%8F%E8%8B%B1%E9%9B%84%E7%9A%AE%E8%82%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请求网页</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#创建和切换目录</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#解析网页</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="comment">#selenium模拟浏览器行为</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建并切换到英雄联盟文件夹</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;英雄联盟&#x27;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&#x27;英雄联盟&#x27;</span>)</span><br><span class="line">os.chdir(<span class="string">&#x27;英雄联盟&#x27;</span>)</span><br><span class="line"><span class="comment">#获取英雄关键词(称号或名称)</span></span><br><span class="line">keyword = <span class="built_in">input</span>(<span class="string">&#x27;keyword:&#x27;</span>)</span><br><span class="line"><span class="comment">#定义一个Options对象用于隐藏chrome窗口</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"><span class="comment">#全英雄数据页面</span></span><br><span class="line">BASE_URL = <span class="string">&#x27;http://lol.qq.com/data/&#x27;</span></span><br><span class="line"><span class="comment">#请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#初始化一个browser对象用于启动chrome并打开网页</span></span><br><span class="line">browser = webdriver.Chrome(executable_path = <span class="string">&#x27;chromedriver.exe&#x27;</span>,options = chrome_options)</span><br></pre></td></tr></table></figure><h2 id="获取英雄列表"><a href="#获取英雄列表" class="headerlink" title="获取英雄列表"></a>获取英雄列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_heros</span>():</span></span><br><span class="line"><span class="comment">#访问目标地址</span></span><br><span class="line">    browser.get(<span class="string">&#x27;https://lol.qq.com/data/info-heros.shtml&#x27;</span>)</span><br><span class="line"><span class="comment">#获取页面数据并解析</span></span><br><span class="line">    html = browser.page_source</span><br><span class="line">    bf = bs(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    heros = bf.find(<span class="string">&#x27;ul&#x27;</span>,class_ = <span class="string">&quot;imgtextlist&quot;</span>).find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#将英雄名称和详细页面保存为列表</span></span><br><span class="line">    hero_list = []</span><br><span class="line">    <span class="keyword">for</span> hero <span class="keyword">in</span> heros:</span><br><span class="line">        hero_name = hero.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        hero_url = BASE_URL + hero.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        temp = [hero_name,hero_url]</span><br><span class="line">        hero_list.append(temp)</span><br><span class="line"><span class="comment">#从全英雄中匹配关键词</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(hero_list)):</span><br><span class="line">        <span class="keyword">if</span> keyword <span class="keyword">in</span> hero_list[i][<span class="number">0</span>]:</span><br><span class="line">            namepath = hero_list[i][<span class="number">0</span>]</span><br><span class="line"><span class="comment">#返回英雄列表和英雄名称</span></span><br><span class="line">    <span class="keyword">return</span> hero_list,namepath</span><br></pre></td></tr></table></figure><h2 id="获取皮肤地址"><a href="#获取皮肤地址" class="headerlink" title="获取皮肤地址"></a>获取皮肤地址</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">skin_list</span>(<span class="params">hero_list</span>):</span></span><br><span class="line"><span class="comment">#访问与关键词相匹配的英雄详细地址</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(hero_list)):</span><br><span class="line">        <span class="keyword">if</span> keyword <span class="keyword">in</span> hero_list[i][<span class="number">0</span>]:</span><br><span class="line">            browser.get(hero_list[i][<span class="number">1</span>])</span><br><span class="line"><span class="comment">#解析网页</span></span><br><span class="line">    html = browser.page_source</span><br><span class="line">    html = bs(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    detail_info = html.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&quot;defail-skin-nav&quot;</span>).find(<span class="string">&#x27;ul&#x27;</span>).find_all(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"><span class="comment">#将所有皮肤名称及相应的图片地址保存为列表</span></span><br><span class="line">    hero_skin = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> detail_info:</span><br><span class="line"><span class="comment">#获取皮肤名称，并替换到特殊字符</span></span><br><span class="line">        skin_name = item.get(<span class="string">&#x27;alt&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#selenium只能抓取到缩略图地址，观察之后，将small替换为big即为大图地址</span></span><br><span class="line">        skin_url = item.get(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;small&#x27;</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        hero_skin.append([skin_name,skin_url])</span><br><span class="line">    <span class="keyword">return</span> hero_skin</span><br></pre></td></tr></table></figure><h2 id="保存皮肤"><a href="#保存皮肤" class="headerlink" title="保存皮肤"></a>保存皮肤</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_skin</span>(<span class="params">hero_skin,namepath</span>):</span></span><br><span class="line"><span class="comment">#创建保存该英雄皮肤的目录</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(namepath):</span><br><span class="line">        os.mkdir(namepath)</span><br><span class="line"><span class="comment">#遍历皮肤列表并保存</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> hero_skin:</span><br><span class="line"><span class="comment">#使用requests请求皮肤地址</span></span><br><span class="line">        res = requests.get(url = item[<span class="number">1</span>],headers = headers)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(namepath + <span class="string">&#x27;/&#x27;</span> + item[<span class="number">0</span>] + <span class="string">&#x27;.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(res.content)</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure><h2 id="主函数和入口"><a href="#主函数和入口" class="headerlink" title="主函数和入口"></a>主函数和入口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    hero_list,namepath = get_heros()</span><br><span class="line">    hero_skin = skin_list(hero_list)</span><br><span class="line">    save_skin(hero_skin,namepath)</span><br><span class="line"><span class="comment">#程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>因为怕被封IP所以没有设置批量爬取。<br>配合多线程可以快速获取全英雄所有皮肤。</p><h2 id="批量爬取"><a href="#批量爬取" class="headerlink" title="批量爬取"></a>批量爬取</h2><p>使用多线程批量爬取英雄皮肤，暂时丢一下完整代码，后续有时间会添加详细注释。</p><p>更新于2020年10月25号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Wed Sep 16 21:54:21 2020</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Administrator</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#创建和切换目录</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#解析网页</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="comment">#selenium模拟浏览器行为</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">import</span> random,time</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;英雄联盟&#x27;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&#x27;英雄联盟&#x27;</span>)</span><br><span class="line">os.chdir(<span class="string">&#x27;英雄联盟&#x27;</span>)</span><br><span class="line">headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">proxies=[&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;114.103.168.183:3000&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;175.43.156.42:9999&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;218.64.148.47:9000&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;221.224.136.211:35101&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;http:&#x27;</span>:<span class="string">&#x27;175.42.129.65:9999&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;117.64.225.154:1133&#x27;</span>&#125;]</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.binary_location = <span class="string">&quot;D:\Google\Chrome\Application\chrome.exe&quot;</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Get_LOL</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,keyword</span>):</span></span><br><span class="line">        self.keyword = keyword</span><br><span class="line">        self.BASE_URL = <span class="string">&#x27;http://lol.qq.com/data/&#x27;</span></span><br><span class="line">        self.browser = webdriver.Chrome(executable_path = <span class="string">&#x27;chromedriver.exe&#x27;</span>,options = chrome_options)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_heros</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#访问目标地址</span></span><br><span class="line">        self.browser.get(<span class="string">&#x27;https://lol.qq.com/data/info-heros.shtml&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#获取页面数据并解析</span></span><br><span class="line">        html = self.browser.page_source</span><br><span class="line">        bf = bs(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        heros = bf.find(<span class="string">&#x27;ul&#x27;</span>,class_ = <span class="string">&quot;imgtextlist&quot;</span>).find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        <span class="comment">#将英雄名称和详细页面保存为列表</span></span><br><span class="line">        hero_list = []</span><br><span class="line">        <span class="keyword">for</span> hero <span class="keyword">in</span> heros:</span><br><span class="line">            hero_name = hero.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">            hero_url = self.BASE_URL + hero.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            temp = [hero_name,hero_url]</span><br><span class="line">            hero_list.append(temp)</span><br><span class="line">        <span class="comment">#从全英雄中匹配关键词</span></span><br><span class="line">        <span class="keyword">if</span> self.keyword != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(hero_list)):</span><br><span class="line">                <span class="keyword">if</span> self.keyword <span class="keyword">in</span> hero_list[i][<span class="number">0</span>]:</span><br><span class="line">                    namepath = hero_list[i][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">return</span> hero_list,namepath</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.browser.quit()</span><br><span class="line">            <span class="keyword">return</span> hero_list</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">skin_list</span>(<span class="params">self,hero_list</span>):</span></span><br><span class="line">        <span class="comment">#访问与关键词相匹配的英雄详细地址</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(hero_list)):</span><br><span class="line">            <span class="keyword">if</span> self.keyword <span class="keyword">in</span> hero_list[i][<span class="number">0</span>]:</span><br><span class="line">                <span class="built_in">print</span>(hero_list[i][<span class="number">1</span>])</span><br><span class="line">                self.browser.get(hero_list[i][<span class="number">1</span>])</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#解析网页</span></span><br><span class="line">        html = self.browser.page_source</span><br><span class="line">        self.browser.quit()</span><br><span class="line">        html = bs(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        detail_info = html.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&quot;defail-skin-nav&quot;</span>).find(<span class="string">&#x27;ul&#x27;</span>).find_all(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">        <span class="comment">#将所有皮肤名称及相应的图片地址保存为列表</span></span><br><span class="line">        hero_skin = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> detail_info:</span><br><span class="line">            <span class="comment">#获取皮肤名称，并替换到特殊字符</span></span><br><span class="line">            skin_name = item.get(<span class="string">&#x27;alt&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="comment">#selenium只能抓取到缩略图地址，观察之后，将small替换为big即为大图地址</span></span><br><span class="line">            skin_url = item.get(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;small&#x27;</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">            hero_skin.append([skin_name,skin_url])</span><br><span class="line">        <span class="keyword">return</span> hero_skin</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_skin</span>(<span class="params">self,hero_skin,namepath</span>):</span></span><br><span class="line">        <span class="comment">#创建保存该英雄皮肤的目录</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(namepath):</span><br><span class="line">            os.mkdir(namepath)</span><br><span class="line">        <span class="comment">#遍历皮肤列表并保存</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> hero_skin:</span><br><span class="line">            <span class="comment">#使用requests请求皮肤地址</span></span><br><span class="line">            res = requests.get(url = item[<span class="number">1</span>],headers = headers,proxies = random.choice(proxies))</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(namepath + <span class="string">&#x27;/&#x27;</span> + item[<span class="number">0</span>] + <span class="string">&#x27;.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(res.content)</span><br><span class="line">                f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果某个英雄出错，则重新获取</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restart</span>(<span class="params">i,hero</span>):</span></span><br><span class="line">    <span class="keyword">global</span> Browser</span><br><span class="line">    Browser[i].get(hero[<span class="number">1</span>])</span><br><span class="line">    html = Browser[i].page_source</span><br><span class="line">    html = bs(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    detail_info = html.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&quot;defail-skin-nav&quot;</span>).find(<span class="string">&#x27;ul&#x27;</span>).find_all(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">    hero_skin = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> detail_info:</span><br><span class="line">        <span class="comment">#获取皮肤名称，并替换特殊字符</span></span><br><span class="line">        skin_name = item.get(<span class="string">&#x27;alt&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment">#selenium只能抓取到缩略图地址，观察之后，将small替换为big即为大图地址</span></span><br><span class="line">        skin_url = item.get(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;small&#x27;</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        hero_skin.append([skin_name,skin_url])</span><br><span class="line">    <span class="keyword">return</span> hero_skin</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">global</span> hero_split</span><br><span class="line">    <span class="keyword">global</span> error_list</span><br><span class="line">    <span class="keyword">global</span> Browser</span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment">#当列表为空时退出循环</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(hero_split) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#每个线程获取到目标英雄时将该英雄从列表中移除</span></span><br><span class="line">            hero = hero_split.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment">#使用目标Browser对象获取皮肤</span></span><br><span class="line">            Browser[i].get(hero[<span class="number">1</span>])</span><br><span class="line">            html = Browser[i].page_source</span><br><span class="line">            html = bs(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">            detail_info = html.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&quot;defail-skin-nav&quot;</span>).find(<span class="string">&#x27;ul&#x27;</span>).find_all(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">            <span class="comment">#将所有皮肤名称及相应的图片地址保存为列表</span></span><br><span class="line">            <span class="comment">#lock.acquire()</span></span><br><span class="line">            hero_skin = []</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> detail_info:</span><br><span class="line">                <span class="comment">#获取皮肤名称，并替换特殊字符</span></span><br><span class="line">                skin_name = item.get(<span class="string">&#x27;alt&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="comment">#selenium只能抓取到缩略图地址，观察之后，将small替换为big即为大图地址</span></span><br><span class="line">                skin_url = item.get(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;small&#x27;</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">                hero_skin.append([skin_name,skin_url])</span><br><span class="line">            <span class="comment">#处理获取不到皮肤的英雄</span></span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">len</span>(hero_skin) == <span class="number">0</span>:</span><br><span class="line">                hero_skin = restart(i,hero)</span><br><span class="line">                <span class="comment">#防止无限循环，重新获取10次后退出</span></span><br><span class="line">                flag += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> flag == <span class="number">10</span> <span class="keyword">and</span> hero <span class="keyword">not</span> <span class="keyword">in</span> error_list:</span><br><span class="line">                    error_list.append(hero)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(hero[<span class="number">0</span>]):</span><br><span class="line">                os.mkdir(hero[<span class="number">0</span>])</span><br><span class="line">            <span class="comment">#遍历皮肤列表并保存</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> hero_skin:</span><br><span class="line">                <span class="comment">#使用requests请求皮肤地址</span></span><br><span class="line">                res = requests.get(url = item[<span class="number">1</span>],headers = headers,proxies = random.choice(proxies))</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(hero[<span class="number">0</span>] + <span class="string">&#x27;/&#x27;</span> + item[<span class="number">0</span>] + <span class="string">&#x27;.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(res.content)</span><br><span class="line">                    f.close()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;线程--&gt;%d--&gt;%s--&gt;%d个--&gt;下载完成!\n&quot;</span> % (i,hero[<span class="number">0</span>],<span class="built_in">len</span>(hero_skin)))</span><br><span class="line">            <span class="comment">#lock.release()</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#获取单个英雄</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span>(<span class="params">hero</span>):</span></span><br><span class="line">    handle = Get_LOL(hero)</span><br><span class="line">    hero_list,namepath = handle.get_heros()</span><br><span class="line">    hero_skin = handle.skin_list(hero_list)</span><br><span class="line">    handle.save_skin(hero_skin,namepath)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取全部英雄</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all</span>():</span></span><br><span class="line">    <span class="keyword">global</span> error_list</span><br><span class="line">    <span class="keyword">global</span> hero_split</span><br><span class="line">    <span class="keyword">global</span> Browser</span><br><span class="line">    handle = Get_LOL(<span class="number">0</span>)</span><br><span class="line">    hero_list = handle.get_heros()</span><br><span class="line">    hero_split = hero_list</span><br><span class="line">    l = []</span><br><span class="line"><span class="comment">#创建三个Browser对象</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        browser = webdriver.Chrome(executable_path = <span class="string">&#x27;chromedriver.exe&#x27;</span>,options = chrome_options)</span><br><span class="line">        Browser.append(browser)</span><br><span class="line"><span class="comment">#创建三个线程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        t = threading.Thread(target = run,args = (i,))</span><br><span class="line">        l.append(t)</span><br><span class="line">        t.start()</span><br><span class="line"><span class="comment">#将线程作为主线程的子线程</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> l:</span><br><span class="line">        t.join()</span><br><span class="line"><span class="comment">#退出所有的Browser对象</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Browser)):</span><br><span class="line">        Browser[i].quit()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(error_list) != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(error_list)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在使用单一方式下载...&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> error_hero <span class="keyword">in</span> error_list:</span><br><span class="line">            get_one(error_hero)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;程序执行完毕!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    z = <span class="built_in">input</span>(<span class="string">&#x27;请选择模式:\n1:下载特定英雄\n2:下载所有英雄\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> z == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        keyword = <span class="built_in">input</span>(<span class="string">&#x27;keyword:&#x27;</span>)</span><br><span class="line">        get_one(keyword)</span><br><span class="line">    <span class="keyword">elif</span> z == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        error_list = []</span><br><span class="line">        Browser = []</span><br><span class="line">        lock = Lock()</span><br><span class="line">        get_all()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探Python爬虫Scrapy框架</title>
      <link href="/2020/09/10/%E5%88%9D%E6%8E%A2Python%E7%88%AC%E8%99%ABScrapy%E6%A1%86%E6%9E%B6/"/>
      <url>/2020/09/10/%E5%88%9D%E6%8E%A2Python%E7%88%AC%E8%99%ABScrapy%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="安装框架"><a href="#安装框架" class="headerlink" title="安装框架"></a>安装框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开CMD，cd到自己要保存项目的文件夹</span></span><br><span class="line">scrapy startproject myspider</span><br></pre></td></tr></table></figure><h2 id="目标数据"><a href="#目标数据" class="headerlink" title="目标数据"></a>目标数据</h2><p>本次尝试抓取<a href="http://www.itcast.cn/channel/teacher.shtml" title="目标链接">目标链接</a>中的讲师姓名、职称和个人信息。<br>则修改myspider目录下的items.py文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeatilItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    info = scrapy.Field()</span><br></pre></td></tr></table></figure><h2 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h2><p>在myspider目录下输入：<br><code>scrapy genspider itcast &quot;itcast.cn&quot;</code><br>然后myspider/spiders目录下会自动生成itcast.py文件<br>修改itcast.py中的start_urls:<br><code>start_urls = [&quot;http://www.itcast.cn/channel/teacher.shtml&quot;]</code><br>修改parse方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        filename = <span class="string">&#x27;teacher.html&#x27;</span></span><br><span class="line">        <span class="built_in">open</span>(filename,<span class="string">&#x27;wb&#x27;</span>).write(response.body)</span><br><span class="line">        html = etree.HTML(response.body)</span><br></pre></td></tr></table></figure><p>在命令行下执行：<br><code>scrapy crawl itcast</code><br>然后即可发现myspider根目录下出现了抓取到页面文件</p><h2 id="保存为json"><a href="#保存为json" class="headerlink" title="保存为json"></a>保存为json</h2><p>修改itcast.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> hellospider.items <span class="keyword">import</span> DetailItem</span><br><span class="line"><span class="comment">#调用lxml解析网页，不然会出现TypeError</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItcastSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;itcast&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;itcast.cn&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.itcast.cn/channel/teacher.shtml&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        filename = <span class="string">&#x27;teacher.html&#x27;</span></span><br><span class="line">        <span class="built_in">open</span>(filename,<span class="string">&#x27;wb&#x27;</span>).write(response.body)</span><br><span class="line">        html = etree.HTML(response.body)</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> html.xpath(<span class="string">&quot;//div[@class=&#x27;li_txt&#x27;]&quot;</span>):</span><br><span class="line">            item = DetailItem()</span><br><span class="line">            name = each.xpath(<span class="string">&quot;h3/text()&quot;</span>)</span><br><span class="line">            title = each.xpath(<span class="string">&quot;h4/text()&quot;</span>)</span><br><span class="line">            info = each.xpath(<span class="string">&quot;p/text()&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            item[<span class="string">&#x27;name&#x27;</span>] = name[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">&#x27;title&#x27;</span>] = title[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">&#x27;info&#x27;</span>] = info[<span class="number">0</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h2 id="添加管道"><a href="#添加管道" class="headerlink" title="添加管道"></a>添加管道</h2><p>修改myspider/pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"><span class="comment">#保存为json，并存入数据库</span></span><br><span class="line"><span class="keyword">import</span> json,pymongo</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HellospiderPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hellospider</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment">#创建一个json文件</span></span><br><span class="line">        self.file = <span class="built_in">open</span>(<span class="string">&#x27;teacher.json&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="comment">#连接MongoDB，请修改user和pwd为自己的用户名和密码</span></span><br><span class="line">        self.client = pymongo.MongoClient(<span class="string">&#x27;mongodb://user:pwd@localhost:27017&#x27;</span>)</span><br><span class="line"><span class="comment">#选择数据库，不存在则自动创建</span></span><br><span class="line">        self.db = self.client.teacher</span><br><span class="line"><span class="comment">#选择表单，不存在则自动创建</span></span><br><span class="line">        self.collection = self.db.data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬虫开始执行&#x27;</span>,spider.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self,item,spider</span>):</span></span><br><span class="line"><span class="comment">#向json文件中写入</span></span><br><span class="line">        content = json.dumps(<span class="built_in">dict</span>(item),ensure_ascii = <span class="literal">False</span>) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        self.file.write(content.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment">#向数据库中写入</span></span><br><span class="line">        self.collection.insert_one(<span class="built_in">dict</span>(item))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        self.file.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬虫执行完毕&#x27;</span>,spider.name)</span><br></pre></td></tr></table></figure><p>然后修改settings.py文件中的ITEM_PIPELINES</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以同时使用多个管道，后面的数字代表优先级</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;hellospider.pipelines.hellospider&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开始爬取"><a href="#开始爬取" class="headerlink" title="开始爬取"></a>开始爬取</h2><p>再次执行<code>scrapy crawl itcast</code>即可</p><h2 id="待解决的问题"><a href="#待解决的问题" class="headerlink" title="待解决的问题"></a>待解决的问题</h2><p>1、将json文件和MongoDB分成两个管道时，会出现后执行的管道得到的item为None(与yield的使用有关)<br>2、对于etree和xpath命令不熟悉，或许可以考虑使用bs4，不过最好还是学习一下</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的logging模块</title>
      <link href="/2020/09/09/python%E4%B8%AD%E7%9A%84logging%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/09/09/python%E4%B8%AD%E7%9A%84logging%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="logging是什么？"><a href="#logging是什么？" class="headerlink" title="logging是什么？"></a>logging是什么？</h2><p>logging可以用于记录程序的运行状态，帮你确定到底是哪条语句出现了错误，而不用再苦逼的使用print来Debug，本篇记录一些简单操作。</p><h2 id="打印信息"><a href="#打印信息" class="headerlink" title="打印信息"></a>打印信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment">#设定配置信息，level为级别，严重性为debug&lt;info&lt;warning&lt;error&lt;critical,默认为warning</span></span><br><span class="line"><span class="comment">#严重性低于level的日志信息将不会被统计</span></span><br><span class="line"><span class="comment">#format格式化输出信息，包括时间，py文件名，代码行数，日志级别及输出信息</span></span><br><span class="line"><span class="comment">#datefmt格式化时间戳，filename指定保存日志的文件，filemode为文件打开方式，默认为a也可指定为w</span></span><br><span class="line">logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">                    <span class="built_in">format</span> = <span class="string">&#x27;%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s&#x27;</span>,</span><br><span class="line">                    datefmt = <span class="string">&#x27;%a,%d %b %Y %H:%M:%S&#x27;</span>,</span><br><span class="line">                    filename = <span class="string">&#x27;./log/test.log&#x27;</span>,</span><br><span class="line">                    filemode = <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&#x27;debug message&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;info message&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;warning message&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;error message&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;critical message&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment">#定义一类日志信息，名称为空则name为root</span></span><br><span class="line"><span class="comment">#未指定level，级别默认为warning</span></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一类日志信息，为root的孩子日志，在执行时会同时调用父类</span></span><br><span class="line">logger1 = logging.getLogger(<span class="string">&#x27;mylogger&#x27;</span>)</span><br><span class="line"><span class="comment">#级别设定为Debug</span></span><br><span class="line">logger1.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一类日志信息，与logger1的name相同，则同时会调用logger1和root</span></span><br><span class="line">logger2 = logging.getLogger(<span class="string">&#x27;mylogger&#x27;</span>)</span><br><span class="line"><span class="comment">#级别设定为INFO，则不会输出Debug信息</span></span><br><span class="line">logger2.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一类日志信息，为mylogger的子类，root的孙类...</span></span><br><span class="line">logger3 = logging.getLogger(<span class="string">&#x27;mylogger.child&#x27;</span>)</span><br><span class="line">logger3.setLevel(logging.WARNING)</span><br><span class="line"></span><br><span class="line"><span class="comment">#mylogger4与mylogger在结点上等价</span></span><br><span class="line">logger4 = logging.getLogger(<span class="string">&#x27;mylogger4&#x27;</span>)</span><br><span class="line">logger4.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment">#mylogger5与mylogger、mylogger4在结点上等价</span></span><br><span class="line">logger5 = logging.getLogger(<span class="string">&#x27;mylogger5&#x27;</span>)</span><br><span class="line">logger5.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个用于保存日志的handle</span></span><br><span class="line">fh = logging.FileHandler(<span class="string">&#x27;./log/test1.log&#x27;</span>)</span><br><span class="line"><span class="comment">#一个用于输出的handle</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line"><span class="comment">#格式化日志信息</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"><span class="comment">#应用上述格式</span></span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">限制只有满足过滤规则的日志才会输出。</span></span><br><span class="line"><span class="string">比如我们定义了filter = logging.Filter(&#x27;a.b.c&#x27;)，并将这个Filter添加到了一个Handler上</span></span><br><span class="line"><span class="string">则使用该Handler的Logger中只有名字带a.b.c前缀的Logger才能输出其日志</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#filter_ = logging.Filter(&#x27;mylogger.child1.child2&#x27;)</span></span><br><span class="line"><span class="comment">#fh.addFilter(filter_)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#logger.addFilter(filter_)</span></span><br><span class="line"><span class="comment">#让日志使用fh和chhandle，以下同理</span></span><br><span class="line">logger.addHandler(fh)</span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment">#logger1.addFilter(filter_)</span></span><br><span class="line">logger1.addHandler(fh)</span><br><span class="line">logger1.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment">#logger2.addFilter(filter_)</span></span><br><span class="line">logger2.addHandler(fh)</span><br><span class="line">logger2.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment">#logger3.addFilter(filter_)</span></span><br><span class="line">logger3.addHandler(fh)</span><br><span class="line">logger3.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment">#logger4.addFilter(filter_)</span></span><br><span class="line">logger4.addHandler(fh)</span><br><span class="line">logger4.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment">#logger5.addFilter(filter_)</span></span><br><span class="line">logger5.addHandler(fh)</span><br><span class="line">logger5.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment">#logger级别为warning，只会输出和保存后三条</span></span><br><span class="line">logger.debug(<span class="string">&#x27;logger debug message&#x27;</span>)</span><br><span class="line">logger.info(<span class="string">&#x27;logger info message&#x27;</span>)</span><br><span class="line">logger.warning(<span class="string">&#x27;logger warning message&#x27;</span>)</span><br><span class="line">logger.error(<span class="string">&#x27;logger error message&#x27;</span>)</span><br><span class="line">logger.critical(<span class="string">&#x27;logger critical message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#logger1执行的同时会调用logger</span></span><br><span class="line">logger1.debug(<span class="string">&#x27;logger1 debug message&#x27;</span>)</span><br><span class="line">logger1.info(<span class="string">&#x27;logger1 info message&#x27;</span>)</span><br><span class="line">logger1.warning(<span class="string">&#x27;logger1 warning message&#x27;</span>)</span><br><span class="line">logger1.error(<span class="string">&#x27;logger1 error message&#x27;</span>)</span><br><span class="line">logger1.critical(<span class="string">&#x27;logger1 critical message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#logger2执行的同时会调用logger和logger1</span></span><br><span class="line">logger2.debug(<span class="string">&#x27;logger2 debug message&#x27;</span>)</span><br><span class="line">logger2.info(<span class="string">&#x27;logger2 info message&#x27;</span>)</span><br><span class="line">logger2.warning(<span class="string">&#x27;logger2 warning message&#x27;</span>)</span><br><span class="line">logger2.error(<span class="string">&#x27;logger2 error message&#x27;</span>)</span><br><span class="line">logger2.critical(<span class="string">&#x27;logger2 critical message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#logger3执行时会调用所有父结点</span></span><br><span class="line">logger3.debug(<span class="string">&#x27;logger3 debug message&#x27;</span>)</span><br><span class="line">logger3.info(<span class="string">&#x27;logger3 info message&#x27;</span>)</span><br><span class="line">logger3.warning(<span class="string">&#x27;logger3 warning message&#x27;</span>)</span><br><span class="line">logger3.error(<span class="string">&#x27;logger3 error message&#x27;</span>)</span><br><span class="line">logger3.critical(<span class="string">&#x27;logger3 critical message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#logger4执行时会调用root结点</span></span><br><span class="line">logger4.debug(<span class="string">&#x27;logger4 debug message&#x27;</span>)</span><br><span class="line">logger4.info(<span class="string">&#x27;logger4 info message&#x27;</span>)</span><br><span class="line">logger4.warning(<span class="string">&#x27;logger4 warning message&#x27;</span>)</span><br><span class="line">logger4.error(<span class="string">&#x27;logger4 error message&#x27;</span>)</span><br><span class="line">logger4.critical(<span class="string">&#x27;logger4 critical message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#logger5执行时会调用root结点</span></span><br><span class="line">logger5.debug(<span class="string">&#x27;logger5 debug message&#x27;</span>)</span><br><span class="line">logger5.info(<span class="string">&#x27;logger5info message&#x27;</span>)</span><br><span class="line">logger5.warning(<span class="string">&#x27;logger5 warning message&#x27;</span>)</span><br><span class="line">logger5.error(<span class="string">&#x27;logger5 error message&#x27;</span>)</span><br><span class="line">logger5.critical(<span class="string">&#x27;logger5 critical message&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>这些都属于皮毛操作，资料来源为CSDN，以后要学会使用logging进行高效率的Debug。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中对列表进行copy的几种方式</title>
      <link href="/2020/09/09/python%E4%B8%AD%E5%AF%B9%E5%88%97%E8%A1%A8%E8%BF%9B%E8%A1%8Ccopy%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/09/09/python%E4%B8%AD%E5%AF%B9%E5%88%97%E8%A1%A8%E8%BF%9B%E8%A1%8Ccopy%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接赋值</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line">b = a</span><br><span class="line">a.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], <span class="number">4</span>]</span><br><span class="line"><span class="comment">#相当于a和b指向同一个内存空间</span></span><br></pre></td></tr></table></figure><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调用列表自带的copy方法</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line">b = a.copy()</span><br><span class="line">a.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">a[<span class="number">3</span>].append(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]]</span><br><span class="line"><span class="comment">#b使用单独的内存空间，但子列表并没有copy，仍然指向a[3]，是一种浅拷贝</span></span><br></pre></td></tr></table></figure><h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调用python标准库进行浅拷贝</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line">b = copy.copy(a)</span><br><span class="line">a.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">a[<span class="number">3</span>].append(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]]</span><br><span class="line"><span class="comment">#与第二种方法结果一致，原理也差不多</span></span><br></pre></td></tr></table></figure><h2 id="第四种"><a href="#第四种" class="headerlink" title="第四种"></a>第四种</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调用python标准库进行深拷贝</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">a[<span class="number">3</span>].append(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line"><span class="comment">## 深拷贝会拷贝列表中的所有子列表</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取电影天堂流媒体并整合</title>
      <link href="/2020/09/08/%E7%88%AC%E5%8F%96%E7%94%B5%E5%BD%B1%E5%A4%A9%E5%A0%82%E6%B5%81%E5%AA%92%E4%BD%93%E5%B9%B6%E6%95%B4%E5%90%88/"/>
      <url>/2020/09/08/%E7%88%AC%E5%8F%96%E7%94%B5%E5%BD%B1%E5%A4%A9%E5%A0%82%E6%B5%81%E5%AA%92%E4%BD%93%E5%B9%B6%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于请求网页</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#分别用于正则匹配、获取目录信息、字符串加载为字典</span></span><br><span class="line"><span class="keyword">import</span> re,os,json</span><br><span class="line"><span class="comment">#用于解析网页</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="comment">#用于合并流媒体</span></span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#用于获取随机的匿名IP</span></span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取电影关键词</span></span><br><span class="line">keyword = <span class="built_in">input</span>(<span class="string">&#x27;请输入关键词：&#x27;</span>)</span><br><span class="line"><span class="comment">#为电影创建目录</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(keyword):</span><br><span class="line">    os.mkdir(keyword)</span><br><span class="line"><span class="comment">#切换到专属目录</span></span><br><span class="line">os.chdir(<span class="string">&#x27;./&#x27;</span> + keyword)</span><br><span class="line"><span class="comment">#电影天堂的基础Url</span></span><br><span class="line">BASE_URL = <span class="string">&#x27;http://www.dytt.com&#x27;</span></span><br><span class="line"><span class="comment">#定义请求头模拟浏览器</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#设定匿名IP地址</span></span><br><span class="line">proxies=[&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;171.12.115.205:9999&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;123.149.136.182:9999&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;121.232.148.67:9000&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;123.163.27.182:9999&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;http:&#x27;</span>:<span class="string">&#x27;171.13.136.235:9999&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;123.149.137.132:9999&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="搜索结果"><a href="#搜索结果" class="headerlink" title="搜索结果"></a>搜索结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Search</span>():</span></span><br><span class="line"><span class="comment">#构建搜索页的地址</span></span><br><span class="line">    Search_URL = <span class="string">&#x27;http://www.dytt.com/vodsearch/-------------.html?wd=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(keyword)</span><br><span class="line"><span class="comment">#定义两个空列表保存解析后的数据</span></span><br><span class="line">    movie_url = []</span><br><span class="line">    movie_title = []</span><br><span class="line"><span class="comment">#请求搜索页</span></span><br><span class="line">    res = requests.get(url = Search_URL,headers = headers,proxies = random.choice(proxies))</span><br><span class="line"><span class="comment">#设定网页字符格式</span></span><br><span class="line">    res.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="comment">#使用bs4解析网页并逐条分析</span></span><br><span class="line">    movie_info = bs(res.text,<span class="string">&#x27;lxml&#x27;</span>).find_all(<span class="string">&#x27;td&#x27;</span>,class_ = <span class="string">&quot;textLeft&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(movie_info)):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="comment">#获取目标地址并添加到列表</span></span><br><span class="line">            movie_url.append(BASE_URL + movie_info[i].find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line"><span class="comment">#获取目标标题并添加到列表</span></span><br><span class="line">            movie_title.append(movie_info[i].find(<span class="string">&#x27;a&#x27;</span>).text)</span><br><span class="line"><span class="comment">#返回保存结果的列表</span></span><br><span class="line">    <span class="keyword">return</span> movie_url,movie_title</span><br></pre></td></tr></table></figure><h2 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Download</span>(<span class="params">url</span>):</span></span><br><span class="line"><span class="comment">#根据选定的项目进行请求</span></span><br><span class="line">    res = requests.get(url = url,headers = headers,proxies = random.choice(proxies))</span><br><span class="line">    <span class="comment">#设定字符格式</span></span><br><span class="line">res.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="comment">#网页解析</span></span><br><span class="line">    bf = bs(res.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#获取在线播放地址</span></span><br><span class="line">    online_url = BASE_URL + bf.find(<span class="string">&#x27;ul&#x27;</span>,class_ = <span class="string">&quot;dy_bofangul&quot;</span>).find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line"><span class="comment">#获取迅雷下载地址</span></span><br><span class="line">    thunder_url = bf.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&#x27;downList&#x27;</span>).find_all(<span class="string">&#x27;a&#x27;</span>,class_ = <span class="string">&#x27;donw_xl thunder-link&#x27;</span>)</span><br><span class="line"><span class="comment">#返回两种地址</span></span><br><span class="line">    <span class="keyword">return</span> online_url,thunder_url</span><br></pre></td></tr></table></figure><h2 id="流媒体Url"><a href="#流媒体Url" class="headerlink" title="流媒体Url"></a>流媒体Url</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#g根据在线播放地址获取保存所有流媒体URL的网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_mp4Url</span>(<span class="params">url</span>):</span></span><br><span class="line"><span class="comment">#请求在线播放地址</span></span><br><span class="line">    res = requests.get(url = url,headers = headers,proxies = random.choice(proxies))</span><br><span class="line">    res.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="comment">#解析网页</span></span><br><span class="line">    bf = bs(res.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#想要的数据保存在这个div中</span></span><br><span class="line">    string = bf.find(<span class="string">&#x27;div&#x27;</span>,style = <span class="string">&#x27;height: 400px;&#x27;</span>).find(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line"><span class="comment">#正则匹配&#123;&#125;中的内容</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;(&#123;.*?&#125;)&#x27;</span>)</span><br><span class="line">    dict_temp = re.findall(pattern, <span class="built_in">str</span>(string))</span><br><span class="line"><span class="comment">#加载为字典并获取url</span></span><br><span class="line">    mp4_flow = json.loads(dict_temp[<span class="number">0</span>])[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line"><span class="comment">#返回流媒体总地址</span></span><br><span class="line">    <span class="keyword">return</span> mp4_flow</span><br><span class="line"><span class="comment">#根据总地址获取保存所有流媒体地址的列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Flowtxt</span>(<span class="params">url</span>):</span></span><br><span class="line"><span class="comment">#定义一个空字符串</span></span><br><span class="line">    last_url = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#分割总地址并重新拼接为一个次级地址</span></span><br><span class="line">    temp = url.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> temp[:-<span class="number">1</span>]:</span><br><span class="line">        last_url = last_url + item + <span class="string">&#x27;/&#x27;</span></span><br><span class="line"><span class="comment">#对总地址进行请求</span></span><br><span class="line">    res = requests.get(url = url,headers = headers,proxies = random.choice(proxies))</span><br><span class="line">    res.edcoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="comment">#次级地址的另一部分保存在文本的第三行</span></span><br><span class="line">    final_url = last_url + res.text.split(<span class="string">&#x27;\n&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"><span class="comment">#重新定义次级地址</span></span><br><span class="line">last_url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    temp = final_url.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> temp[:-<span class="number">1</span>]:</span><br><span class="line">        last_url = last_url + item + <span class="string">&#x27;/&#x27;</span></span><br><span class="line"><span class="comment">#对完整的次级地址发起请求</span></span><br><span class="line">    r = requests.get(url = final_url, headers = headers,proxies = random.choice(proxies))</span><br><span class="line">    r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="comment">#正则匹配所有be开头ts结尾的字符串</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;(be.*?\.ts)\n#&#x27;</span>,re.S)</span><br><span class="line">    info = re.findall(pattern,r.text)</span><br><span class="line"><span class="comment">#info列表中所有元素与次级地址拼接</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(info)):</span><br><span class="line">        info[i] = last_url + info[i]</span><br><span class="line"><span class="comment">#返回流媒体地址列表</span></span><br><span class="line">    <span class="keyword">return</span> info</span><br></pre></td></tr></table></figure><h2 id="整体保存"><a href="#整体保存" class="headerlink" title="整体保存"></a>整体保存</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Save_movie</span>(<span class="params">urls,filename</span>):</span></span><br><span class="line"><span class="comment">#创建一个保存数据的文件并打开</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename + <span class="string">&#x27;.mp4&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="comment">#遍历流媒体列表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(urls)):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#逐个访问</span></span><br><span class="line">                res = requests.get(url = urls[i],headers = headers,proxies = random.choice(proxies))</span><br><span class="line"><span class="comment">#向文件中写入数据</span></span><br><span class="line">                f.write(res.content)</span><br><span class="line"><span class="comment">#维持文件状态</span></span><br><span class="line">                f.flush()</span><br><span class="line"><span class="comment">#反馈信息</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;第%s段下载完成！&#x27;</span> % <span class="built_in">str</span>(i + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line"><span class="comment">#返回报错的流媒体段</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;error:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line"><span class="comment">#结束循环</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="comment">#关闭文件</span></span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><h2 id="流媒体合并"><a href="#流媒体合并" class="headerlink" title="流媒体合并"></a>流媒体合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Save_Flow</span>(<span class="params">urls</span>):</span></span><br><span class="line"><span class="comment">#空列表用于保存下载出错的流媒体段</span></span><br><span class="line">    error = []</span><br><span class="line"><span class="comment">#逐个下载</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(urls)):</span><br><span class="line"><span class="comment">#构建文件名</span></span><br><span class="line">        filename = urls[i].split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#每段数据都创建一个文件用于保存</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename + <span class="string">&#x27;.mp4&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = requests.get(url = urls[i],headers = headers,proxies = random.choice(proxies))</span><br><span class="line">                f.write(res.content)</span><br><span class="line"><span class="comment">#保存完毕就关闭文件</span></span><br><span class="line">                f.close()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line"><span class="comment">#统计错误的流媒体段</span></span><br><span class="line">                error.append[i]</span><br><span class="line"><span class="comment">#无视错误继续下载下一段视频</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#调用moviepy模块整合视频</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Merge_Flow</span>(<span class="params">filename</span>):</span></span><br><span class="line"><span class="comment">#空列表用于保存所有待合并视频</span></span><br><span class="line">    L = []</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> os.listdir():</span><br><span class="line"><span class="comment">#如果扩展名为mp4，则向列表中添加一条数据</span></span><br><span class="line">        <span class="keyword">if</span> name.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>] == <span class="string">&#x27;mp4&#x27;</span>:</span><br><span class="line"><span class="comment">#使用VideoFileClip预加载视频</span></span><br><span class="line">            video = VideoFileClip(name)</span><br><span class="line"><span class="comment">#输出视频部分信息</span></span><br><span class="line">            <span class="comment">#print(&quot;video time: %s, width: %s, height: %s, fps: %s&quot; % (video.duration, video.w, video.h, video.fps))</span></span><br><span class="line">            L.append(video)</span><br><span class="line">    <span class="comment">#拼接视频</span></span><br><span class="line">    final_clip = concatenate_videoclips(L,method=<span class="string">&#x27;compose&#x27;</span>)</span><br><span class="line">    <span class="comment">#生成目标视频文件</span></span><br><span class="line">    final_clip.write_videofile(filename + <span class="string">&#x27;.mp4&#x27;</span>,fps = <span class="number">24</span>,remove_temp = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="comment">#h获取搜索结果</span></span><br><span class="line">    movie_url, movie_title = Get_Search()</span><br><span class="line"><span class="comment">#打印所有搜索结果</span></span><br><span class="line">    <span class="keyword">for</span> i,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(movie_title):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(i + <span class="number">1</span>) + <span class="string">&quot;:&quot;</span> + item)</span><br><span class="line"><span class="comment">#用于选定要下载的视频</span></span><br><span class="line">    t = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入要获取的索引：&#x27;</span>)) - <span class="number">1</span></span><br><span class="line"><span class="comment">#获取文件名</span></span><br><span class="line">    filename = movie_title[t]</span><br><span class="line"><span class="comment">#获取在线地址和迅雷地址（可以看需求保存）</span></span><br><span class="line">    online_url,thunder_url = Get_Download(movie_url[t])</span><br><span class="line"><span class="comment">#从在线地址中获取总的流媒体地址</span></span><br><span class="line">    mp4_url = Get_mp4Url(online_url)</span><br><span class="line"><span class="comment">#从总的流媒体地址获取全部流媒体块地址</span></span><br><span class="line">    urls = Get_Flowtxt(mp4_url)</span><br><span class="line"><span class="comment">#选择保存视频的方式</span></span><br><span class="line">    select = <span class="built_in">input</span>(<span class="string">&#x27;请选择下载模式：\n1、整体下载\n2、流媒体合并\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> select == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        Save_movie(urls,filename)</span><br><span class="line">    <span class="keyword">elif</span> select == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        Save_Flow(urls)</span><br><span class="line">        Merge_Flow(filename)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error!&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Tue Sep  8 08:06:55 2020</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: ljc545w</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re,os,json</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">keyword = <span class="built_in">input</span>(<span class="string">&#x27;请输入关键词：&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(keyword):</span><br><span class="line">    os.mkdir(keyword)</span><br><span class="line">os.chdir(<span class="string">&#x27;./&#x27;</span> + keyword)</span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">&#x27;http://www.dytt.com&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">proxies=[&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;171.12.115.205:9999&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;123.149.136.182:9999&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;121.232.148.67:9000&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;123.163.27.182:9999&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;http:&#x27;</span>:<span class="string">&#x27;171.13.136.235:9999&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;123.149.137.132:9999&#x27;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Search</span>():</span></span><br><span class="line">    Search_URL = <span class="string">&#x27;http://www.dytt.com/vodsearch/-------------.html?wd=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(keyword)</span><br><span class="line">    movie_url = []</span><br><span class="line">    movie_title = []</span><br><span class="line">    res = requests.get(url = Search_URL,headers = headers,proxies = random.choice(proxies))</span><br><span class="line">    res.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    movie_info = bs(res.text,<span class="string">&#x27;lxml&#x27;</span>).find_all(<span class="string">&#x27;td&#x27;</span>,class_ = <span class="string">&quot;textLeft&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(movie_info)):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            movie_url.append(BASE_URL + movie_info[i].find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line">            movie_title.append(movie_info[i].find(<span class="string">&#x27;a&#x27;</span>).text)</span><br><span class="line">    <span class="keyword">return</span> movie_url,movie_title</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Download</span>(<span class="params">url</span>):</span></span><br><span class="line">    res = requests.get(url = url,headers = headers,proxies = random.choice(proxies))</span><br><span class="line">    res.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    bf = bs(res.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    online_url = BASE_URL + bf.find(<span class="string">&#x27;ul&#x27;</span>,class_ = <span class="string">&quot;dy_bofangul&quot;</span>).find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    thunder_url = bf.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&#x27;downList&#x27;</span>).find_all(<span class="string">&#x27;a&#x27;</span>,class_ = <span class="string">&#x27;donw_xl thunder-link&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> online_url,thunder_url</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_mp4Url</span>(<span class="params">url</span>):</span></span><br><span class="line">    res = requests.get(url = url,headers = headers,proxies = random.choice(proxies))</span><br><span class="line">    res.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    bf = bs(res.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    string = bf.find(<span class="string">&#x27;div&#x27;</span>,style = <span class="string">&#x27;height: 400px;&#x27;</span>).find(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;(&#123;.*?&#125;)&#x27;</span>)</span><br><span class="line">    dict_temp = re.findall(pattern, <span class="built_in">str</span>(string))</span><br><span class="line">    mp4_flow = json.loads(dict_temp[<span class="number">0</span>])[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> mp4_flow</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Flowtxt</span>(<span class="params">url</span>):</span></span><br><span class="line">    last_url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    temp = url.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> temp[:-<span class="number">1</span>]:</span><br><span class="line">        last_url = last_url + item + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    res = requests.get(url = url,headers = headers,proxies = random.choice(proxies))</span><br><span class="line">    res.edcoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    final_url = last_url + res.text.split(<span class="string">&#x27;\n&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    r = requests.get(url = final_url, headers = headers,proxies = random.choice(proxies))</span><br><span class="line">    r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;(be.*?\.ts)\n#&#x27;</span>,re.S)</span><br><span class="line">    info = re.findall(pattern,r.text)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(info)):</span><br><span class="line">        info[i] = last_url + info[i]</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Save_movie</span>(<span class="params">urls,filename</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename + <span class="string">&#x27;.mp4&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(urls)):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = requests.get(url = urls[i],headers = headers,proxies = random.choice(proxies))</span><br><span class="line">                f.write(res.content)</span><br><span class="line">                f.flush()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;第%s段下载完成！&#x27;</span> % <span class="built_in">str</span>(i + <span class="number">1</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                if i == 10:</span></span><br><span class="line"><span class="string">                    break</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;error:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Save_Flow</span>(<span class="params">urls</span>):</span></span><br><span class="line">    error = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(urls)):</span><br><span class="line">        filename = urls[i].split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename + <span class="string">&#x27;.mp4&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = requests.get(url = urls[i],headers = headers,proxies = random.choice(proxies))</span><br><span class="line">                f.write(res.content)</span><br><span class="line">                f.close()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error.append[i]</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Merge_Flow</span>(<span class="params">filename</span>):</span></span><br><span class="line">    L = []</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> os.listdir():</span><br><span class="line">        <span class="comment">#print(name)</span></span><br><span class="line">        <span class="keyword">if</span> name.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>] == <span class="string">&#x27;mp4&#x27;</span>:</span><br><span class="line">            video = VideoFileClip(name)</span><br><span class="line">            <span class="comment">#print(&quot;video time: %s, width: %s, height: %s, fps: %s&quot; % (video.duration, video.w, video.h, video.fps))</span></span><br><span class="line">            L.append(video)</span><br><span class="line">    <span class="comment">#拼接视频</span></span><br><span class="line">    final_clip = concatenate_videoclips(L,method=<span class="string">&#x27;compose&#x27;</span>)</span><br><span class="line">    <span class="comment">#生成目标视频文件</span></span><br><span class="line">    final_clip.write_videofile(filename + <span class="string">&#x27;.mp4&#x27;</span>,fps = <span class="number">24</span>,remove_temp = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    movie_url, movie_title = Get_Search()</span><br><span class="line">    <span class="keyword">for</span> i,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(movie_title):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(i + <span class="number">1</span>) + <span class="string">&quot;:&quot;</span> + item)</span><br><span class="line">    t = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入要获取的索引：&#x27;</span>)) - <span class="number">1</span></span><br><span class="line">    filename = movie_title[t]</span><br><span class="line">    online_url,thunder_url = Get_Download(movie_url[t])</span><br><span class="line">    mp4_url = Get_mp4Url(online_url)</span><br><span class="line">    urls = Get_Flowtxt(mp4_url)</span><br><span class="line">    select = <span class="built_in">input</span>(<span class="string">&#x27;请选择下载模式：\n1、整体下载\n2、流媒体合并\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> select == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        Save_movie(urls,filename)</span><br><span class="line">    <span class="keyword">elif</span> select == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        Save_Flow(urls)</span><br><span class="line">        Merge_Flow(filename)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬虫正在执行&#x27;</span>)</span><br><span class="line">    main()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬虫执行完毕&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>这种方式获取数据相当麻烦，而且无法利用榨取全部网速，不如直接从电影天堂获取迅雷下载链接然后进行下载，本文最好只作为练习爬虫和学习解析网页用，若想要靠这个爬虫批量下载电影，实话说还是算了吧，甚至你可能会被封IP，得不偿失，另外，整体保存获取的视频可能在快进的时候出现卡顿，而moviepy整合过的则不会，但是整合过程很慢很慢。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录第五六周的C++作业</title>
      <link href="/2020/09/04/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%BA%94%E5%85%AD%E5%91%A8%E7%9A%84C++%E4%BD%9C%E4%B8%9A/"/>
      <url>/2020/09/04/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%BA%94%E5%85%AD%E5%91%A8%E7%9A%84C++%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*用Visual Studio 编写一个MFC界面，功能如下：</span></span><br><span class="line"><span class="comment">一. 仿照RW编写一个界面，枚举本机PCI的信息。*/</span></span><br></pre></td></tr></table></figure><h2 id="RW界面"><a href="#RW界面" class="headerlink" title="RW界面"></a>RW界面</h2><p><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202020-09-04%20133841_20200904133807763911.png"></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>首先打开VS2019，新建基于对话框的MFC控制台程序，点击资源文件，双击后缀为.rc的文件进入资源视图，在Dialog中选中面板，删除已有的三个组件，然后添加三个按钮（Button），一个下拉选择框（Combo Box），一个列表（List Contorl），一个次级面板（Tab Control）。如下所示：<br><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202020-09-04%20134712_20200904134629280898.png"></p><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主要修改末尾为Dlg的文件，其完整代码如下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MFCApplication2Dlg.cpp: 实现文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MFCApplication2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MFCApplication2Dlg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;afxdialogex.h&quot;</span></span></span><br><span class="line"><span class="comment">//以下为需要用到的额外头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//存储读取信息的函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;IO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string&quot;</span></span></span><br><span class="line"><span class="comment">//访问次级对话框</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;my_tab1.h&quot;</span></span></span><br><span class="line"><span class="comment">//连接动态链接库</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib,<span class="meta-string">&quot;IO.lib&quot;</span>)</span></span><br><span class="line"><span class="comment">//声明一个次级对话框变量</span></span><br><span class="line">my_tab1 m_page1;</span><br><span class="line"><span class="comment">//用于记录按钮的活动状态，初始时为0</span></span><br><span class="line"><span class="keyword">int</span> button_active = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//创建数组用于遍历所有可能的PCI设备，并存储总数</span></span><br><span class="line"><span class="keyword">int</span> bdfs[<span class="number">256</span>*<span class="number">16</span>*<span class="number">8</span>][<span class="number">3</span>], total_pci = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//定义union结构体，方便分割8位16进制数据</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> _<span class="title">INT_2_CHAR_</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Data_16</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">UINT16 FIRST_16;</span><br><span class="line">UINT16 SECOND_16;</span><br><span class="line">&#125;HIGH_LOW_16;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Data_8</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">UINT8 FIRST_8;</span><br><span class="line">UINT8 SECOND_8;</span><br><span class="line">UINT8 THIRD_8;</span><br><span class="line">UINT8 FOUTH_8;</span><br><span class="line">&#125;HIGH_LOW_8;</span><br><span class="line">UINT32 Data32;</span><br><span class="line">&#125;INT_CHAR;</span><br><span class="line"><span class="comment">//声明结构体变量</span></span><br><span class="line">INT_CHAR data_poor;</span><br><span class="line"><span class="comment">//这部分是创建程序时自带的</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> new DEBUG_NEW</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于应用程序“关于”菜单项的 CAboutDlg 对话框</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CAboutDlg</span> :</span> <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CAboutDlg</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span> IDD = IDD_ABOUTBOX &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;    <span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CAboutDlg::<span class="built_in">CAboutDlg</span>() : <span class="built_in">CDialogEx</span>(IDD_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CAboutDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAboutDlg, CDialogEx)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CMFCApplication2Dlg 对话框</span></span><br><span class="line"></span><br><span class="line">CMFCApplication2Dlg::<span class="built_in">CMFCApplication2Dlg</span>(CWnd* pParent <span class="comment">/*=nullptr*/</span>)</span><br><span class="line">: <span class="built_in">CDialogEx</span>(IDD_MFCAPPLICATION2_DIALOG, pParent)</span><br><span class="line">&#123;</span><br><span class="line">m_hIcon = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIcon</span>(IDR_MAINFRAME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCApplication2Dlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Control</span>(pDX, IDC_COMBO1, m_cmb_comm);</span><br><span class="line"><span class="built_in">DDX_Control</span>(pDX, IDC_LIST5, m_mylist);</span><br><span class="line"><span class="built_in">DDX_Control</span>(pDX, IDC_TAB2, my_tab);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里保存了所有的交互事件，并指向事件发生时的处理程序，为组件添加处理程序时会自动创建</span></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CMFCApplication2Dlg, CDialogEx)</span><br><span class="line"><span class="built_in">ON_WM_SYSCOMMAND</span>()</span><br><span class="line"><span class="built_in">ON_WM_PAINT</span>()</span><br><span class="line"><span class="built_in">ON_WM_QUERYDRAGICON</span>()</span><br><span class="line"><span class="comment">//处理按钮1被单击的事件</span></span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON1, &amp;CMFCApplication2Dlg::OnBnClickedButton1)</span><br><span class="line"><span class="comment">//处理按钮2被单击的事件</span></span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON2, &amp;CMFCApplication2Dlg::OnBnClickedButton2)</span><br><span class="line"><span class="comment">//处理按钮3被单击的事件</span></span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON3, &amp;CMFCApplication2Dlg::OnBnClickedButton3)</span><br><span class="line"><span class="comment">//处理下拉选择框变动时的事件</span></span><br><span class="line"><span class="built_in">ON_CBN_SELCHANGE</span>(IDC_COMBO1, &amp;CMFCApplication2Dlg::OnCbnSelchangeCombo1)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CMFCApplication2Dlg 消息处理程序</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CMFCApplication2Dlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将“关于...”菜单项添加到系统菜单中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IDM_ABOUTBOX 必须在系统命令范围内。</span></span><br><span class="line"><span class="built_in">ASSERT</span>((IDM_ABOUTBOX &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(IDM_ABOUTBOX &lt; <span class="number">0xF000</span>);</span><br><span class="line"></span><br><span class="line">CMenu* pSysMenu = <span class="built_in">GetSystemMenu</span>(FALSE);</span><br><span class="line"><span class="keyword">if</span> (pSysMenu != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">BOOL bNameValid;</span><br><span class="line">CString strAboutMenu;</span><br><span class="line">bNameValid = strAboutMenu.<span class="built_in">LoadString</span>(IDS_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(bNameValid);</span><br><span class="line"><span class="keyword">if</span> (!strAboutMenu.<span class="built_in">IsEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_SEPARATOR);</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_STRING, IDM_ABOUTBOX, strAboutMenu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动</span></span><br><span class="line"><span class="comment">//  执行此操作</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, TRUE);<span class="comment">// 设置大图标</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, FALSE);<span class="comment">// 设置小图标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line"><span class="comment">//以下为启动程序时面板中的初始化内容</span></span><br><span class="line"><span class="comment">//在tab组件中插入一个分页</span></span><br><span class="line">my_tab.<span class="built_in">InsertItem</span>(<span class="number">0</span>, _T(<span class="string">&quot;Summary&quot;</span>), LVCFMT_CENTER);</span><br><span class="line"><span class="comment">//将次级对话框与tab组件联系起来</span></span><br><span class="line">m_page1.<span class="built_in">Create</span>(IDD_PAPA1, <span class="built_in">GetDlgItem</span>(IDC_TAB2));</span><br><span class="line"><span class="comment">//定义一个变量用于保存组件的坐标</span></span><br><span class="line">CRect rs;</span><br><span class="line">my_tab.<span class="built_in">GetClientRect</span>(&amp;rs);</span><br><span class="line"><span class="comment">//调整子对话框在父窗口中的位置</span></span><br><span class="line">rs.top += <span class="number">25</span>;</span><br><span class="line">rs.bottom -= <span class="number">0</span>;</span><br><span class="line">rs.left += <span class="number">0</span>;</span><br><span class="line">rs.right -= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置子对话框尺寸并移动到指定位置</span></span><br><span class="line">m_page1.<span class="built_in">MoveWindow</span>(&amp;rs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//分别设置隐藏和显示</span></span><br><span class="line">m_page1.<span class="built_in">ShowWindow</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//设置默认的选项卡</span></span><br><span class="line">my_tab.<span class="built_in">SetCurSel</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//获取表格的原样式</span></span><br><span class="line">DWORD dwStyle = m_mylist.<span class="built_in">GetExtendedStyle</span>(); </span><br><span class="line"><span class="comment">//整行选取</span></span><br><span class="line">dwStyle |= LVS_EX_FULLROWSELECT; </span><br><span class="line"><span class="comment">//添加网格线</span></span><br><span class="line">dwStyle |= LVS_EX_GRIDLINES; </span><br><span class="line"><span class="comment">//为每行添加选择框</span></span><br><span class="line"><span class="comment">//dwStyle |= LVS_EX_CHECKBOXES; </span></span><br><span class="line"><span class="comment">//设置背景板颜色</span></span><br><span class="line"><span class="comment">//m_mylist.SetBkColor(RGB(255, 0, 0));</span></span><br><span class="line"><span class="comment">//设置表格颜色</span></span><br><span class="line"><span class="comment">//m_mylist.SetTextBkColor(RGB(0, 250, 12));</span></span><br><span class="line"><span class="comment">//设置文本颜色</span></span><br><span class="line">m_mylist.<span class="built_in">SetTextColor</span>(<span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>));</span><br><span class="line"><span class="comment">//重新设定列表样式</span></span><br><span class="line">m_mylist.<span class="built_in">SetExtendedStyle</span>(dwStyle);</span><br><span class="line"><span class="comment">//重置下拉选择框</span></span><br><span class="line">m_cmb_comm.<span class="built_in">ResetContent</span>();</span><br><span class="line"><span class="comment">//遍历所有可能的PCI设备，如果存在则将主要信息存入bdfs数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">256</span>; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; <span class="number">32</span>; d++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> f = <span class="number">0</span>; f &lt; <span class="number">8</span>; f++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">ReadPCIConfig</span>(<span class="built_in">MAKE_CONFIG_ADDRESS</span>(b, d, f, <span class="number">0</span>)) != <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">&#123;</span><br><span class="line">bdfs[total_pci][<span class="number">0</span>] = b;</span><br><span class="line">bdfs[total_pci][<span class="number">1</span>] = d;</span><br><span class="line">bdfs[total_pci][<span class="number">2</span>] = f;</span><br><span class="line"><span class="comment">//每有一个存在的设备则总数加1</span></span><br><span class="line">total_pci++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据bfds数组中的数据为下拉选择框添加存在的设备</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_pci; i++)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR s[<span class="number">1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;Bus %02X,Device %02X,Function %02X&quot;</span>), bdfs[i][<span class="number">0</span>],bdfs[i][<span class="number">1</span>],bdfs[i][<span class="number">2</span>]);</span><br><span class="line">m_cmb_comm.<span class="built_in">AddString</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设定默认的选项</span></span><br><span class="line">m_cmb_comm.<span class="built_in">SetCurSel</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//调用函数设定表格样式（button_active为按钮活动状态，初始为0，即8字节）</span></span><br><span class="line">CMFCApplication2Dlg::<span class="built_in">clear_item</span>(button_active);</span><br><span class="line"><span class="comment">//将第“0”个设备的PCI8字节信息写入表格中</span></span><br><span class="line">CMFCApplication2Dlg::<span class="built_in">write_item</span>(button_active,bdfs[<span class="number">0</span>][<span class="number">0</span>], bdfs[<span class="number">0</span>][<span class="number">1</span>],bdfs[<span class="number">0</span>][<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//将第“0”个设备的Device ID等信息写入次级对话框中</span></span><br><span class="line">CMFCApplication2Dlg::<span class="built_in">write_tab</span>(bdfs[<span class="number">0</span>][<span class="number">0</span>], bdfs[<span class="number">0</span>][<span class="number">1</span>], bdfs[<span class="number">0</span>][<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCApplication2Dlg::OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((nID &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">CAboutDlg dlgAbout;</span><br><span class="line">dlgAbout.<span class="built_in">DoModal</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnSysCommand</span>(nID, lParam);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果向对话框添加最小化按钮，则需要下面的代码</span></span><br><span class="line"><span class="comment">//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，</span></span><br><span class="line"><span class="comment">//  这将由框架自动完成。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCApplication2Dlg::OnPaint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsIconic</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">CPaintDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>; <span class="comment">// 用于绘制的设备上下文</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">SendMessage</span>(WM_ICONERASEBKGND, <span class="keyword">reinterpret_cast</span>&lt;WPARAM&gt;(dc.<span class="built_in">GetSafeHdc</span>()), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使图标在工作区矩形中居中</span></span><br><span class="line"><span class="keyword">int</span> cxIcon = <span class="built_in">GetSystemMetrics</span>(SM_CXICON);</span><br><span class="line"><span class="keyword">int</span> cyIcon = <span class="built_in">GetSystemMetrics</span>(SM_CYICON);</span><br><span class="line">CRect rect;</span><br><span class="line"><span class="built_in">GetClientRect</span>(&amp;rect);</span><br><span class="line"><span class="keyword">int</span> x = (rect.<span class="built_in">Width</span>() - cxIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> y = (rect.<span class="built_in">Height</span>() - cyIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制图标</span></span><br><span class="line">dc.<span class="built_in">DrawIcon</span>(x, y, m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnPaint</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当用户拖动最小化窗口时系统调用此函数取得光标</span></span><br><span class="line"><span class="comment">//显示。</span></span><br><span class="line"><span class="function">HCURSOR <span class="title">CMFCApplication2Dlg::OnQueryDragIcon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;HCURSOR&gt;(m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以下为下拉选择框发生变动时的事件处理程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCApplication2Dlg::OnCbnSelchangeCombo1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="comment">//首先传递当前按钮活动状态，设定表格的格式</span></span><br><span class="line">CMFCApplication2Dlg::<span class="built_in">clear_item</span>(button_active);</span><br><span class="line"><span class="comment">//捕捉下拉选择框的选项</span></span><br><span class="line"><span class="keyword">int</span> info = m_cmb_comm.<span class="built_in">GetCurSel</span>();</span><br><span class="line"><span class="comment">//获取对应的Bus、Device、Function参数</span></span><br><span class="line"><span class="keyword">int</span> b = bdfs[info][<span class="number">0</span>],d = bdfs[info][<span class="number">1</span>],f = bdfs[info][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//传递参数将对应信息写入表格</span></span><br><span class="line">CMFCApplication2Dlg::<span class="built_in">write_item</span>(button_active, b,d,f);</span><br><span class="line"><span class="comment">//传递参数将对应信息写入次级对话框</span></span><br><span class="line">CMFCApplication2Dlg::<span class="built_in">write_tab</span>(b,d,f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当按钮1被单击时的事件处理程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCApplication2Dlg::OnBnClickedButton1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="comment">//设定按钮活动状态</span></span><br><span class="line">button_active = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//改变表格格式</span></span><br><span class="line">CMFCApplication2Dlg::<span class="built_in">clear_item</span>(button_active);</span><br><span class="line"><span class="comment">//捕捉选择框中的选项</span></span><br><span class="line"><span class="keyword">int</span> info = m_cmb_comm.<span class="built_in">GetCurSel</span>();</span><br><span class="line"><span class="comment">//获取对应的参数</span></span><br><span class="line"><span class="keyword">int</span> b = bdfs[info][<span class="number">0</span>], d = bdfs[info][<span class="number">1</span>], f = bdfs[info][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//将对应的信息写入表格</span></span><br><span class="line">CMFCApplication2Dlg::<span class="built_in">write_item</span>(button_active, b, d, f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当按钮2被单击时的事件处理程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCApplication2Dlg::OnBnClickedButton2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="comment">//改变按钮活动状态</span></span><br><span class="line">button_active = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//根据按钮活动状态设定表格格式</span></span><br><span class="line">CMFCApplication2Dlg::<span class="built_in">clear_item</span>(button_active);</span><br><span class="line"><span class="comment">//捕捉选择框选项</span></span><br><span class="line"><span class="keyword">int</span> info = m_cmb_comm.<span class="built_in">GetCurSel</span>();</span><br><span class="line"><span class="comment">//获取设备对应的参数</span></span><br><span class="line"><span class="keyword">int</span> b = bdfs[info][<span class="number">0</span>], d = bdfs[info][<span class="number">1</span>], f = bdfs[info][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//将对应的信息写入表格</span></span><br><span class="line">CMFCApplication2Dlg::<span class="built_in">write_item</span>(button_active, b, d, f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当按钮3被单击时的事件处理程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCApplication2Dlg::OnBnClickedButton3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//改变按钮活动状态</span></span><br><span class="line">button_active = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="comment">//根据按钮活动状态设定表格格式</span></span><br><span class="line">CMFCApplication2Dlg::<span class="built_in">clear_item</span>(button_active);</span><br><span class="line"><span class="comment">//捕捉选择框中的选项</span></span><br><span class="line"><span class="keyword">int</span> info = m_cmb_comm.<span class="built_in">GetCurSel</span>();</span><br><span class="line"><span class="comment">//获取对应的参数</span></span><br><span class="line"><span class="keyword">int</span> b = bdfs[info][<span class="number">0</span>], d = bdfs[info][<span class="number">1</span>], f = bdfs[info][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//将对应的信息写入表格</span></span><br><span class="line">CMFCApplication2Dlg::<span class="built_in">write_item</span>(button_active, b, d, f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以下为自定义函数，用于设定表格的格式，由活动按钮决定</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCApplication2Dlg::clear_item</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//每次运行时先清空表格</span></span><br><span class="line">m_mylist.<span class="built_in">DeleteAllItems</span>();</span><br><span class="line"><span class="comment">//删除所有列，因为删除第“0”列后第一列变为第“0”列，所以只需循环删除第“0”列即可</span></span><br><span class="line"><span class="comment">//17为表格中出现的最大列数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">m_mylist.<span class="built_in">DeleteColumn</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取表格的宽度</span></span><br><span class="line">CRect mRect;</span><br><span class="line">m_mylist.<span class="built_in">GetWindowRect</span>(&amp;mRect);</span><br><span class="line"><span class="keyword">int</span> width = mRect.<span class="built_in">Width</span>();</span><br><span class="line"><span class="comment">//插入第“0”列，居中，宽度为30</span></span><br><span class="line">m_mylist.<span class="built_in">InsertColumn</span>(<span class="number">0</span>, _T(<span class="string">&quot;0&quot;</span>), LVCFMT_CENTER, <span class="number">30</span>);</span><br><span class="line"><span class="comment">//根据参数（即按钮活动状态）设定对应的格式</span></span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当第一个按钮活动时，表格为17x17（连同索引）</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR s[<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;0%X&quot;</span>), i);</span><br><span class="line">m_mylist.<span class="built_in">InsertColumn</span>(i + <span class="number">1</span>, s, LVCFMT_CENTER, (width - <span class="number">30</span>) / <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR s[<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;%X0&quot;</span>), i);</span><br><span class="line">m_mylist.<span class="built_in">InsertItem</span>(i, s, LVCFMT_CENTER);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当第二个按钮活动时，表格为17x9（连同索引）</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR s[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;0%X0%X&quot;</span>), i + <span class="number">1</span>, i);</span><br><span class="line">m_mylist.<span class="built_in">InsertColumn</span>(i / <span class="number">2</span> + <span class="number">1</span>, s, LVCFMT_CENTER, (width - <span class="number">30</span>) / <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR s[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;%X0&quot;</span>), i);</span><br><span class="line">m_mylist.<span class="built_in">InsertItem</span>(i, s, LVCFMT_CENTER);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当第三个按钮活动时，表格为17x5（连同索引）</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR s[<span class="number">9</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;0%X0%X0%X0%X&quot;</span>), i + <span class="number">3</span>, i + <span class="number">2</span>, i + <span class="number">1</span>, i);</span><br><span class="line">m_mylist.<span class="built_in">InsertColumn</span>(i / <span class="number">4</span> + <span class="number">1</span>, s, LVCFMT_CENTER, (width - <span class="number">30</span>) / <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR s[<span class="number">9</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;%X0&quot;</span>), i);</span><br><span class="line">m_mylist.<span class="built_in">InsertItem</span>(i, s, LVCFMT_CENTER);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以下为自定义函数，用于写入对应设备及对应格式的信息，由活动按钮和选择框共同决定</span></span><br><span class="line"><span class="comment">//参数b、d、f用于读取设备信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCApplication2Dlg::write_item</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> d,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//参数a为按钮活动状态</span></span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//写入8字节信息</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用于访问要写入的列</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">252</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR s[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//调用ReaPCIConfig函数读取信息并存入结构体</span></span><br><span class="line">data_poor.Data32 = <span class="built_in">ReadPCIConfig</span>(<span class="built_in">MAKE_CONFIG_ADDRESS</span>(b, d, f, i));</span><br><span class="line"><span class="comment">//获取第一个8位信息，将其转换为相应格式，并写入表格</span></span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;%02X&quot;</span>), data_poor.HIGH_LOW_8.FIRST_8);</span><br><span class="line">m_mylist.<span class="built_in">SetItemText</span>(i / <span class="number">16</span>, j + <span class="number">1</span>, s);</span><br><span class="line"><span class="comment">//获取第二个8位信息，将其转换为相应格式，并写入表格</span></span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;%02X&quot;</span>), data_poor.HIGH_LOW_8.SECOND_8);</span><br><span class="line">m_mylist.<span class="built_in">SetItemText</span>(i / <span class="number">16</span>, j + <span class="number">2</span>, s);</span><br><span class="line"><span class="comment">//获取第三个8位信息，将其转换为相应格式，并写入表格</span></span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;%02X&quot;</span>), data_poor.HIGH_LOW_8.THIRD_8);</span><br><span class="line">m_mylist.<span class="built_in">SetItemText</span>(i / <span class="number">16</span>, j + <span class="number">3</span>, s);</span><br><span class="line"><span class="comment">//获取第四个8位信息，将其转换为相应格式，并写入表格</span></span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;%02X&quot;</span>), data_poor.HIGH_LOW_8.FOUTH_8);</span><br><span class="line">m_mylist.<span class="built_in">SetItemText</span>(i / <span class="number">16</span>, j + <span class="number">4</span>, s);</span><br><span class="line"><span class="comment">//每循环一次，将列数加4</span></span><br><span class="line">j += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果已经写到了行尾，则重置变量j</span></span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">16</span>)</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//写入16字节信息</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用于访问要写入的列</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">252</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR s[<span class="number">9</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//调用函数获取信息</span></span><br><span class="line">data_poor.Data32 = <span class="built_in">ReadPCIConfig</span>(<span class="built_in">MAKE_CONFIG_ADDRESS</span>(b, d, f, i));</span><br><span class="line"><span class="comment">//写入第一个16位信息</span></span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;%04X&quot;</span>), data_poor.HIGH_LOW_16.FIRST_16);</span><br><span class="line">m_mylist.<span class="built_in">SetItemText</span>(i / <span class="number">16</span>, j + <span class="number">1</span>, s);</span><br><span class="line"><span class="comment">//写入第二个16位信息</span></span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;%04X&quot;</span>), data_poor.HIGH_LOW_16.SECOND_16);</span><br><span class="line">m_mylist.<span class="built_in">SetItemText</span>(i / <span class="number">16</span>, j + <span class="number">2</span>, s);</span><br><span class="line"><span class="comment">//每循环一次，列数加2</span></span><br><span class="line">j += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果已经写到行尾，则重置</span></span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">8</span>)</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//用于写入32位数据</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用于访问要写入的列</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">252</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR s[<span class="number">17</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//调用函数获取信息</span></span><br><span class="line">data_poor.Data32 = <span class="built_in">ReadPCIConfig</span>(<span class="built_in">MAKE_CONFIG_ADDRESS</span>(b, d, f, i));</span><br><span class="line"><span class="comment">//将32位信息写入表格</span></span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;%08X&quot;</span>), data_poor.Data32);</span><br><span class="line">m_mylist.<span class="built_in">SetItemText</span>(i / <span class="number">16</span>, j + <span class="number">1</span>, s);</span><br><span class="line"><span class="comment">//每写入一条列数加1</span></span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果已经写到行尾，则重置</span></span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">4</span>)</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以下为自定义函数，用于将部分设备信息写入次级对话框，由选择框决定（与按钮活动状态无关）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCApplication2Dlg::write_tab</span><span class="params">(<span class="keyword">int</span> b,<span class="keyword">int</span> d,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR s[<span class="number">17</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//每个设备信息的第一个32字节数据</span></span><br><span class="line">data_poor.Data32 = <span class="built_in">ReadPCIConfig</span>(<span class="built_in">MAKE_CONFIG_ADDRESS</span>(b, d, f, <span class="number">0</span>));</span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;0x%08X&quot;</span>), data_poor.Data32);</span><br><span class="line">m_page1.<span class="built_in">SetDlgItemText</span>(IDC_STATIC_1r, s);</span><br><span class="line"><span class="comment">//设备信息的第3个32字节数据的末尾两位</span></span><br><span class="line">data_poor.Data32 = <span class="built_in">ReadPCIConfig</span>(<span class="built_in">MAKE_CONFIG_ADDRESS</span>(b, d, f, <span class="number">11</span>));</span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;0x%02X&quot;</span>), data_poor.HIGH_LOW_8.FIRST_8);</span><br><span class="line">m_page1.<span class="built_in">SetDlgItemText</span>(IDC_STATIC_2r, s);</span><br><span class="line"><span class="comment">//设备信息的第3个32字节数据的前6位</span></span><br><span class="line">data_poor.Data32 = <span class="built_in">ReadPCIConfig</span>(<span class="built_in">MAKE_CONFIG_ADDRESS</span>(b, d, f, <span class="number">11</span>));</span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;0x%04X%02X&quot;</span>), data_poor.HIGH_LOW_16.SECOND_16,data_poor.HIGH_LOW_8.THIRD_8);</span><br><span class="line">m_page1.<span class="built_in">SetDlgItemText</span>(IDC_STATIC_3r, s);</span><br><span class="line"><span class="comment">//设备信息的第4个32字节数据的末尾两位</span></span><br><span class="line">data_poor.Data32 = <span class="built_in">ReadPCIConfig</span>(<span class="built_in">MAKE_CONFIG_ADDRESS</span>(b, d, f, <span class="number">15</span>));</span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;0x%02X&quot;</span>), data_poor.HIGH_LOW_8.FIRST_8);</span><br><span class="line">m_page1.<span class="built_in">SetDlgItemText</span>(IDC_STATIC_4r, s);</span><br><span class="line"><span class="comment">//设备信息的第12个32字节数据</span></span><br><span class="line">data_poor.Data32 = <span class="built_in">ReadPCIConfig</span>(<span class="built_in">MAKE_CONFIG_ADDRESS</span>(b, d, f, <span class="number">44</span>));</span><br><span class="line">_stprintf_s(s, <span class="built_in">TEXT</span>(<span class="string">&quot;0x%08X&quot;</span>), data_poor.Data32);</span><br><span class="line">m_page1.<span class="built_in">SetDlgItemText</span>(IDC_STATIC_5r, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>添加自定义函数时，需要修改Dlg结尾的头文件，即xxxDlg.h，本文中添加了3个自定义函数，则需添加如下内容：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">afx_msg <span class="keyword">void</span> <span class="title">clear_item</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="keyword">void</span> <span class="title">write_tab</span><span class="params">(<span class="keyword">int</span> b,<span class="keyword">int</span> d,<span class="keyword">int</span> f)</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="keyword">void</span> <span class="title">write_item</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> d,<span class="keyword">int</span> f)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="次级对话框"><a href="#次级对话框" class="headerlink" title="次级对话框"></a>次级对话框</h2><p>在资源视图-Dialog，右键，选择添加资源，选择Dialog-新建，即可创建一个次级对话框，在次级对话框中，右键，选择属性，可以修改对话框的ID。修改完之后，再次右键次级对话框，选择”添加类“，输入类名，单击完成，会自动生成对应的头文件和cpp文件，再为次级对话框添加10个Static Text组件（静态文本），接下来修改cpp文件中的以下内容：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数是已经存在的，只需要设定前五个静态文本的内容即可，另外会跟随主对话框的选择框选项而变动</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_tab1::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialog::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">SetDlgItemText</span>(IDC_STATIC_1, _T(<span class="string">&quot;Device/Vendor ID&quot;</span>));</span><br><span class="line"><span class="built_in">SetDlgItemText</span>(IDC_STATIC_2, _T(<span class="string">&quot;Revision ID&quot;</span>));</span><br><span class="line"><span class="built_in">SetDlgItemText</span>(IDC_STATIC_3, _T(<span class="string">&quot;Class Code&quot;</span>));</span><br><span class="line"><span class="built_in">SetDlgItemText</span>(IDC_STATIC_4, _T(<span class="string">&quot;Cacheline Size&quot;</span>));</span><br><span class="line"><span class="built_in">SetDlgItemText</span>(IDC_STATIC_5, _T(<span class="string">&quot;Subsystem ID&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1 IO.lib、IO.DLL、IO.h为公司内部文件，无法提供，文中的ReadPCIConfig函数即存储在该动态链接库中，如果你有可以读取信息的函数，那么本文可以为你提供一定的参考。<br>2 为事件添加处理程序时，会自动创建对应函数，并在xxxDlg.h的头文件里声明，如果有不需要的事件处理程序，请务必在类向导中删除，编辑器会自动注释关联代码。<br>3 需要修改表格的view属性，将其设置为Report（报表格式），不然插入条目时无法显示（本文中是如此）。<br>4 MFC使用已经相对较少，网上的可用信息多是五年前的，但仍然具有一定的参考性。<br>5 部分windows10下编译的exe文件无法在windows7中运行，具体原因请查询。<br>6 本文代码需以管理员身份运行VS2019，并选择X64，方可顺利Debug或Release</p><h2 id="编译结果"><a href="#编译结果" class="headerlink" title="编译结果"></a>编译结果</h2><p><img src="https://www.ljczero.top/media/editor/%E6%89%B9%E6%B3%A8%202020-09-04%20152837_20200904152810825722.png"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>稳定婚姻问题的Python实现</title>
      <link href="/2020/08/28/%E7%A8%B3%E5%AE%9A%E5%A9%9A%E5%A7%BB%E9%97%AE%E9%A2%98%E7%9A%84Python%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/08/28/%E7%A8%B3%E5%AE%9A%E5%A9%9A%E5%A7%BB%E9%97%AE%E9%A2%98%E7%9A%84Python%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>“稳定婚姻问题”在生活中是一个典型的问题,通俗地可叙述为:当前有N位男生和N位女生最后要组成稳定的婚姻家庭,过程开始之前男生和女生在各自的心目中都按照喜爱程度对N位异性有了各自的排序.然后开始选择自己的对象,其规则是:男生第一天均向各自最喜欢的女生写一封“情书”。</p><h2 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h2><p>1962年，美国数学家David Gale和Lloyd Shapley发明了一种寻找稳定婚姻的策略，人们称之为延迟认可算法（Gale-Shapley算法）。<br>先对所有男士进行落选标记，称其为自由男。当存在自由男时，进行以下操作：<br>1 每一位自由男在所有尚未拒绝她的女士中选择一位被他排名最优先的女士；<br>2 每一位女士将正在追求她的自由男与其当前男友进行比较，选择其中排名优先的男士作为其男友，即若自由男优于当前男友，则抛弃前男友；否则保留其男友，拒绝自由男。<br>3 若某男士被其女友抛弃，重新变成自由男；<br>4 重复以上过程直到没有求婚发生。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Fri Aug 28 08:43:33 2020</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: ljc545w</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_stable_matching</span>(<span class="params">man_preferences,woman_preferences</span>):</span></span><br><span class="line">    <span class="comment">#初始将每个人的自由状况设定为True</span></span><br><span class="line">    length = <span class="built_in">len</span>(man_preferences)</span><br><span class="line">    is_man_free = [<span class="literal">True</span>] * length</span><br><span class="line">    is_woman_free = [<span class="literal">True</span>] * length</span><br><span class="line">    <span class="comment">#初始化互动状况，刚开始时没有任何互动</span></span><br><span class="line">    isManProposed = [[<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length)]</span><br><span class="line">    <span class="comment">#初始化牵手列表</span></span><br><span class="line">    match = [(-<span class="number">1</span>,-<span class="number">1</span>)] * length</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#当还有男嘉宾是单身时就持续循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span> <span class="keyword">in</span> is_man_free:</span><br><span class="line">        <span class="comment">#获取男嘉宾的牌号</span></span><br><span class="line">        indexM = is_man_free.index(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment">#如果男嘉宾还有未曾互动过的女嘉宾（以男嘉宾心中排行为序）</span></span><br><span class="line">        <span class="keyword">if</span> <span class="literal">False</span> <span class="keyword">in</span> isManProposed[indexM]:</span><br><span class="line">            <span class="comment">#初始化女嘉宾牌号</span></span><br><span class="line">            indexW = -<span class="number">1</span></span><br><span class="line">            <span class="comment">#查找未曾互动的女嘉宾中最中意的那一个</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">                w = man_preferences[indexM][i]</span><br><span class="line">                <span class="keyword">if</span> isManProposed[indexM][w] <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">                    <span class="comment">#选定女嘉宾牌号</span></span><br><span class="line">                    indexW = w</span><br><span class="line">                    <span class="comment">#找到以后跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="comment">#更改互动状况</span></span><br><span class="line">            isManProposed[indexM][indexW] = <span class="literal">True</span></span><br><span class="line">            <span class="comment">#如果女嘉宾仍是自由身，则两人牵手成功</span></span><br><span class="line">            <span class="keyword">if</span> is_woman_free[indexW] <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="comment">#修改男女嘉宾的当前状况，并存储牵手信息</span></span><br><span class="line">                is_woman_free[indexW] = <span class="literal">False</span></span><br><span class="line">                is_man_free[indexM] = <span class="literal">False</span></span><br><span class="line">                match[indexM] = (indexM,indexW)</span><br><span class="line">            <span class="comment">#如果女嘉宾已经名花有主，则当前男嘉宾与当前女嘉宾的‘男朋友’进行PK</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">#从牵手信息中查找当前女嘉宾的‘男朋友’牌号</span></span><br><span class="line">                indexM1 = -<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">                    <span class="keyword">if</span> match[j][<span class="number">1</span>] == indexW:</span><br><span class="line">                        indexM1 = j</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="comment">#如果在当前女嘉宾心中，相较于‘男朋友’更中意当前的男嘉宾</span></span><br><span class="line">                <span class="keyword">if</span> woman_preferences[indexW].index(indexM) &lt; woman_preferences[indexW].index(indexM1):</span><br><span class="line">                    <span class="comment">#当前女嘉宾的‘前男友’恢复自由身</span></span><br><span class="line">                    is_man_free[indexM1] = <span class="literal">True</span></span><br><span class="line">                    <span class="comment">#当前男嘉宾牵手成功，修改其自由状况</span></span><br><span class="line">                    is_man_free[indexM] = <span class="literal">False</span></span><br><span class="line">                    <span class="comment">#修改牵手信息</span></span><br><span class="line">                    match[indexM] = (indexM,indexW)</span><br><span class="line">    <span class="comment">#返回最终牵手信息</span></span><br><span class="line">    <span class="keyword">return</span> match</span><br><span class="line"><span class="comment">#男嘉宾心中最中意的女嘉宾排行</span></span><br><span class="line">MP = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">9</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">9</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">    ]</span><br><span class="line"><span class="comment">#女嘉宾心中最中意的男嘉宾排行</span></span><br><span class="line">WP = [</span><br><span class="line">    [<span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(find_stable_matching(MP,WP))</span><br></pre></td></tr></table></figure><h2 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">5</span>), (<span class="number">5</span>, <span class="number">0</span>), (<span class="number">6</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">9</span>), (<span class="number">8</span>, <span class="number">8</span>), (<span class="number">9</span>, <span class="number">7</span>)]</span><br><span class="line"><span class="comment">#即0号男嘉宾与1号女嘉宾牵手，以此类推</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python制作二维码</title>
      <link href="/2020/08/27/%E4%BD%BF%E7%94%A8python%E5%88%B6%E4%BD%9C%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
      <url>/2020/08/27/%E4%BD%BF%E7%94%A8python%E5%88%B6%E4%BD%9C%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> MyQR <span class="keyword">import</span> myqr</span><br><span class="line">url = <span class="string">&#x27;https://www.ljczero.top&#x27;</span></span><br><span class="line">myqr.run(words = url,<span class="comment">#目标url</span></span><br><span class="line">         version = <span class="number">5</span>,<span class="comment">#控制边长，范围1到40</span></span><br><span class="line">         level = <span class="string">&#x27;H&#x27;</span>,<span class="comment">#控制纠错水平，[L,M,Q,H]，从左到右依次升高</span></span><br><span class="line">         picture = <span class="string">&#x27;heart.gif&#x27;</span>,<span class="comment">#将二维码与自定义图片结合</span></span><br><span class="line">         colorized = <span class="literal">True</span>,<span class="comment">#默认是黑白（False），True为彩色</span></span><br><span class="line">         contrast = <span class="number">1.0</span>,<span class="comment">#调节对比度，1.0表示原始图片</span></span><br><span class="line">         brightness = <span class="number">1.0</span>,<span class="comment">#调节亮度，1.0表示原始图片</span></span><br><span class="line">         save_name = <span class="string">&#x27;zz.gif&#x27;</span><span class="comment">#输出文件名</span></span><br><span class="line">         )</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录第四周的C++作业</title>
      <link href="/2020/08/27/%E8%AE%B0%E5%BD%95%E7%AC%AC%E5%9B%9B%E5%91%A8%E7%9A%84C++%E4%BD%9C%E4%B8%9A/"/>
      <url>/2020/08/27/%E8%AE%B0%E5%BD%95%E7%AC%AC%E5%9B%9B%E5%91%A8%E7%9A%84C++%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用Visual Studio 编写一个控制台程序，功能如下：</span></span><br><span class="line"><span class="comment">一、使用SMBIOS读取本机的MEMORY信息，并打印一下信息</span></span><br><span class="line"><span class="comment">[MEMORY]</span></span><br><span class="line"><span class="comment">NUM = 2</span></span><br><span class="line"><span class="comment">SIZE=32GB</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[0]</span></span><br><span class="line"><span class="comment">LOCATOR=DIMM1</span></span><br><span class="line"><span class="comment">SIZE=16GB</span></span><br><span class="line"><span class="comment">TYPE=DDR4</span></span><br><span class="line"><span class="comment">SPEED=2666MHZ</span></span><br><span class="line"><span class="comment">MANUFACTURER=Micron</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[1]</span></span><br><span class="line"><span class="comment">LOCATOR=DIMM1</span></span><br><span class="line"><span class="comment">SIZE=16GB</span></span><br><span class="line"><span class="comment">TYPE=DDR4</span></span><br><span class="line"><span class="comment">SPEED=2666MHZ</span></span><br><span class="line"><span class="comment">MANUFACTURER=Micron</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注：可以参考RW上SMBIOS信息对照</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once <span class="comment">//只编译一次，节省时间</span></span></span><br><span class="line"><span class="comment">/*包含的头文件*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDKDDKVer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="comment">/*使用命名空间*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//保存之前的结构体对齐方式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(push) </span></span><br><span class="line"><span class="comment">//使用新的结构体对齐方式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(1)</span></span><br></pre></td></tr></table></figure><h2 id="声明结构体"><a href="#声明结构体" class="headerlink" title="声明结构体"></a>声明结构体</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*存储SMBIOS信息的长度和尾部地址*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">RawSMBIOSData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DWORD Length;</span><br><span class="line">PBYTE* SMBIOSTableData;</span><br><span class="line">&#125; RawSMBIOSData, * PRawSMBIOSData;</span><br><span class="line"><span class="comment">/*存储各TYPE的三类信息*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SMBIOSHEADER_</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">BYTE Type;</span><br><span class="line">BYTE Length;</span><br><span class="line">WORD Handle;</span><br><span class="line">&#125; SMBIOSHEADER, * PSMBIOSHEADER;</span><br><span class="line"><span class="comment">/*存储TYPE16信息*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">TYPE_16_</span> &#123;</span></span><br><span class="line">SMBIOSHEADER Header;</span><br><span class="line">UCHAR  Location;</span><br><span class="line">UCHAR  Use;</span><br><span class="line">UCHAR  MemoryErrorCorrection;</span><br><span class="line">ULONG32  MaximumCapacity;</span><br><span class="line">UINT16 MemoryErrorHandle;</span><br><span class="line">UINT16 NumberofMemoryDevices;</span><br><span class="line">ULONG32 ExtendedMaximumCapacity;</span><br><span class="line">&#125; PhysicalMemoryArray, * PPhysicalMemoryArray;</span><br><span class="line"><span class="comment">/*存储TYPE17信息*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">TYPE_17_</span> &#123;</span></span><br><span class="line">SMBIOSHEADER Header;</span><br><span class="line">UINT16PhysicalArrayHandle;</span><br><span class="line">UINT16ErrorInformationHandle;</span><br><span class="line">UINT16TotalWidth;</span><br><span class="line">UINT16DataWidth;</span><br><span class="line">UINT16Size;</span><br><span class="line">UCHARFormFactor;</span><br><span class="line">UCHARDeviceSet;</span><br><span class="line">UCHARDeviceLocator;</span><br><span class="line">UCHARBankLocator;</span><br><span class="line">UCHARMemoryType;</span><br><span class="line">UINT16TypeDetail;</span><br><span class="line">UINT16Speed;</span><br><span class="line">UCHARManufacturer;</span><br><span class="line">UCHARSN;</span><br><span class="line">UCHARAssetTag;</span><br><span class="line">UCHARPN;</span><br><span class="line">UCHARAttributes;</span><br><span class="line">&#125; MemoryDevice, * PMemoryDevice;</span><br></pre></td></tr></table></figure><h2 id="枚举Memory-type"><a href="#枚举Memory-type" class="headerlink" title="枚举Memory type"></a>枚举Memory type</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> _<span class="title">MemoryType_</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Other = <span class="number">1</span>, Un_known, DRAM, EDRAM,</span><br><span class="line">VRAM, SRAM, RAM, ROM, FLASH,</span><br><span class="line">EEPROM, FEPROM, EPROM, CDRAM,</span><br><span class="line">RAM_3D, SDRAM, SGRAM, RDRAM,</span><br><span class="line">DDR, DDR2, DDR2_FB_DIMM, Reserved_1,</span><br><span class="line">Reserved_2, Reserved_3,DDR3, FBD2, DDR4,</span><br><span class="line">LPDDR, LPDDR2, LPDDR3,LPDDR4,</span><br><span class="line">Logicalnonvolatiledevice,HBM, HBM2, DDR5, LPDDR5</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//自定义对齐方式结束</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(pop)</span></span><br></pre></td></tr></table></figure><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*根据编码选择字符解析方式*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LocateString LocateStringW</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LocateStringLocateStringA</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="几个函数"><a href="#几个函数" class="headerlink" title="几个函数"></a>几个函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*返回信息尾部地址*/</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">toPointString</span><span class="params">(<span class="keyword">void</span>* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">char</span>*)p + ((PSMBIOSHEADER)p)-&gt;Length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*解析字符串*/</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">LocateStringA</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str, UINT i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> strNull[] = <span class="string">&quot;Null String&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == i || <span class="number">0</span> == *str) <span class="keyword">return</span> strNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (--i)</span><br><span class="line">&#123;</span><br><span class="line">str += <span class="built_in">strlen</span>((<span class="keyword">char</span>*)str) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*解析字符串*/</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">wchar_t</span>* <span class="title">LocateStringW</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str, UINT i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">wchar_t</span> buff[<span class="number">2048</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* pStr = <span class="built_in">LocateStringA</span>(str, i);</span><br><span class="line"><span class="built_in">SecureZeroMemory</span>(buff, <span class="built_in"><span class="keyword">sizeof</span></span>(buff));</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_OEMCP, <span class="number">0</span>, pStr, (<span class="keyword">int</span>)<span class="built_in">strlen</span>(pStr), buff, <span class="built_in"><span class="keyword">sizeof</span></span>(buff));</span><br><span class="line"><span class="keyword">return</span> buff;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出TYPE16信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ProcPhysicalMemoryArray</span><span class="params">(<span class="keyword">void</span>* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PPhysicalMemoryArray pMAMA = (PPhysicalMemoryArray)p;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* str = <span class="built_in">toPointString</span>(p);</span><br><span class="line"></span><br><span class="line">_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;NUM = %d\n&quot;</span>), pMAMA-&gt;NumberofMemoryDevices);</span><br><span class="line">_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;SIZE=%dGB\n&quot;</span>), pMAMA-&gt;MaximumCapacity / <span class="number">1024</span> / <span class="number">1024</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出TYPE17信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ProcMemoryDevice</span><span class="params">(<span class="keyword">void</span>* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PMemoryDevice pMD = (PMemoryDevice)p;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* str = <span class="built_in">toPointString</span>(p);</span><br><span class="line"></span><br><span class="line">_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;LOCATOR=%s\n&quot;</span>), <span class="built_in">LocateString</span>(str, pMD-&gt;DeviceLocator));</span><br><span class="line">_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;SIZE=%dGB\n&quot;</span>), pMD-&gt;Size / <span class="number">1024</span>);</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (pMD-&gt;MemoryType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Other:_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;TYPE=0x%02X Other\n&quot;</span>),pMD-&gt;MemoryType); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Un_known:_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;TYPE=0x%02X Unknown\n&quot;</span>), pMD-&gt;MemoryType); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DDR3:_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;TYPE=0x%02X DDR3\n&quot;</span>), pMD-&gt;MemoryType); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DDR4:_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;TYPE=0x%02X DDR4\n&quot;</span>), pMD-&gt;MemoryType); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pMD-&gt;Header.Length &gt; <span class="number">0x15</span>)</span><br><span class="line">&#123;</span><br><span class="line">_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;SPEED=%dMHZ\n&quot;</span>), pMD-&gt;Speed);</span><br><span class="line">_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;MANUFACTURER=%s\n&quot;</span>), <span class="built_in">LocateString</span>(str, pMD-&gt;Manufacturer));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*根据需求调用bool函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DispatchStructType</span><span class="params">(PSMBIOSHEADER hdr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">BYTE t;</span><br><span class="line"><span class="built_in"><span class="keyword">bool</span></span>(*Proc)(<span class="keyword">void</span>* p);</span><br><span class="line">&#125; TPFUNC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TPFUNCtpfunc[] = &#123;</span><br><span class="line">&#123; <span class="number">16</span>, ProcPhysicalMemoryArray&#125;,</span><br><span class="line">&#123; <span class="number">17</span>, ProcMemoryDevice &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (UINT i = <span class="number">0</span>; i &lt; <span class="built_in"><span class="keyword">sizeof</span></span>(tpfunc) / <span class="built_in"><span class="keyword">sizeof</span></span>(TPFUNC); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tpfunc[i].t == hdr-&gt;Type)</span><br><span class="line">&#123;</span><br><span class="line">tpfunc[i].<span class="built_in">Proc</span>((<span class="keyword">void</span>*)hdr);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*选择要打印的SMBIOS信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DumpSMBIOSStruct</span><span class="params">(<span class="keyword">void</span>* Addr, UINT Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">LPBYTE p = (LPBYTE)(Addr);</span><br><span class="line"><span class="keyword">const</span> LPBYTE lastAddress = p + Len;</span><br><span class="line">PSMBIOSHEADER pHeader;</span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line">pHeader = (PSMBIOSHEADER)p;</span><br><span class="line"><span class="keyword">if</span> (pHeader-&gt;Type == <span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line">_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;[Memory]\n&quot;</span>));</span><br><span class="line"><span class="built_in">DispatchStructType</span>(pHeader);</span><br><span class="line">_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pHeader-&gt;Type == <span class="number">17</span>)</span><br><span class="line">&#123;</span><br><span class="line">_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;[%d]\n&quot;</span>), i);</span><br><span class="line">i++;</span><br><span class="line"><span class="built_in">DispatchStructType</span>(pHeader);</span><br><span class="line">_tprintf(<span class="built_in">TEXT</span>(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((pHeader-&gt;Type == <span class="number">127</span>) &amp;&amp; (pHeader-&gt;Length == <span class="number">4</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">LPBYTE nt = p + pHeader-&gt;Length; </span><br><span class="line"><span class="keyword">while</span> (<span class="number">0</span> != (*nt | *(nt + <span class="number">1</span>))) nt++; </span><br><span class="line">nt += <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (nt &gt;= lastAddress)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">p = nt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*主函数*/</span></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> nAgrv,<span class="keyword">char</span>* argv[])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*_MemoryType_ zzz;</span></span><br><span class="line"><span class="comment">zzz = _MemoryType_(18);</span></span><br><span class="line"><span class="comment">printf(&quot;%d\n&quot;, zzz);*/</span></span><br><span class="line">DWORD needBufferSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> BYTE byteSignature[] = &#123; <span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;R&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> DWORD Signature = *((DWORD*)byteSignature);</span><br><span class="line">LPBYTE pBuff = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">/*调用接口获取信息长度*/</span></span><br><span class="line">needBufferSize = <span class="built_in">GetSystemFirmwareTable</span>(Signature, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">/*根据信息长度开辟内存空间*/</span></span><br><span class="line">pBuff = (LPBYTE)<span class="built_in">malloc</span>(needBufferSize);</span><br><span class="line"><span class="keyword">if</span> (pBuff)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//再次调用接口获取信息</span></span><br><span class="line"><span class="built_in">GetSystemFirmwareTable</span>(Signature, <span class="number">0</span>, pBuff, needBufferSize);</span><br><span class="line"><span class="keyword">const</span> PRawSMBIOSData pDMIData = (PRawSMBIOSData)pBuff;</span><br><span class="line"><span class="built_in">DumpSMBIOSStruct</span>(&amp;(pDMIData-&gt;SMBIOSTableData), pDMIData-&gt;Length);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#总结<br>是根据一篇从网上找到的现有代码，经过一定删减，并根据Type17结构体写法设计出Type16的结构体，最终筛选出所需信息，然而觉得硬件还是相当难搞。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>温习爬虫（使用IP代理池）</title>
      <link href="/2020/08/24/%E6%B8%A9%E4%B9%A0%E7%88%AC%E8%99%AB%EF%BC%88%E4%BD%BF%E7%94%A8IP%E4%BB%A3%E7%90%86%E6%B1%A0%EF%BC%89/"/>
      <url>/2020/08/24/%E6%B8%A9%E4%B9%A0%E7%88%AC%E8%99%AB%EF%BC%88%E4%BD%BF%E7%94%A8IP%E4%BB%A3%E7%90%86%E6%B1%A0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h2 id="requests配置"><a href="#requests配置" class="headerlink" title="requests配置"></a>requests配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">URL = <span class="string">&#x27;https://www.haoshuya.com&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">proxies=[&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;114.103.168.183:3000&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;175.43.156.42:9999&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;218.64.148.47:9000&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;221.224.136.211:35101&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;http:&#x27;</span>:<span class="string">&#x27;175.42.129.65:9999&#x27;</span>&#125;,&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;117.64.225.154:1133&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="目录与章节地址"><a href="#目录与章节地址" class="headerlink" title="目录与章节地址"></a>目录与章节地址</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">url = URL + <span class="string">&#x27;/1/1627&#x27;</span></span><br><span class="line">response = requests.get(url = url ,headers = headers)</span><br><span class="line">response.encoding = response.apparent_encoding</span><br><span class="line">html = response.text</span><br><span class="line">bf = bs(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">html = bf.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&quot;cbn1zbis1t&quot;</span>)</span><br><span class="line">list_first = html.find_all(<span class="string">&#x27;a&#x27;</span>,class_ = <span class="string">&quot;cbn1afm1t1&quot;</span>)</span><br><span class="line">list_second = html.find_all(<span class="string">&#x27;a&#x27;</span>,target = <span class="string">&quot;_blank&quot;</span>)</span><br><span class="line">titles = []</span><br><span class="line">urls = []</span><br><span class="line"><span class="comment">## 以下可以改用if条件句</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">1103</span>):</span><br><span class="line">    titles.append(list_second[i][<span class="string">&#x27;title&#x27;</span>][<span class="number">6</span>:])</span><br><span class="line">    url = URL + list_second[i][<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">    urls.append(url)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1103</span>,<span class="built_in">len</span>(list_second)):</span><br><span class="line">    titles.append(list_second[i][<span class="string">&#x27;title&#x27;</span>][<span class="number">6</span>:])</span><br><span class="line">    url = list_second[i][<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">    urls.append(url)</span><br></pre></td></tr></table></figure><h2 id="开始爬取"><a href="#开始爬取" class="headerlink" title="开始爬取"></a>开始爬取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#统计错误页</span></span><br><span class="line">error = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1120</span>,<span class="built_in">len</span>(urls)):</span><br><span class="line"><span class="comment">#从IP代理池中随机获取一个</span></span><br><span class="line">    j = random.randint(<span class="number">0</span>,<span class="built_in">len</span>(proxies) - <span class="number">1</span>)</span><br><span class="line">    proxy = proxies[j]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        txt = requests.get(url = urls[i],headers = headers,proxies = proxy)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        error.append(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第%s章下载s失败！&#x27;</span> % <span class="built_in">str</span>(i + <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;代理ip为&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(proxy))</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    txt.encoding = txt.apparent_encoding</span><br><span class="line">    html = txt.text</span><br><span class="line">    bf = bs(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment">#print(bf)</span></span><br><span class="line"><span class="comment">#网站有一点小小的反爬</span></span><br><span class="line">    context = bf.find(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&quot;cbd1con1so1&quot;</span>).text</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(context) == <span class="number">0</span>:</span><br><span class="line">    context = bf.find(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&quot;cbdlconlsol&quot;</span>).text</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;雪中悍刀行.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(titles[i] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(context + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第%s章下载完成！&#x27;</span> % <span class="built_in">str</span>(i + <span class="number">1</span>))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(error)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python连接MongoDB并进行一些简单操作</title>
      <link href="/2020/08/20/Python%E8%BF%9E%E6%8E%A5MongoDB%E5%B9%B6%E8%BF%9B%E8%A1%8C%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/08/20/Python%E8%BF%9E%E6%8E%A5MongoDB%E5%B9%B6%E8%BF%9B%E8%A1%8C%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="comment">#从Excel中读取信息，不使用第一行作为索引</span></span><br><span class="line">data = pd.read_excel(<span class="string">&#x27;前程无忧python职位信息.xlsx&#x27;</span>,header = <span class="literal">None</span>)</span><br><span class="line"><span class="comment">#将第一行作为存入数据库时的索引</span></span><br><span class="line">namespace = data.loc[<span class="number">0</span>].tolist()</span><br></pre></td></tr></table></figure><h2 id="存数据"><a href="#存数据" class="headerlink" title="存数据"></a>存数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_mongodb</span>():</span></span><br><span class="line"><span class="comment">#设置了auth=True时这样连接</span></span><br><span class="line">    client = MongoClient(<span class="string">&quot;mongodb://user:pwd@localhost:27017&quot;</span>)</span><br><span class="line"><span class="comment">#否则这样连接</span></span><br><span class="line"><span class="comment">#client = MongoClient(&quot;localhost&quot;,&quot;27017&quot;)</span></span><br><span class="line"><span class="comment">#选择数据库，不存在则会创建</span></span><br><span class="line">    db = client.job_51</span><br><span class="line"><span class="comment">#选择表单，不存在则会创建</span></span><br><span class="line">    collection = db.data</span><br><span class="line"><span class="comment">#从第二行开始存数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(data)):</span><br><span class="line"><span class="comment">#将信息加载为字典</span></span><br><span class="line">        job_info = <span class="built_in">dict</span>(<span class="built_in">zip</span>(namespace,data.loc[i].tolist()))</span><br><span class="line"><span class="comment">#插入一条信息</span></span><br><span class="line">        collection.insert_one(job_info)</span><br></pre></td></tr></table></figure><h2 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_mongodb</span>():</span></span><br><span class="line"><span class="comment">#同上</span></span><br><span class="line">    client = MongoClient(<span class="string">&quot;mongodb://user:pwd@localhost:27017&quot;</span>)</span><br><span class="line">    db = client.job_51</span><br><span class="line">    collection = db.data</span><br><span class="line"><span class="comment">#从表单中查询符合条件的信息</span></span><br><span class="line"><span class="comment">#如果需要全部信息则将find后面小括号中的内容删掉</span></span><br><span class="line">    res = collection.find(&#123;</span><br><span class="line">    <span class="string">&#x27;学历要求&#x27;</span>: <span class="string">&#x27;本科&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;月薪(元)&#x27;</span>: &#123;<span class="string">&#x27;$gte&#x27;</span>: <span class="number">15000</span>&#125;, </span><br><span class="line">    <span class="string">&#x27;$or&#x27;</span>: [&#123;</span><br><span class="line">            <span class="string">&#x27;经验要求&#x27;</span>: <span class="string">&#x27;1年经验&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;经验要求&#x27;</span>: <span class="string">&#x27;3-4年经验&#x27;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">#使用pandas加载数据</span></span><br><span class="line">    info = pd.DataFrame(<span class="built_in">list</span>(res))</span><br><span class="line"><span class="comment">#删除数据库的“主键”</span></span><br><span class="line">    <span class="keyword">del</span> info[<span class="string">&quot;_id&quot;</span>]</span><br><span class="line"><span class="comment">#筛选所需信息所在的列，如果需要全部列则注释该行</span></span><br><span class="line">    info = info[[<span class="string">&quot;职位&quot;</span>,<span class="string">&quot;地区&quot;</span>,<span class="string">&quot;月薪(元)&quot;</span>,<span class="string">&quot;职位详情&quot;</span>]]</span><br><span class="line"><span class="comment">#将筛选后的信息存入Excel</span></span><br><span class="line">    info.to_excel(<span class="string">&quot;筛选职位.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录第三周的C++作业</title>
      <link href="/2020/08/19/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%89%E5%91%A8%E7%9A%84C++%E4%BD%9C%E4%B8%9A/"/>
      <url>/2020/08/19/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%89%E5%91%A8%E7%9A%84C++%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一、使用命令CPUInfo.exe -c 读取本机CPU的信息，并存储到INI格式的文本中：</span></span><br><span class="line"><span class="string">示例如下：</span></span><br><span class="line"><span class="string">[CPU]</span></span><br><span class="line"><span class="string">Manufacturer=AuthenticAMD</span></span><br><span class="line"><span class="string">BrandID=AMD Athlon Gold 3150U with Radeon Graphics</span></span><br><span class="line"><span class="string">CPUID=0F81</span></span><br><span class="line"><span class="string">Cores=2</span></span><br><span class="line"><span class="string">HyperThread=True</span></span><br><span class="line"><span class="string">MainClock=2396MHZ</span></span><br><span class="line"><span class="string">L1CacheSize=192KB</span></span><br><span class="line"><span class="string">L2CacheSize=1024KB</span></span><br><span class="line"><span class="string">L3CacheSize=4096KB</span></span><br><span class="line"><span class="string">二、使用命令CPUInfo.exe -r 读取INI文本中CPU的信息，并打印到控制台上：</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="包含的头文件"><a href="#包含的头文件" class="headerlink" title="包含的头文件"></a>包含的头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;codecvt&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="全局变量与函数"><a href="#全局变量与函数" class="headerlink" title="全局变量与函数"></a>全局变量与函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getcmd_info</span><span class="params">(FILE* fp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean_temp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_temp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_ini</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_ini</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">file_exists</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write_info</span><span class="params">(<span class="keyword">const</span> std::string&amp; file_string, <span class="keyword">const</span> std::string str)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cpu_info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">string value;</span><br><span class="line">&#125;;</span><br><span class="line">cpu_info name[<span class="number">9</span>];</span><br><span class="line">cpu_info result[<span class="number">9</span>];</span><br></pre></td></tr></table></figure><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> nArgc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断参数个数与内容</span></span><br><span class="line"><span class="keyword">if</span> (nArgc == <span class="number">2</span> &amp;&amp; !_stricmp(argv[<span class="number">1</span>], <span class="string">&quot;-c&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//首先重置缓存文件</span></span><br><span class="line"><span class="built_in">clean_temp</span>();</span><br><span class="line"><span class="comment">//从缓存文件中读取信息并存入结构体变量</span></span><br><span class="line"><span class="built_in">get_temp</span>();</span><br><span class="line"><span class="comment">//清洗所需信息，并按格式保存进ini文件</span></span><br><span class="line"><span class="built_in">write_ini</span>();</span><br><span class="line"><span class="comment">//删除缓存文件</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;DEL temp.txt&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;OK!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nArgc == <span class="number">2</span> &amp;&amp; !_stricmp(argv[<span class="number">1</span>], <span class="string">&quot;-r&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断ini文件是否已经存在，如果不存在则进行生成</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">file_exists</span>(<span class="string">&quot;result.ini&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Configuration File Does Not Exist And is Being Written...\n&quot;</span>);</span><br><span class="line"><span class="built_in">clean_temp</span>();</span><br><span class="line"><span class="built_in">get_temp</span>();</span><br><span class="line"><span class="built_in">write_ini</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;DEL temp.txt&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;OK! Please Try Again!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果存在则进行读取</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read_ini</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有额外参数时则什么都不做</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nArgc == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Parameter Error!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="几个函数"><a href="#几个函数" class="headerlink" title="几个函数"></a>几个函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断文件是否存在，不存在则返回0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">file_exists</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//文件不存在时调用_access函数返回的值是1</span></span><br><span class="line"><span class="keyword">return</span> (_access(filename, <span class="number">0</span>) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取cmd命令行中的输出信息，并写入缓存文件里</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getcmd_info</span><span class="params">(FILE* fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//以写状态打开文件</span></span><br><span class="line">FILE* fp2 = <span class="built_in">fopen</span>(<span class="string">&quot;temp.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!fp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每次写一行</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(buf)), <span class="built_in">fgets</span>(buf, <span class="built_in"><span class="keyword">sizeof</span></span>(buf) - <span class="number">1</span>, fp) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp2, <span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(fp2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将字符串类型变量写入指定文件</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write_info</span><span class="params">(<span class="keyword">const</span> std::string&amp; file_string, <span class="keyword">const</span> std::string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::ofstream<span class="title">OsWrite</span><span class="params">(file_string, std::ofstream::app)</span></span>;</span><br><span class="line">OsWrite &lt;&lt; str;</span><br><span class="line">OsWrite &lt;&lt; std::endl;</span><br><span class="line">OsWrite.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从temp中读取信息，按规则进行清洗，并转为string字符串，再将信息存入结构体变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_temp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">256</span>];</span><br><span class="line">FILE* fp2 = <span class="built_in">fopen</span>(<span class="string">&quot;temp.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (j &lt;= <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fgets</span>(str, <span class="number">100</span>, fp2);</span><br><span class="line"><span class="keyword">if</span> (str[<span class="built_in">strlen</span>(str) - <span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">str[<span class="built_in">strlen</span>(str) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in"><span class="keyword">case</span></span>(<span class="number">1</span>):</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">strlen</span>(str);</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; n - <span class="number">1</span>; m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (str[m] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">s += str[m];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">name[j].value = s;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in"><span class="keyword">case</span></span>(<span class="number">2</span>):</span><br><span class="line">&#123;</span><br><span class="line">n = <span class="built_in">strlen</span>(str);</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; n - <span class="number">1</span>; m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (str[m] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">s += str[m];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str[m + <span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">s += str[m];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">result[j].value = s;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in"><span class="keyword">case</span></span>(<span class="number">3</span>):</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(fp2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化缓存文件中的信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean_temp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;temp.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="built_in">fclose</span>(fp);</span><br><span class="line"><span class="keyword">char</span> result_info[<span class="number">256</span>];</span><br><span class="line"><span class="comment">//要读取的内容</span></span><br><span class="line"><span class="keyword">char</span> cmd[<span class="number">9</span>][<span class="number">256</span>] = &#123; <span class="string">&quot;Manufacturer&quot;</span>,<span class="string">&quot;Name&quot;</span>,<span class="string">&quot;ProcessorId&quot;</span>,<span class="string">&quot;NumberOfCores&quot;</span>,</span><br><span class="line"><span class="string">&quot;NumberOfLogicalProcessors&quot;</span>,<span class="string">&quot;CurrentClockSpeed&quot;</span>,<span class="string">&quot;DataWidth&quot;</span>,</span><br><span class="line"><span class="string">&quot;L2CacheSize&quot;</span>,<span class="string">&quot;L3CacheSize&quot;</span> &#125;;</span><br><span class="line">FILE* fp1 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将预处理命令行信息写入字符数组</span></span><br><span class="line"><span class="built_in">sprintf_s</span>(result_info, <span class="string">&quot;wmic CPU get %s&quot;</span>, cmd[i]);</span><br><span class="line">fp1 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//调用_popen函数抓取输出信息</span></span><br><span class="line">fp1 = _popen(result_info, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!fp1) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;popen&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将信息写入缓存文件</span></span><br><span class="line"><span class="built_in">getcmd_info</span>(fp1);</span><br><span class="line">_pclose(fp1);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将清洗完毕的数据按所需规则存入ini文件，并添加单位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_ini</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cores = <span class="number">0</span>;</span><br><span class="line">FILE* fp3 = <span class="built_in">fopen</span>(<span class="string">&quot;result.ini&quot;</span>, <span class="string">&quot;wt&quot;</span>);</span><br><span class="line"><span class="built_in">fclose</span>(fp3);</span><br><span class="line"><span class="built_in">write_info</span>(<span class="string">&quot;result.ini&quot;</span>, <span class="built_in">string</span>(<span class="string">&quot;[CPU]&quot;</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">if</span> (name[i].value == <span class="string">&quot;CurrentClockSpeed&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">s = name[i].value + <span class="string">&quot; = &quot;</span> + result[i].value + <span class="string">&quot;MHZ&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (name[i].value == <span class="string">&quot;L2CacheSize&quot;</span> | name[i].value == <span class="string">&quot;L3CacheSize&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">s = name[i].value + <span class="string">&quot; = &quot;</span> + result[i].value + <span class="string">&quot;KB&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (name[i].value == <span class="string">&quot;NumberOfCores&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">string res = result[i].value;</span><br><span class="line">stringstream ss;</span><br><span class="line">stringstream sp;</span><br><span class="line">ss &lt;&lt; res;</span><br><span class="line">ss &gt;&gt; cores;</span><br><span class="line">s = name[i].value + <span class="string">&quot; = &quot;</span> + result[i].value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (name[i].value == <span class="string">&quot;DataWidth&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//这里是字符串与数值的互转</span></span><br><span class="line"><span class="keyword">int</span> z;</span><br><span class="line">name[i].value = <span class="string">&quot;L1CacheSize&quot;</span>;</span><br><span class="line">string res = result[i].value;</span><br><span class="line">stringstream ss;</span><br><span class="line">stringstream sp;</span><br><span class="line">ss &lt;&lt; res;</span><br><span class="line">ss &gt;&gt; z;</span><br><span class="line">z *= cores;</span><br><span class="line">sp &lt;&lt; z;</span><br><span class="line">sp &gt;&gt; res;</span><br><span class="line">result[i].value = res;</span><br><span class="line">s = name[i].value + <span class="string">&quot; = &quot;</span> + result[i].value + <span class="string">&quot;KB&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">s = name[i].value + <span class="string">&quot; = &quot;</span> + result[i].value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用写字符串函数，传递的两个参数分别是文件名和预写入信息</span></span><br><span class="line"><span class="built_in">write_info</span>(<span class="string">&quot;result.ini&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环读取ini文件中的每一行信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_ini</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> t[<span class="number">256</span>]; <span class="keyword">int</span> i = <span class="number">1</span>, n;</span><br><span class="line">FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;result.ini&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fgets</span>(t, <span class="number">256</span>, fp);</span><br><span class="line">n = <span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">if</span> (t[n - <span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">t[n - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写的比较繁琐，而且一级缓存并没有正确的读出来，需要更明确的方法。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次探索ID3算法的过程</title>
      <link href="/2020/08/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8E%A2%E7%B4%A2ID3%E7%AE%97%E6%B3%95%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2020/08/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8E%A2%E7%B4%A2ID3%E7%AE%97%E6%B3%95%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#import openpyxl</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算对数的方法，第二个参数代表底，或者直接用log2</span></span><br><span class="line"><span class="comment">#print(math.log(4,2))</span></span><br><span class="line"><span class="comment">#print(math.log(10))#此时代表自然对数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用openpyxl操作工作表</span></span><br><span class="line"><span class="comment">#wb = openpyxl.load_workbook(&#x27;配眼镜.xlsx&#x27;)</span></span><br><span class="line"><span class="comment">#ws_data = wb[&#x27;Sheet1&#x27;]</span></span><br><span class="line"><span class="comment">#删除第一行</span></span><br><span class="line"><span class="comment">#ws_data.delete_rows(1)</span></span><br><span class="line"><span class="comment">#header = None 不指定索引</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;配眼镜.xlsx&#x27;</span>,header = <span class="literal">None</span>)</span><br><span class="line"><span class="comment">#读取指定索引的数据</span></span><br><span class="line"><span class="comment">#print(df.loc[0][0])</span></span><br><span class="line"><span class="comment">#将指定列输出为列表</span></span><br><span class="line"><span class="comment">#print(df[0].values.tolist())</span></span><br><span class="line"><span class="comment">#获取索引</span></span><br><span class="line">namespace = df.loc[<span class="number">0</span>].tolist()</span><br><span class="line"><span class="comment">#删除指定行，如果不指定inplace参数则不会对原工作表进行处理</span></span><br><span class="line">df.drop([<span class="number">0</span>],inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#总的信息条数</span></span><br><span class="line">counts = <span class="built_in">len</span>(df)</span><br><span class="line">rows = <span class="built_in">len</span>(df.loc[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#删除指定列</span></span><br><span class="line"><span class="comment">#dz = df.drop([0],axis = 1)#如果想对原工作表进行操作，指定inplace参数即可</span></span><br><span class="line"><span class="comment">#print(dz)</span></span><br><span class="line"><span class="comment">#对数据存入字典，并为字典配备其他属性</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>():</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">        <span class="keyword">if</span> i != rows - <span class="number">1</span>:</span><br><span class="line">            list_temp = &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>:namespace[i],</span><br><span class="line">                <span class="string">&#x27;values&#x27;</span>:df[i].values.tolist(),</span><br><span class="line">                <span class="string">&#x27;count&#x27;</span>:[],</span><br><span class="line">                <span class="string">&#x27;keys&#x27;</span>:[],</span><br><span class="line">                <span class="string">&#x27;procount&#x27;</span>:[],</span><br><span class="line">                <span class="string">&#x27;lastcount&#x27;</span>:[]</span><br><span class="line">               &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">           list_temp = &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>:namespace[i],</span><br><span class="line">                <span class="string">&#x27;values&#x27;</span>:df[i].values.tolist(),</span><br><span class="line">                <span class="string">&#x27;count&#x27;</span>:[],</span><br><span class="line">                <span class="string">&#x27;keys&#x27;</span>:[],</span><br><span class="line">               &#125; </span><br><span class="line">        data.append(list_temp)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="comment">#获取信息熵</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_info_entropy</span>(<span class="params">data</span>):</span></span><br><span class="line">    data[-<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>].append(data[-<span class="number">1</span>][<span class="string">&#x27;values&#x27;</span>][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> data[-<span class="number">1</span>][<span class="string">&#x27;values&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> data[-<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>]:</span><br><span class="line">            data[-<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>].append(key)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data[-<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>])):</span><br><span class="line">        data[-<span class="number">1</span>][<span class="string">&#x27;count&#x27;</span>].append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> data[-<span class="number">1</span>][<span class="string">&#x27;values&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> key == data[-<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>][j]:</span><br><span class="line">                data[-<span class="number">1</span>][<span class="string">&#x27;count&#x27;</span>][j] += <span class="number">1</span></span><br><span class="line">    result_count = <span class="built_in">len</span>(data[-<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>])</span><br><span class="line">    Information_entropy = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(result_count):</span><br><span class="line">        probality = data[-<span class="number">1</span>][<span class="string">&#x27;count&#x27;</span>][i] / counts</span><br><span class="line">        Information_entropy += probality * math.log2(<span class="number">1</span> / probality)</span><br><span class="line">    <span class="keyword">return</span> result_count,Information_entropy</span><br><span class="line"><span class="comment">#统计条件熵所有信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cond_info</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows - <span class="number">1</span>):</span><br><span class="line">        data[i][<span class="string">&#x27;keys&#x27;</span>].append(data[i][<span class="string">&#x27;values&#x27;</span>][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> data[i][<span class="string">&#x27;values&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> data[i][<span class="string">&#x27;keys&#x27;</span>]:</span><br><span class="line">                data[i][<span class="string">&#x27;keys&#x27;</span>].append(key)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data[i][<span class="string">&#x27;keys&#x27;</span>])):</span><br><span class="line">            data[i][<span class="string">&#x27;count&#x27;</span>].append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> data[i][<span class="string">&#x27;values&#x27;</span>]:</span><br><span class="line">                <span class="keyword">if</span> key == data[i][<span class="string">&#x27;keys&#x27;</span>][j]:</span><br><span class="line">                    data[i][<span class="string">&#x27;count&#x27;</span>][j] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data[i][<span class="string">&#x27;keys&#x27;</span>]:</span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(result_count):</span><br><span class="line">                temp.append(<span class="number">0</span>)</span><br><span class="line">                key = data[-<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>][z]</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">                    <span class="keyword">if</span> key == data[-<span class="number">1</span>][<span class="string">&#x27;values&#x27;</span>][j] <span class="keyword">and</span> item == data[i][<span class="string">&#x27;values&#x27;</span>][j]:</span><br><span class="line">                        temp[z] += <span class="number">1</span></span><br><span class="line">            data[i][<span class="string">&#x27;procount&#x27;</span>].append(temp)</span><br><span class="line"><span class="comment">#计算条件熵</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cond_entropy</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows - <span class="number">1</span>):</span><br><span class="line">        Conditional_entropy_temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data[i][<span class="string">&#x27;procount&#x27;</span>])):</span><br><span class="line">            probality_1 = data[i][<span class="string">&#x27;count&#x27;</span>][j] / counts</span><br><span class="line">            <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(result_count):</span><br><span class="line">                probality_2 = data[i][<span class="string">&#x27;procount&#x27;</span>][j][z] / data[i][<span class="string">&#x27;count&#x27;</span>][j]</span><br><span class="line">                <span class="keyword">if</span> probality_2 != <span class="number">0</span>:</span><br><span class="line">                    Conditional_entropy_temp += probality_1 * probality_2 * math.log(<span class="number">1</span> / probality_2,<span class="number">10</span>)</span><br><span class="line">        Conditional_entropy.append(Conditional_entropy_temp)</span><br><span class="line"><span class="comment">#计算互信息，并对索引排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mutu_info</span>(<span class="params">cond_info</span>):</span></span><br><span class="line">    Mutual_information = []</span><br><span class="line">    list_index = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> cond_info:</span><br><span class="line">        Mutual_information.append(Information_entropy - item)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows - <span class="number">1</span>):</span><br><span class="line">        list_index.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,rows - <span class="number">1</span> - i):</span><br><span class="line">            <span class="keyword">if</span> Mutual_information[j] &gt; Mutual_information[j - <span class="number">1</span>]:</span><br><span class="line">                list_index[j],list_index[j - <span class="number">1</span>] = list_index[j - <span class="number">1</span>],list_index[j] </span><br><span class="line">                <span class="comment">#Mutual_information[j],Mutual_information[j - 1] = Mutual_information[j - 1],Mutual_information[j]</span></span><br><span class="line">    <span class="keyword">return</span> list_index,Mutual_information</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = get_data()</span><br><span class="line">    result_count,Information_entropy = get_info_entropy(data)</span><br><span class="line">    get_cond_info(data)</span><br><span class="line">    Conditional_entropy = []</span><br><span class="line">    get_cond_entropy(data)</span><br><span class="line">    list_index,Mutual_information = get_mutu_info(Conditional_entropy)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;print(&#x27;信息熵:&#x27; + str(Information_entropy))</span></span><br><span class="line"><span class="string">    print(&#x27;条件熵:&#x27; + &#x27;\n&#x27; + str(Conditional_entropy))</span></span><br><span class="line"><span class="string">    print(&#x27;信息增益:&#x27; + &#x27;\n&#x27; + str(Mutual_information))</span></span><br><span class="line"><span class="string">    print(&#x27;位次索引:&#x27; + &#x27;\n&#x27; + str(list_index))&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#统计决策树的子节点</span></span><br><span class="line">    <span class="keyword">for</span> key1 <span class="keyword">in</span> data[<span class="number">3</span>][<span class="string">&#x27;keys&#x27;</span>]:</span><br><span class="line">        <span class="keyword">for</span> key2 <span class="keyword">in</span> data[<span class="number">2</span>][<span class="string">&#x27;keys&#x27;</span>]:</span><br><span class="line">            c = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(result_count):</span><br><span class="line">                key3 = data[-<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>][i]</span><br><span class="line">                c.append(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">                    <span class="keyword">if</span> key1 == data[<span class="number">3</span>][<span class="string">&#x27;values&#x27;</span>][j] <span class="keyword">and</span> key2 == data[<span class="number">2</span>][<span class="string">&#x27;values&#x27;</span>][j] <span class="keyword">and</span> key3 == data[-<span class="number">1</span>][<span class="string">&#x27;values&#x27;</span>][j]:</span><br><span class="line">                        c[i] += <span class="number">1</span></span><br><span class="line">            data[<span class="number">2</span>][<span class="string">&#x27;lastcount&#x27;</span>].append(c)</span><br><span class="line">    <span class="keyword">for</span> key1 <span class="keyword">in</span> data[<span class="number">3</span>][<span class="string">&#x27;keys&#x27;</span>]:</span><br><span class="line">        <span class="keyword">for</span> key2 <span class="keyword">in</span> data[<span class="number">2</span>][<span class="string">&#x27;keys&#x27;</span>]:</span><br><span class="line">            <span class="keyword">for</span> key3 <span class="keyword">in</span> data[<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>]:</span><br><span class="line">                c = []</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(result_count):</span><br><span class="line">                    key4 = data[-<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>][i]</span><br><span class="line">                    c.append(<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">                        <span class="keyword">if</span> key3 == data[<span class="number">1</span>][<span class="string">&#x27;values&#x27;</span>][j] <span class="keyword">and</span> key1 == data[<span class="number">3</span>][<span class="string">&#x27;values&#x27;</span>][j] <span class="keyword">and</span> key2 == data[<span class="number">2</span>][<span class="string">&#x27;values&#x27;</span>][j] <span class="keyword">and</span> key4 == data[-<span class="number">1</span>][<span class="string">&#x27;values&#x27;</span>][j]:</span><br><span class="line">                            c[i] += <span class="number">1</span></span><br><span class="line">                data[<span class="number">1</span>][<span class="string">&#x27;lastcount&#x27;</span>].append(c)</span><br><span class="line">    <span class="keyword">for</span> key1 <span class="keyword">in</span> data[<span class="number">3</span>][<span class="string">&#x27;keys&#x27;</span>]:</span><br><span class="line">        <span class="keyword">for</span> key2 <span class="keyword">in</span> data[<span class="number">2</span>][<span class="string">&#x27;keys&#x27;</span>]:</span><br><span class="line">            <span class="keyword">for</span> key3 <span class="keyword">in</span> data[<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>]:</span><br><span class="line">                <span class="keyword">for</span> key4 <span class="keyword">in</span> data[<span class="number">0</span>][<span class="string">&#x27;keys&#x27;</span>]:</span><br><span class="line">                    c = []</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(result_count):</span><br><span class="line">                        key5 = data[-<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>][i]</span><br><span class="line">                        c.append(<span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">                            <span class="keyword">if</span> key4 == data[<span class="number">0</span>][<span class="string">&#x27;values&#x27;</span>][j] <span class="keyword">and</span> key3 == data[<span class="number">1</span>][<span class="string">&#x27;values&#x27;</span>][j] <span class="keyword">and</span> key1 == data[<span class="number">3</span>][<span class="string">&#x27;values&#x27;</span>][j] <span class="keyword">and</span> key2 == data[<span class="number">2</span>][<span class="string">&#x27;values&#x27;</span>][j] <span class="keyword">and</span> key5 == data[-<span class="number">1</span>][<span class="string">&#x27;values&#x27;</span>][j]:</span><br><span class="line">                                c[i] += <span class="number">1</span></span><br><span class="line">                    data[<span class="number">0</span>][<span class="string">&#x27;lastcount&#x27;</span>].append(c)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_index:</span><br><span class="line">        <span class="keyword">if</span> i == list_index[<span class="number">0</span>]:</span><br><span class="line">            <span class="built_in">print</span>(data[i][<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(data[i][<span class="string">&#x27;keys&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(data[-<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(data[i][<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(data[i][<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(data[i][<span class="string">&#x27;keys&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(data[-<span class="number">1</span>][<span class="string">&#x27;keys&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(data[i][<span class="string">&#x27;lastcount&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取前程无忧职位信息并数据可视化</title>
      <link href="/2020/08/14/%E7%88%AC%E5%8F%96%E5%89%8D%E7%A8%8B%E6%97%A0%E5%BF%A7%E8%81%8C%E4%BD%8D%E4%BF%A1%E6%81%AF%E5%B9%B6%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2020/08/14/%E7%88%AC%E5%8F%96%E5%89%8D%E7%A8%8B%E6%97%A0%E5%BF%A7%E8%81%8C%E4%BD%8D%E4%BF%A1%E6%81%AF%E5%B9%B6%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近在学习爬虫和数据分析，在CSDN看到<a href="https://me.csdn.net/qq_36759224" title="TRHX • 鲍勃">TRHX • 鲍勃</a>的文章，受益匪浅，但是在爬取数据的时候，发现前程无忧使用了动态加载js，使用requests无法爬取部分数据，而且调用lxml解析网页变得比以前更难了，这里使用的反反爬就是selenium和re正则暴力匹配…bs4可能仅仅用于解决Unicode字符编码问题。</p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于请求网页数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#正则表达式、json字典</span></span><br><span class="line"><span class="keyword">import</span> re,json</span><br><span class="line"><span class="comment">#爬取过程中用于暂停</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#用于操作Excel</span></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="comment">#模拟真实用户获取职位信息总页数</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="comment">#使用bs4解析网页</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br></pre></td></tr></table></figure><p>#初始化变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#预调用selenium</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#大致的url框架</span></span><br><span class="line">url = <span class="string">&#x27;https://search.51job.com/list/000000,000000,0000,00,9,99,%s,2,%s.html&#x27;</span></span><br><span class="line"><span class="comment">#请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.13 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#要爬取的职位关键词</span></span><br><span class="line">keyword = <span class="built_in">input</span>(<span class="string">&#x27;请输入您想要抓取的职位信息关键词：&#x27;</span>)</span><br><span class="line"><span class="comment">#创建工作表</span></span><br><span class="line">wb = openpyxl.Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">ws.title = <span class="string">&quot;前程无忧%s工作信息&quot;</span> % keyword</span><br></pre></td></tr></table></figure><h2 id="抓取页数"><a href="#抓取页数" class="headerlink" title="抓取页数"></a>抓取页数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">因为总页数调用了js文件</span></span><br><span class="line"><span class="string">用requests的话返回的数据里找不到</span></span><br><span class="line"><span class="string">所以使用selenium获取职位信息总页数</span></span><br><span class="line"><span class="string">嫌麻烦的话可以直接去前程无忧网站搜索一下关键词...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>():</span></span><br><span class="line">    <span class="comment">#访问第一页即可</span></span><br><span class="line">    URL = url % (keyword,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    <span class="comment">#selenium无可视化</span></span><br><span class="line">    browser = webdriver.Chrome(executable_path = <span class="string">&#x27;chromedriver.exe&#x27;</span>,options = chrome_options)</span><br><span class="line">    <span class="comment">#访问网页</span></span><br><span class="line">    browser.get(URL)</span><br><span class="line">    <span class="comment">#保存网页数据</span></span><br><span class="line">    page_text = browser.page_source</span><br><span class="line">    <span class="comment">#正则匹配，括号内是要返回的信息</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&quot;total_page&quot;:&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line">    <span class="comment">#匹配所有信息，并获取列表头，实际上也就只有一条</span></span><br><span class="line">    number = re.findall(pattern,page_text)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> number</span><br></pre></td></tr></table></figure><h2 id="清洗工资数据"><a href="#清洗工资数据" class="headerlink" title="清洗工资数据"></a>清洗工资数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#清洗工资数据，这里借用了大佬的方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wish_data</span>(<span class="params">wages_old</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;元/天&#x27;</span> <span class="keyword">in</span> wages_old:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;-&#x27;</span> <span class="keyword">in</span> wages_old.split(<span class="string">&#x27;元&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]:</span><br><span class="line">            wages1 = wages_old.split(<span class="string">&#x27;元&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            wages2 = wages_old.split(<span class="string">&#x27;元&#x27;</span>).split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            wages_new = (<span class="built_in">float</span>(wages2) + <span class="built_in">float</span>(wages1)) / <span class="number">2</span> * <span class="number">30</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            wages_new = <span class="built_in">float</span>(wages_old.split(<span class="string">&#x27;元&#x27;</span>)[<span class="number">0</span>]) * <span class="number">30</span></span><br><span class="line">        <span class="keyword">return</span> wages_new</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;千/月&#x27;</span> <span class="keyword">in</span> wages_old <span class="keyword">or</span> <span class="string">&#x27;千以下/月&#x27;</span> <span class="keyword">in</span> wages_old <span class="keyword">or</span> <span class="string">&#x27;千以上/月&#x27;</span> <span class="keyword">in</span> wages_old:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;-&#x27;</span> <span class="keyword">in</span> wages_old.split(<span class="string">&#x27;千&#x27;</span>)[<span class="number">0</span>]:</span><br><span class="line">            wages1 = wages_old.split(<span class="string">&#x27;千&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            wages2 = wages_old.split(<span class="string">&#x27;千&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            wages_new = (<span class="built_in">float</span>(wages2) + <span class="built_in">float</span>(wages1)) / <span class="number">2</span> * <span class="number">1000</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            wages_new = <span class="built_in">float</span>(wages_old.split(<span class="string">&#x27;千&#x27;</span>)[<span class="number">0</span>]) * <span class="number">1000</span></span><br><span class="line">        <span class="keyword">return</span> wages_new</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;万/月&#x27;</span> <span class="keyword">in</span> wages_old <span class="keyword">or</span> <span class="string">&#x27;万以下/月&#x27;</span> <span class="keyword">in</span> wages_old <span class="keyword">or</span> <span class="string">&#x27;万以上/月&#x27;</span> <span class="keyword">in</span> wages_old:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;-&#x27;</span> <span class="keyword">in</span> wages_old.split(<span class="string">&#x27;万&#x27;</span>)[<span class="number">0</span>]:</span><br><span class="line">            wages1 = wages_old.split(<span class="string">&#x27;万&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            wages2 = wages_old.split(<span class="string">&#x27;万&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            wages_new = (<span class="built_in">float</span>(wages2) + <span class="built_in">float</span>(wages1)) / <span class="number">2</span> * <span class="number">10000</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            wages_new = <span class="built_in">float</span>(wages_old.split(<span class="string">&#x27;万&#x27;</span>)[<span class="number">0</span>]) * <span class="number">10000</span></span><br><span class="line">        <span class="keyword">return</span> wages_new</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;万/年&#x27;</span> <span class="keyword">in</span> wages_old <span class="keyword">or</span> <span class="string">&#x27;万以下/年&#x27;</span> <span class="keyword">in</span> wages_old <span class="keyword">or</span> <span class="string">&#x27;万以上/年&#x27;</span> <span class="keyword">in</span> wages_old:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;-&#x27;</span> <span class="keyword">in</span> wages_old.split(<span class="string">&#x27;万&#x27;</span>)[<span class="number">0</span>]:</span><br><span class="line">            wages1 = wages_old.split(<span class="string">&#x27;万&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            wages2 = wages_old.split(<span class="string">&#x27;万&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            wages_new = (<span class="built_in">float</span>(wages2) + <span class="built_in">float</span>(wages1)) / <span class="number">2</span> * <span class="number">10000</span> / <span class="number">12</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            wages_new = <span class="built_in">float</span>(wages_old.split(<span class="string">&#x27;千&#x27;</span>)[<span class="number">0</span>]) * <span class="number">10000</span> / <span class="number">12</span></span><br><span class="line">    <span class="comment">#小数部分四舍五入并返回清洗后的数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(wages_new)</span><br></pre></td></tr></table></figure><h2 id="循环爬取信息"><a href="#循环爬取信息" class="headerlink" title="循环爬取信息"></a>循环爬取信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取每一页中的职位信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dict</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="comment">#使用requests访问网页</span></span><br><span class="line">    response = requests.get(url = url % (keyword,<span class="built_in">str</span>(i)),headers = headers)</span><br><span class="line">    <span class="comment">#设定数据的格式</span></span><br><span class="line">    response.encoding = response.apparent_encoding</span><br><span class="line">    <span class="comment">#保存网页数据</span></span><br><span class="line">    html = response.text</span><br><span class="line">    <span class="comment">#其实这里使用bs4仅仅是解决Unicode编码问题</span></span><br><span class="line">    bf = bs(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment">#第一次正则匹配，匹配所有的职位信息</span></span><br><span class="line">    pattern_string = re.<span class="built_in">compile</span>(<span class="string">&#x27;window.__SEARCH_RESULT__\s=\s(.*?),&quot;jobid_count&quot;&#x27;</span>)</span><br><span class="line">    data = re.findall(pattern_string,<span class="built_in">str</span>(bf))</span><br><span class="line">    <span class="comment">#删除信息中所有的转义字符</span></span><br><span class="line">    data = data[<span class="number">0</span>].replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment">#第二次正则匹配，逐条划分职位信息</span></span><br><span class="line">    pattern_getlist = re.<span class="built_in">compile</span>(<span class="string">&#x27;&#123;&quot;type&quot;.*?&#125;&#x27;</span>)</span><br><span class="line">    <span class="comment">#注意此时获取的是一个列表而不是字典</span></span><br><span class="line">    dict1 = re.findall(pattern_getlist,data)</span><br><span class="line">    <span class="keyword">return</span> dict1</span><br></pre></td></tr></table></figure><h2 id="保存信息"><a href="#保存信息" class="headerlink" title="保存信息"></a>保存信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将职位信息逐条添加到工作表中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">data_dict</span>):</span></span><br><span class="line">    <span class="comment">#获取列表长度，其实可以直接用for i in range(len(data_dict))</span></span><br><span class="line">    length = <span class="built_in">len</span>(data_dict)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="comment">#将信息加载为字典</span></span><br><span class="line">        dict2 = json.loads(data_dict[i])</span><br><span class="line">        <span class="comment">#捕捉一些保存在字典中列表的数据</span></span><br><span class="line">        content = dict2[<span class="string">&#x27;attribute_text&#x27;</span>]</span><br><span class="line">        <span class="comment">#学历要求</span></span><br><span class="line">        education = <span class="string">&#x27;&#x27;</span>.join([i <span class="keyword">for</span> i <span class="keyword">in</span> content <span class="keyword">if</span> i <span class="keyword">in</span> <span class="string">&#x27;本科大专应届生在校生硕士&#x27;</span>])</span><br><span class="line">        <span class="comment">#招聘人数</span></span><br><span class="line">        need_people = <span class="string">&#x27;&#x27;</span>.join([i <span class="keyword">for</span> i <span class="keyword">in</span> content <span class="keyword">if</span> <span class="string">&#x27;招&#x27;</span> <span class="keyword">in</span> i])</span><br><span class="line">        <span class="comment">#英语要求，似乎都没有写明...也可能写的是四六级叭</span></span><br><span class="line">        english = <span class="string">&#x27;&#x27;</span>.join([i <span class="keyword">for</span> i <span class="keyword">in</span> content <span class="keyword">if</span> <span class="string">&#x27;英语&#x27;</span> <span class="keyword">in</span> i])</span><br><span class="line">        <span class="comment">#如果经历要求为空的话则设置为不详</span></span><br><span class="line">        <span class="keyword">if</span> dict2[<span class="string">&#x27;workyear&#x27;</span>] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            dict2[<span class="string">&#x27;workyear&#x27;</span>] = <span class="string">&#x27;不详&#x27;</span></span><br><span class="line">        <span class="comment">#否则为其加个‘年’字</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dict2[<span class="string">&#x27;workyear&#x27;</span>] += <span class="string">&#x27;年&#x27;</span></span><br><span class="line">        <span class="comment">#如果公司福利为空的话则设置为不详</span></span><br><span class="line">        <span class="keyword">if</span> dict2[<span class="string">&#x27;jobwelf&#x27;</span>] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            dict2[<span class="string">&#x27;jobwelf&#x27;</span>] = <span class="string">&#x27;不详&#x27;</span></span><br><span class="line">        <span class="comment">#如果工资没有写明的话设置为面议</span></span><br><span class="line">        <span class="keyword">if</span> dict2[<span class="string">&#x27;providesalary_text&#x27;</span>] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            dict2[<span class="string">&#x27;providesalary_text&#x27;</span>] = <span class="string">&#x27;面议&#x27;</span></span><br><span class="line">        <span class="comment">#如果写明的话则调用函数对数据进行清洗</span></span><br><span class="line">        <span class="comment">#不想清洗的话将else语句注释掉即可，我这里是为了绘图方便</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dict2[<span class="string">&#x27;providesalary_text&#x27;</span>] = wish_data(dict2[<span class="string">&#x27;providesalary_text&#x27;</span>])</span><br><span class="line">        <span class="comment">#以下两项同理，没有匹配到也设置为不详</span></span><br><span class="line">        <span class="keyword">if</span> education == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            education += <span class="string">&#x27;不详&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> english == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            english += <span class="string">&#x27;不详&#x27;</span></span><br><span class="line">        <span class="comment">#为工作表添加一行数据</span></span><br><span class="line">        ws.append([</span><br><span class="line">            dict2[<span class="string">&#x27;job_title&#x27;</span>],</span><br><span class="line">            dict2[<span class="string">&#x27;workarea_text&#x27;</span>],</span><br><span class="line">            dict2[<span class="string">&#x27;providesalary_text&#x27;</span>],</span><br><span class="line">            education,</span><br><span class="line">            dict2[<span class="string">&#x27;workyear&#x27;</span>],</span><br><span class="line">            need_people,</span><br><span class="line">            <span class="comment">#这里只取发布的日期，空格作为分隔符</span></span><br><span class="line">            dict2[<span class="string">&#x27;issuedate&#x27;</span>].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">            english,</span><br><span class="line">            dict2[<span class="string">&#x27;job_href&#x27;</span>],</span><br><span class="line">            dict2[<span class="string">&#x27;company_name&#x27;</span>],</span><br><span class="line">            dict2[<span class="string">&#x27;companyind_text&#x27;</span>],</span><br><span class="line">            dict2[<span class="string">&#x27;companysize_text&#x27;</span>],</span><br><span class="line">            dict2[<span class="string">&#x27;jobwelf&#x27;</span>],</span><br><span class="line">            dict2[<span class="string">&#x27;company_href&#x27;</span>]</span><br><span class="line">            ])</span><br></pre></td></tr></table></figure><h2 id="控制函数"><a href="#控制函数" class="headerlink" title="控制函数"></a>控制函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="comment">#工作表的第一行，设置各列标题</span></span><br><span class="line">    ws.append([<span class="string">&#x27;职位&#x27;</span>,<span class="string">&#x27;地区&#x27;</span>,<span class="string">&#x27;月薪(元)&#x27;</span>,<span class="string">&#x27;学历要求&#x27;</span>,<span class="string">&#x27;经验要求&#x27;</span>,<span class="string">&#x27;招聘人数&#x27;</span>,<span class="string">&#x27;发布时间&#x27;</span>,<span class="string">&#x27;英语要求&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;职位详情&#x27;</span>,<span class="string">&#x27;公司信息&#x27;</span>,<span class="string">&#x27;公司行业&#x27;</span>,<span class="string">&#x27;公司规模&#x27;</span>,<span class="string">&#x27;福利待遇&#x27;</span>,<span class="string">&#x27;公司详情&#x27;</span>])</span><br><span class="line">    <span class="comment">#调整工作表的列宽</span></span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>]:</span><br><span class="line">        ws.column_dimensions[column].width = <span class="number">22.0</span></span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> [<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">        ws.column_dimensions[column].width = <span class="number">13.0</span></span><br><span class="line">    <span class="comment">#获取页数并转化为整数型变量</span></span><br><span class="line">    n = <span class="built_in">int</span>(get_page())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s职位共有%s页&quot;</span> % (keyword,<span class="built_in">str</span>(n)))</span><br><span class="line">    <span class="comment">#按需爬取</span></span><br><span class="line">    need_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您想要抓取的页数：&#x27;</span>))</span><br><span class="line">    <span class="comment">#用于大量网页出现异常时结束循环</span></span><br><span class="line">    error_page = <span class="number">0</span></span><br><span class="line">    <span class="comment">#统计爬取出错的页数</span></span><br><span class="line">    error_list = []</span><br><span class="line">    <span class="comment">#开始循环爬取每一页，将n修改为具体数值以限定要爬取的总页数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,need_page + <span class="number">1</span>):</span><br><span class="line">        <span class="comment">#捕捉异常，如有异常则爬取下一页</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data_dict = get_dict(i)</span><br><span class="line">            save_data(data_dict)</span><br><span class="line">            <span class="comment">#提示抓取成功</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第%s页数据抓取完成！&quot;</span> % <span class="built_in">str</span>(i))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment">#遇到异常时将错误页数增加1</span></span><br><span class="line">            error_page += <span class="number">1</span></span><br><span class="line">            <span class="comment">#将错误页添加到统计列表</span></span><br><span class="line">            error_list.append(i)</span><br><span class="line">            <span class="comment">#提示错误</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第%s页：error&quot;</span> % <span class="built_in">str</span>(i))</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="comment">#当总的错误页数大于20时，退出循环，可以自行设定退出条件</span></span><br><span class="line">        <span class="keyword">if</span> error_page &gt; <span class="number">20</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;出现了不可控的异常！已经退出循环！&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#将程序休眠3秒，防止爬取速度过快被封IP地址</span></span><br><span class="line">        <span class="comment">#也是因为这个原因，所以没有使用多线程，其实是不会2333</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="comment">#当错误页数不为0的时候，输出统计到的错误页列表</span></span><br><span class="line">    <span class="keyword">if</span> error_page != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;以下页数抓取失败：&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(error_list)</span><br><span class="line">    <span class="comment">#提示程序执行完成</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;所有数据抓取完成！&quot;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将工作表保存，如果中途结束则什么都没有</span></span><br><span class="line"><span class="string">    所以事先想好要爬的页数</span></span><br><span class="line"><span class="string">    或者按需要修改成每爬取一页就保存一次</span></span><br><span class="line"><span class="string">    具体怎么做就不再详述了</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    wb.save(<span class="string">&#x27;前程无忧%s职位信息.xlsx&#x27;</span> % keyword)</span><br></pre></td></tr></table></figure><h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#入口函数    </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p>这里只放一下加载数据的函数，具体如何绘图请参考文末的文章。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>():</span></span><br><span class="line"><span class="comment">#读取工作表的第2、3、4列</span></span><br><span class="line">    filename = <span class="string">&#x27;前程无忧python职位信息.xlsx&#x27;</span></span><br><span class="line">    df = pd.read_excel(filename, usecols= [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment">#删除空值</span></span><br><span class="line">    df = df.drop(df[df[<span class="string">&#x27;月薪(元)&#x27;</span>] == <span class="string">&#x27;面议&#x27;</span>].index)</span><br><span class="line">    df = df.drop(df[df[<span class="string">&#x27;经验要求&#x27;</span>] == <span class="string">&#x27;不详&#x27;</span>].index)</span><br><span class="line">    df = df.drop(df[df[<span class="string">&#x27;学历要求&#x27;</span>] == <span class="string">&#x27;不详&#x27;</span>].index)</span><br><span class="line"><span class="comment">#修改列标题</span></span><br><span class="line">    df.rename(columns=&#123;<span class="string">&#x27;月薪(元)&#x27;</span>:<span class="string">&#x27;工资&#x27;</span>,<span class="string">&#x27;经验要求&#x27;</span>:<span class="string">&#x27;经验&#x27;</span>,<span class="string">&#x27;学历要求&#x27;</span>:<span class="string">&#x27;学历&#x27;</span> &#125;, inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#需要保存的话就把注释取消掉</span></span><br><span class="line"><span class="comment">#df.to_excel(&#x27;绘图数据.xlsx&#x27;)</span></span><br><span class="line"><span class="comment">#将“工资列”的数据定义位整型</span></span><br><span class="line">    df[<span class="string">&#x27;工资&#x27;</span>] = df[<span class="string">&#x27;工资&#x27;</span>].astype(<span class="string">&quot;int&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><h2 id="存在不足"><a href="#存在不足" class="headerlink" title="存在不足"></a>存在不足</h2><p>对”经验需求”的分析有待优化，信息也不是逐页保存的，而是循环结束之后统一保存，遇到突发异常时可能导致没有任何数据。</p><h2 id="请参考以下文章"><a href="#请参考以下文章" class="headerlink" title="请参考以下文章"></a>请参考以下文章</h2><p><a href="https://blog.csdn.net/weixin_36279318/article/details/79475388?utm_medium=distribute.pc_relevant.none-task-blog-utm_term-2&spm=1001.2101.3001.4242" title="Python Selenium库的使用">Python Selenium库的使用</a></p><p><a href="https://blog.csdn.net/qq_36759224/article/details/107315136" title="Python3 爬虫实战 — 前程无忧招聘信息爬取 + 数据可视化">爬虫实战 — 前程无忧招聘信息爬取 + 数据可视化</a></p><p><a href="https://blog.csdn.net/weixin_46163658/article/details/106447424" title="Python正则表达式的语法以及re模块的使用">Python正则表达式的语法以及re模块的使用</a></p><p><a href="https://blog.csdn.net/m0_46683744/article/details/106175524" title="使用Python中openpyxl库来操作Excel">使用Python中openpyxl库来操作Excel</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录第二周的C++作业</title>
      <link href="/2020/08/12/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%BA%8C%E5%91%A8%E7%9A%84C++%E4%BD%9C%E4%B8%9A/"/>
      <url>/2020/08/12/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%BA%8C%E5%91%A8%E7%9A%84C++%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">用Visual Studio 编写一个控制台程序&lt;程序名Members.exe为例&gt;，功能如下：</span><br><span class="line">第一阶段：依次输入姓名，性别，工号，电话，然后即时的显示出来。</span><br><span class="line">第二阶段：把输入信息以下面格式保存在文本中，并且可以增加人员信息并保存：这个阶段程序完成后请存入<span class="number">6</span>名以上同仁信息。</span><br><span class="line">Index <span class="number">1</span></span><br><span class="line">Name: xxx</span><br><span class="line">Sex: Male</span><br><span class="line">ID: W00000</span><br><span class="line">Number: <span class="number">121</span></span><br><span class="line">第三阶段：查询人员信息:</span><br><span class="line">输入<span class="string">&quot;Members.exe -find Index1&quot;</span>，<span class="string">&quot;Members.exe -find xxx&quot;</span>， <span class="string">&quot;Members.exe -find 121&quot;</span>， <span class="string">&quot;Members.exe -find W00000&quot;</span> 均直接显示这个人员的所有信息。</span><br><span class="line">输入<span class="string">&quot;Members.exe -find Male&quot;</span> 即显示出Sex为Male 的所有人信息。</span><br><span class="line">第四阶段：把所有人员信息按照ID的大小排序。并把排序后的结果保存在原文本里。</span><br></pre></td></tr></table></figure><h2 id="头文件和全局变量"><a href="#头文件和全局变量" class="headerlink" title="头文件和全局变量"></a>头文件和全局变量</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;io.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">file_exists</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_from_txt</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write_to_txt</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sort_member</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">member</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">char</span> Name[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> Sex[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">char</span> ID[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> Number[<span class="number">13</span>];</span><br><span class="line">&#125;;</span><br><span class="line">member X[<span class="number">7</span>];</span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> nArgc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个index字符串</span></span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">12</span>] = <span class="string">&quot;index&quot;</span>;</span><br><span class="line"><span class="comment">//用于拼接和保存字符化后的整型变量</span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">12</span>], string[<span class="number">6</span>];</span><br><span class="line"><span class="comment">//用于给成员分配index、接收命令行参数、非命令行下的选择操作</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>; <span class="keyword">char</span> sel[<span class="number">12</span>]; <span class="keyword">int</span> s;</span><br><span class="line"><span class="comment">//判断是否存在成员信息，不存在则进行写入</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">file_exists</span>(<span class="string">&quot;member.txt&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">write_to_txt</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存在的话则从缓存中读取数据</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">get_from_txt</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果不在命令行运行或未配置参数，则提供可选择的操作</span></span><br><span class="line"><span class="keyword">if</span> (nArgc == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是否需要排序？如果是请输入1：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s);</span><br><span class="line"><span class="keyword">if</span> (s == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sort_member</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;已完成排序，是否需要保存信息？如果是请输入1：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s);</span><br><span class="line"><span class="keyword">if</span> (s == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;member.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;index %d\nName:%s\nSex:%s\nID:%s\nNumber:%s\n\n&quot;</span>, X[j].index, X[j].Name, X[j].Sex, X[j].ID, X[j].Number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;信息已经保存，请进行其他操作。\n&quot;</span>);</span><br><span class="line"><span class="built_in">fclose</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是否需要显示所有成员信息？如果是请输入1：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s);</span><br><span class="line"><span class="keyword">if</span> (s == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;index %d\nName:%s\nSex:%s\nID:%s\nNumber:%s\n\n&quot;</span>, X[j].index, X[j].Name, X[j].Sex, X[j].ID, X[j].Number);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未对信息进行排序，请进行其他操作。\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是否需要显示所有成员信息？如果是请输入1：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s);</span><br><span class="line"><span class="keyword">if</span> (s == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;index %d\nName:%s\nSex:%s\nID:%s\nNumber:%s\n\n&quot;</span>, X[j].index, X[j].Name, X[j].Sex, X[j].ID, X[j].Number);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//包含程序名在内参数为3个时进行下一步匹配</span></span><br><span class="line"><span class="keyword">if</span> (nArgc == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//除程序名之外第一个参数为“-find”时进入查询</span></span><br><span class="line"><span class="keyword">if</span> (!_stricmp(argv[<span class="number">1</span>], <span class="string">&quot;-find&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//为sel复制第二个参数的地址</span></span><br><span class="line"><span class="built_in">strcpy</span>(sel, argv[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//每次循环都为str分配字符串flag的地址</span></span><br><span class="line"><span class="built_in">strcpy</span>(str, flag);</span><br><span class="line"><span class="comment">//将成员的index信息转为字符型变量，并存入string</span></span><br><span class="line">_itoa(X[j].index, string, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//将str与string拼接为index1的形式</span></span><br><span class="line"><span class="built_in">strcat_s</span>(str, string);</span><br><span class="line"><span class="comment">//或语句匹配成员的每一项信息</span></span><br><span class="line"><span class="keyword">if</span> (!_stricmp(str, sel) | !_stricmp(X[j].Sex, sel) | !_stricmp(X[j].ID, sel) | !_stricmp(X[j].Name, sel) | !_stricmp(X[j].Number, sel))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;index %d\nName:%s\nSex:%s\nID:%s\nNumber:%s\n\n&quot;</span>, X[j].index, X[j].Name, X[j].Sex, X[j].ID, X[j].Number);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//相关信息已全部列出</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;All The Relevant Information Has Been Listed.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果第一个参数不是“-find”，则提示参数错误</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Parameters Error.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//包含程序名在内如果参数只有两个，且参数与“-find”相符</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nArgc == <span class="number">2</span> &amp;&amp; !_stricmp(argv[<span class="number">1</span>], <span class="string">&quot;-find&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//提示参数不足</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Insufficient Parameters.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//包含程序名在内如果参数只有两个，且参数与“-find”不符</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nArgc == <span class="number">2</span> &amp;&amp; _stricmp(argv[<span class="number">1</span>], <span class="string">&quot;-find&quot;</span>) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//提示参数错误</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Parameters Error.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//包含程序名在内参数大于3时</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nArgc &gt; <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//提示参数过多</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Too Many Parameters.&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="几个函数"><a href="#几个函数" class="headerlink" title="几个函数"></a>几个函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于判断文件是否存在，不存在则返回0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">file_exists</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (_access(filename, <span class="number">0</span>) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当成员信息不存在时，则为结构体写入信息，并创建一个保存信息的文本</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write_to_txt</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请依次输入姓名、性别、工号、电话号码，以空格键分隔：\n&quot;</span>);</span><br><span class="line"><span class="comment">//首先输入第一个成员信息</span></span><br><span class="line">X[<span class="number">0</span>].index = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %s %s %s&quot;</span>, X[<span class="number">0</span>].Name, X[<span class="number">0</span>].Sex, X[<span class="number">0</span>].ID, X[<span class="number">0</span>].Number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;index %d\nName:%s\nSex:%s\nID:%s\nNumber:%s\n\n&quot;</span>, X[<span class="number">0</span>].index, X[<span class="number">0</span>].Name, X[<span class="number">0</span>].Sex, X[<span class="number">0</span>].ID, X[<span class="number">0</span>].Number);</span><br><span class="line"><span class="comment">//初始化X[6]的index值，用于结束后面的while循环</span></span><br><span class="line">X[<span class="number">6</span>].index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//创建文本</span></span><br><span class="line">FILE* fp1 = <span class="built_in">fopen</span>(<span class="string">&quot;member.txt&quot;</span>, <span class="string">&quot;wt&quot;</span>);</span><br><span class="line"><span class="comment">//创建一个副本，方便读取信息</span></span><br><span class="line">FILE* fp2 = <span class="built_in">fopen</span>(<span class="string">&quot;member_temp.txt&quot;</span>, <span class="string">&quot;wt&quot;</span>);</span><br><span class="line"><span class="comment">//写第一个成员信息</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp1, <span class="string">&quot;index %d\nName:%s\nSex:%s\nID:%s\nNumber:%s\n\n&quot;</span>, X[<span class="number">0</span>].index, X[<span class="number">0</span>].Name, X[<span class="number">0</span>].Sex, X[<span class="number">0</span>].ID, X[<span class="number">0</span>].Number);</span><br><span class="line"><span class="comment">//副本中只写入信息而不附加说明</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp2, <span class="string">&quot;%d\n%s\n%s\n%s\n%s\n&quot;</span>, X[<span class="number">0</span>].index, X[<span class="number">0</span>].Name, X[<span class="number">0</span>].Sex, X[<span class="number">0</span>].ID, X[<span class="number">0</span>].Number);</span><br><span class="line"><span class="comment">//一直到第7个成员信息被写入，结束循环</span></span><br><span class="line"><span class="keyword">while</span> (X[<span class="number">6</span>].index == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">X[i].index = i + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请依次输入姓名、性别、工号、电话号码，以空格键分隔：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %s %s %s&quot;</span>, X[i].Name, X[i].Sex, X[i].ID, X[i].Number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;index %d\nName:%s\nSex:%s\nID:%s\nNumber:%s\n\n&quot;</span>, X[i].index, X[i].Name, X[i].Sex, X[i].ID, X[i].Number);</span><br><span class="line"><span class="built_in">fprintf</span>(fp1, <span class="string">&quot;index %d\nName:%s\nSex:%s\nID:%s\nNumber:%s\n\n&quot;</span>, X[i].index, X[i].Name, X[i].Sex, X[i].ID, X[i].Number);</span><br><span class="line"><span class="built_in">fprintf</span>(fp2, <span class="string">&quot;%d\n%s\n%s\n%s\n%s\n&quot;</span>, X[i].index, X[i].Name, X[i].Sex, X[i].ID, X[i].Number);</span><br><span class="line"><span class="comment">//写下一个成员</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭打开的文本</span></span><br><span class="line"><span class="built_in">fclose</span>(fp1);</span><br><span class="line"><span class="built_in">fclose</span>(fp2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果信息存在，则从副本中读取信息并传递给结构体变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_from_txt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//初始化变量j</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//初始化一个字符串变量用于保存副本中的每行信息</span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">13</span>];</span><br><span class="line"><span class="comment">//以读方式打开副本</span></span><br><span class="line">FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;member_temp.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (j &lt;= <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//for循环用于给每个成员分配五行信息</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一次执行读取第一行数据，第二次则读取第二行</span></span><br><span class="line"><span class="built_in">fgets</span>(str, <span class="number">13</span>, fp);</span><br><span class="line"><span class="comment">//如果读取到换行符，说明已经读取整行信息</span></span><br><span class="line"><span class="keyword">if</span> (str[<span class="built_in">strlen</span>(str) - <span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将换行符改为终止符</span></span><br><span class="line">str[<span class="built_in">strlen</span>(str) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="comment">//switch case语句分配信息到正确的位置</span></span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in"><span class="keyword">case</span></span>(<span class="number">1</span>):</span><br><span class="line">&#123;</span><br><span class="line">X[j].index = <span class="built_in">atoi</span>(str);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in"><span class="keyword">case</span></span>(<span class="number">2</span>):</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(X[j].Name, str);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in"><span class="keyword">case</span></span>(<span class="number">3</span>):</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(X[j].Sex, str);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in"><span class="keyword">case</span></span>(<span class="number">4</span>):</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(X[j].ID, str);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in"><span class="keyword">case</span></span>(<span class="number">5</span>):</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(X[j].Number, str);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为下一个成员分配信息</span></span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//while循环结束则关闭副本</span></span><br><span class="line"><span class="built_in">fclose</span>(fp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序，用于按成员ID升序排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sort_member</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//一个用于缓存的结构体变量</span></span><br><span class="line">member temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; <span class="number">7</span> - j; k++)</span><br><span class="line">&#123;</span><br><span class="line">temp = X[k];</span><br><span class="line"><span class="comment">//C++标准库strcmp，用于比较字符串，前大于后返回1，相等返回0，后大于前返回-1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(X[k - <span class="number">1</span>].ID, X[k].ID) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">X[k] = X[k - <span class="number">1</span>];</span><br><span class="line">X[k - <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取B站视频并对音视频混流</title>
      <link href="/2020/08/09/%E7%88%AC%E5%8F%96B%E7%AB%99%E8%A7%86%E9%A2%91%E5%B9%B6%E5%AF%B9%E9%9F%B3%E8%A7%86%E9%A2%91%E6%B7%B7%E6%B5%81/"/>
      <url>/2020/08/09/%E7%88%AC%E5%8F%96B%E7%AB%99%E8%A7%86%E9%A2%91%E5%B9%B6%E5%AF%B9%E9%9F%B3%E8%A7%86%E9%A2%91%E6%B7%B7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>#爬虫本体<br>代码仅供学习交流使用，请不要大量爬取，也不可将之用于商业用途，如需转载视频请征求视频作者同意，所产生的法律纠纷与本人无关。</p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果缺失请在cmd下使用pip install xxx进行安装</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re,os</span><br><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure><h2 id="两个请求头"><a href="#两个请求头" class="headerlink" title="两个请求头"></a>两个请求头</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于抓取搜索结果页的视频入口</span></span><br><span class="line">first_headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#用于配置视频真实地址并下载</span></span><br><span class="line">second_headers = &#123;</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>:<span class="string">&quot;identify&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>:<span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>:<span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>:<span class="string">&quot;cross-site&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Sec-Fetch-Mode&quot;</span>:<span class="string">&quot;cors&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Origin&quot;</span>:<span class="string">&quot;https://www.bilibili.com&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="构建搜索页地址"><a href="#构建搜索页地址" class="headerlink" title="构建搜索页地址"></a>构建搜索页地址</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">keyword = <span class="built_in">input</span>(<span class="string">&#x27;请输入你要爬取的关键词：&#x27;</span>)</span><br><span class="line"><span class="comment">#检查文件夹是否存在，不存在则创建</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(keyword):</span><br><span class="line">    os.mkdir(keyword)</span><br><span class="line"><span class="comment">#切换到目标路径</span></span><br><span class="line">    os.chdir(<span class="string">&#x27;./&#x27;</span> + keyword)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    os.chdir(<span class="string">&#x27;./&#x27;</span> + keyword)</span><br><span class="line">URLS = [<span class="string">&#x27;https://search.bilibili.com/all?keyword=&#123;&#125;&amp;page=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(keyword,i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br></pre></td></tr></table></figure><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line"><span class="comment">#搜索页的循环</span></span><br><span class="line">    <span class="keyword">for</span> URL <span class="keyword">in</span> URLS:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#获取目标页的网页数据</span></span><br><span class="line">            res = requests.get(url = URL,headers = first_headers)</span><br><span class="line">            res.encoding = res.apparent_encoding</span><br><span class="line">            html = res.text</span><br><span class="line"><span class="comment">#正则匹配视频入口和标题</span></span><br><span class="line">            pattern_url = re.<span class="built_in">compile</span>(<span class="string">&#x27;href=&quot;//(www.bilibili.com.*?search)&quot;\stitle&#x27;</span>)</span><br><span class="line">            pattern_title = re.<span class="built_in">compile</span>(<span class="string">&#x27;search&quot;\stitle=&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line">            url_list = re.findall(pattern_url, html)</span><br><span class="line">            title_list = re.findall(pattern_title, html)</span><br><span class="line"><span class="comment">#循环爬取多个视频</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(url_list)):</span><br><span class="line"><span class="comment">#清除标题中的不规则字符</span></span><br><span class="line">                title_list[i] = title_list[i].replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#创建用于保存视频与音频的文件夹</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(title_list[i]):</span><br><span class="line">                    os.mkdir(title_list[i])</span><br><span class="line"><span class="comment">#已经下载过的则pass</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"><span class="comment">#配置完整的视频地址</span></span><br><span class="line">                http_url = <span class="string">&#x27;https://&#x27;</span> + url_list[i]</span><br><span class="line"><span class="comment">#抓取视频地址返回的数据</span></span><br><span class="line">                video_html = requests.get(url = http_url,headers = first_headers).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#匹配视频流Url</span></span><br><span class="line">                    m4s_30080 = re.findall(<span class="string">r&#x27;&#x27;&#x27;&quot;baseUrl&quot;:&quot;(.*?)&quot;&#x27;&#x27;&#x27;</span>,video_html,re.S)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment">#匹配音频流Url</span></span><br><span class="line">                mp3_30216 = re.findall(<span class="string">r&#x27;&#x27;&#x27;&quot;baseUrl&quot;:&quot;(.*?)&quot;&#x27;&#x27;&#x27;</span>,video_html,re.S)[-<span class="number">2</span>]</span><br><span class="line"><span class="comment">#将second_headers请求头配置完整</span></span><br><span class="line">                Referer_key = url_list[i]</span><br><span class="line"><span class="comment">#暂时将Range设置为0-5</span></span><br><span class="line">                Range_Key = <span class="string">&#x27;bytes=0-5&#x27;</span></span><br><span class="line">                second_headers[<span class="string">&#x27;Referer&#x27;</span>] = <span class="string">&#x27;https://&#x27;</span> + Referer_key</span><br><span class="line">                second_headers[<span class="string">&#x27;Range&#x27;</span>] = Range_Key</span><br><span class="line"><span class="comment">#请求视频流地址</span></span><br><span class="line">                video_bytes = requests.get(m4s_30080,headers = second_headers).headers[<span class="string">&#x27;Content-Range&#x27;</span>]</span><br><span class="line"><span class="comment">#请求音频流地址</span></span><br><span class="line">                audio_bytes = requests.get(mp3_30216,headers = second_headers).headers[<span class="string">&#x27;Content-Range&#x27;</span>]</span><br><span class="line"><span class="comment">#匹配完整音视频的真实Range并更新请求头</span></span><br><span class="line">                video_total = re.findall(<span class="string">r&quot;/(.*)?&quot;</span>,video_bytes,re.S)[<span class="number">0</span>]</span><br><span class="line">                audio_total = re.findall(<span class="string">r&quot;/(.*)?&quot;</span>,audio_bytes,re.S)[<span class="number">0</span>]</span><br><span class="line">                second_headers[<span class="string">&#x27;Range&#x27;</span>] = video_total</span><br><span class="line">                stream = <span class="literal">True</span></span><br><span class="line"><span class="comment">#用于判断视频大小并以该字节作为数据流大小</span></span><br><span class="line">                chunk_size = <span class="number">1024</span></span><br><span class="line"><span class="comment">#将匹配到的Range转为int型数据</span></span><br><span class="line">                video_content_size = <span class="built_in">int</span>(video_total)</span><br><span class="line">                audio_content_size = <span class="built_in">int</span>(audio_total)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;开始下载:&#x27;</span> + title_list[i])</span><br><span class="line"><span class="comment">#输出音视频的大小总和</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;文件大小：&quot;</span> + <span class="built_in">str</span>(<span class="built_in">round</span>(<span class="built_in">float</span>((video_content_size + audio_content_size) / chunk_size / <span class="number">1024</span>), <span class="number">4</span>)) + <span class="string">&quot;[MB]&quot;</span>)</span><br><span class="line"><span class="comment">#记录开始时间</span></span><br><span class="line">                start = time.time()</span><br><span class="line"><span class="comment">#请求完整视频地址</span></span><br><span class="line">                m4s_bytes = requests.get(m4s_30080,headers = second_headers,stream = stream)</span><br><span class="line"><span class="comment">#返回值不为416则代表有数据，一般为200</span></span><br><span class="line">                <span class="keyword">if</span> m4s_bytes.status_code != <span class="number">416</span>:</span><br><span class="line"><span class="comment">#下载视频并命名为1.mp4</span></span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(title_list[i] + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;1.mp4&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        <span class="keyword">for</span> data <span class="keyword">in</span> m4s_bytes.iter_content(chunk_size=chunk_size):</span><br><span class="line">                            f.write(data)</span><br><span class="line">                            f.flush()</span><br><span class="line">                        f.close()</span><br><span class="line"><span class="comment">#更新请求头用于下载音频</span></span><br><span class="line">                second_headers[<span class="string">&#x27;Range&#x27;</span>] = audio_total</span><br><span class="line"><span class="comment">#请求完整音频地址</span></span><br><span class="line">                mp3_bytes = requests.get(mp3_30216, headers = second_headers, stream = stream)</span><br><span class="line"><span class="comment">#下载音频并命名为1.mp3</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(title_list[i] + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;1.mp3&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> t:</span><br><span class="line">                    t.write(mp3_bytes.content)</span><br><span class="line">                    t.close()</span><br><span class="line"><span class="comment">#记录结束时间</span></span><br><span class="line">                end = time.time()</span><br><span class="line"><span class="comment">#输出耗时</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;下载完成,总耗时:&#x27;</span> + <span class="built_in">str</span>(end - start) + <span class="string">&#x27;秒\n&#x27;</span>)</span><br><span class="line"><span class="comment">#爬累了歇几秒...</span></span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#如果只爬单个视频作为测试就把break取消注释</span></span><br><span class="line"><span class="comment">#break</span></span><br><span class="line"><span class="comment">#用于捕捉并忽略错误</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#如果爬多页就把break注释掉</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>#音视频混流<br>18年以后B站将视频与音频分割开，无法直接获取完整文件<br>这里介绍两种方法对音频与视频进行混流<br>1、格式工厂，去软件商店或者百度搜索下载即可<br>2、使用的Python强大的音视频处理库moviepy写一个脚本</p><h2 id="用到的包-1"><a href="#用到的包-1" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#仍然使用pip install xxx进行安装，可能也需要安装ffmpeg模块</span></span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> VideoFileClip,AudioFileClip</span><br><span class="line"><span class="keyword">import</span> os,time</span><br></pre></td></tr></table></figure><h2 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#os模块取关键词目录下的所有文件夹</span></span><br><span class="line">paths = os.listdir()[<span class="number">1</span>]</span><br><span class="line"><span class="comment">#切换到关键词目录</span></span><br><span class="line">os.chdir(<span class="string">&#x27;./&#x27;</span> + paths)</span><br></pre></td></tr></table></figure><h2 id="循环处理"><a href="#循环处理" class="headerlink" title="循环处理"></a>循环处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> os.listdir():</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#定义混流后的文件名</span></span><br><span class="line">filename = <span class="string">&#x27;merge_file&#x27;</span></span><br><span class="line"><span class="comment">#文件的保存路径</span></span><br><span class="line">filepath = path + <span class="string">&#x27;/&#x27;</span> + filename</span><br><span class="line"><span class="comment">#检测是否已处理过，如果是则忽略</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(filepath + <span class="string">&#x27;.mp4&#x27;</span>):</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="comment">#预处理的视频文件</span></span><br><span class="line">video_file = path + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;1.mp4&#x27;</span></span><br><span class="line"><span class="comment">#预处理的音频文件</span></span><br><span class="line">audio_file = path + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;1.mp3&#x27;</span></span><br><span class="line"><span class="comment">#加载音视频</span></span><br><span class="line">video = VideoFileClip(video_file)</span><br><span class="line">audio = AudioFileClip(audio_file)</span><br><span class="line"><span class="comment">#将音视频混流</span></span><br><span class="line">new_video = video.set_audio(audio)</span><br><span class="line"><span class="comment">#保存混流后的视频,并禁用缓存</span></span><br><span class="line">new_video.to_videofile(filepath + <span class="string">&#x27;.mp4&#x27;</span>,remove_temp = <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#释放已加载的视频</span></span><br><span class="line">video.close()</span><br><span class="line">new_video.close()</span><br><span class="line"><span class="comment">#看情况是否需要休息几秒...</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="comment">#如果前述未关闭已加载的文件就遇到错误，则重新执行</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">video.close()</span><br><span class="line">new_video.close()</span><br><span class="line"><span class="comment">#如果遇到错误则忽略</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment">#输出遇到错误的视频并继续混流下一个</span></span><br><span class="line"><span class="built_in">print</span>(path + <span class="string">&#x27;\nerror&#x27;</span>)</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑白科技 </tag>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04搭建WordPress</title>
      <link href="/2020/08/09/Ubuntu20.04%E6%90%AD%E5%BB%BAWordPress/"/>
      <url>/2020/08/09/Ubuntu20.04%E6%90%AD%E5%BB%BAWordPress/</url>
      
        <content type="html"><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.资源和包更新</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade -y</span><br><span class="line"><span class="comment">#2.安装apache2</span></span><br><span class="line">sudo apt-get install apache2 -y</span><br><span class="line"><span class="comment">#3.安装mysql</span></span><br><span class="line">sudo apt-get --purge remove mysql-server mysql-common mysql-client</span><br><span class="line">sudo apt-get install mysql-server mysql-common mysql-client</span><br><span class="line"><span class="comment">#安装phpmyadmin，同时会安装php最新版</span></span><br><span class="line">sudo apt-get install phpmyadmin</span><br><span class="line">sudo apt-get install phpmyadmin -y</span><br><span class="line"><span class="comment">## 需要选择phpmyadmin的web服务为apache2</span></span><br><span class="line"><span class="comment">## 确认后为phpmyadmin设置mysql密码，可能需要复杂一些的密码</span></span><br></pre></td></tr></table></figure><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用以下命令查看本机IP地址，本地一般是127.0.0.1,云服务器的话就是你所购买的IP地址</span></span><br><span class="line">ifconfig -a</span><br><span class="line"><span class="comment">#如果提示命令未找到，使用以下命令安装net-tools然后重新执行上述命令</span></span><br><span class="line">sudo apt install net-tools</span><br><span class="line"><span class="comment">#此时在浏览器输入你的IP地址就可以看到Apache的默认页面</span></span><br></pre></td></tr></table></figure><h2 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql restart <span class="comment">#重启mysql服务</span></span><br><span class="line">sudo mysql -u root <span class="comment">#d登录mysql</span></span><br><span class="line">select user,host <span class="keyword">from</span> mysql.user <span class="comment">#查看当前用户</span></span><br><span class="line">DROP USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>; <span class="comment">#删除root用户</span></span><br><span class="line">CREATE USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;密码&#x27;</span>; <span class="comment">#重新创建root用户，密码改成自己的</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> WITH GRANT OPTION;<span class="comment">#给root授权</span></span><br><span class="line">FLUSH PRIVILEGES;<span class="comment">#适用更改</span></span><br><span class="line">exit;<span class="comment">#退出mysql</span></span><br></pre></td></tr></table></figure><h2 id="配置apache2"><a href="#配置apache2" class="headerlink" title="配置apache2"></a>配置apache2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#建立mysql与apache2的连接</span></span><br><span class="line">sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin</span><br><span class="line"><span class="comment">#重启mysql服务</span></span><br><span class="line">sudo service mysql restart</span><br><span class="line"><span class="comment">#重启apache2服务</span></span><br><span class="line">sudo /etc/init.d/apache2 restart</span><br><span class="line"><span class="comment">#可以使用以下命令看是否重启</span></span><br><span class="line">sudo /etc/init.d/apache2 status</span><br></pre></td></tr></table></figure><h2 id="WordPress下载"><a href="#WordPress下载" class="headerlink" title="WordPress下载"></a>WordPress下载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以在终端使用如下命令，或者前往cn.wordpress.org下载官方中文版</span></span><br><span class="line">wget https://cn.wordpress.org/wordpress-<span class="number">4.9</span><span class="number">.4</span>-zh_CN.<span class="built_in">zip</span></span><br><span class="line"><span class="comment">#解压缩</span></span><br><span class="line">sudo unzip wordpress-<span class="number">4.9</span><span class="number">.4</span>-zh_CN.<span class="built_in">zip</span></span><br><span class="line"><span class="comment">#如果扩展名是tar.gz</span></span><br><span class="line">sudo unzip wordpress-<span class="number">4.9</span><span class="number">.4</span>-zh_CN.tar.gz</span><br></pre></td></tr></table></figure><h2 id="为WordPress创建数据库"><a href="#为WordPress创建数据库" class="headerlink" title="为WordPress创建数据库"></a>为WordPress创建数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先登录mysql，输入你刚才设置的root用户密码</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment">#执行以下命令</span></span><br><span class="line"><span class="comment">## 创建数据库</span></span><br><span class="line">CREATE DATABASE wordpress;</span><br><span class="line"><span class="comment">## 设置用户名和密码，可以按需要进行修改</span></span><br><span class="line">CREATE USER <span class="string">&#x27;wordpress&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;WoRdPrESs123!@#&#x27;</span>;</span><br><span class="line">CREATE DATABASE `wordpress` /*!<span class="number">40100</span> DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci */;</span><br><span class="line"><span class="comment">## 为用户授权</span></span><br><span class="line">GRANT <span class="built_in">all</span> ON wordpress.* TO <span class="string">&#x27;wordpress&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment">## 使pe配置生效</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="comment">#退出数据库</span></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><h2 id="配置WordPress环境"><a href="#配置WordPress环境" class="headerlink" title="配置WordPress环境"></a>配置WordPress环境</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将WordPress移动到apache2的默认目录</span></span><br><span class="line">sudo mv wordpress/* /var/www/html/</span><br><span class="line"><span class="comment">#授权</span></span><br><span class="line">sudo chmod -R <span class="number">777</span> /var/www/html/</span><br><span class="line"><span class="comment">#修改apache2默认页面的文件名</span></span><br><span class="line">sudo mv /var/www/html/index.html /var/www/html/index~.html</span><br><span class="line"><span class="comment">#重启mysql和apache2</span></span><br><span class="line">sudo service mysql restart</span><br><span class="line">sudo service apache2 restart</span><br><span class="line"><span class="comment">## 完成以上配置，在浏览器中输入你的IP地址，应该就可以看到WordPress的界面了</span></span><br><span class="line"><span class="comment">## 按提示填入你为WordPress配置的数据库名，数据库用户，数据库密码</span></span><br><span class="line"><span class="comment">## 接下来为你的网站配置管理员，然后点击安装WordPress，稍等片刻即可</span></span><br></pre></td></tr></table></figure><h2 id="如果提示数据库配置错误"><a href="#如果提示数据库配置错误" class="headerlink" title="如果提示数据库配置错误"></a>如果提示数据库配置错误</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以手动修改配置文件，首先执行以下命令复制配置文件</span></span><br><span class="line">sudo cp /var/www/html/wp-config-sample.conf /var/www/html/wp-config.conf</span><br><span class="line"><span class="comment">#接着使用vim编辑配置文件,按要求填入数据库配置即可</span></span><br><span class="line"><span class="comment">## 使用vim打开后按i即可插入字符</span></span><br><span class="line"><span class="comment">## 要退出时先按Esc，再按shift+冒号键，输入wq，回车</span></span><br><span class="line">sudo vim /var/www/html/wp-config.conf</span><br><span class="line"><span class="comment">## 重启数据库和apache2，浏览器打开IP地址将会直接进入管理员创建界面</span></span><br></pre></td></tr></table></figure><h2 id="迁移IP地址或修改apache2端口"><a href="#迁移IP地址或修改apache2端口" class="headerlink" title="迁移IP地址或修改apache2端口"></a>迁移IP地址或修改apache2端口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改apache2的监听端口</span></span><br><span class="line">sudo vim /etc/apache2/ports.conf <span class="comment">#修改listen后面的数字</span></span><br><span class="line"><span class="comment">#然后执行以下命令，将镜像端口修改为跟ports.conf中一致</span></span><br><span class="line">sudo vim /etc/apache2/sites-enabled/<span class="number">000</span>-default.conf</span><br><span class="line"><span class="comment">#登录mysql</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment">#使用wordpress数据库</span></span><br><span class="line">use wordpress;</span><br><span class="line"><span class="comment">#查询IP，本地输出为127.0.0.1</span></span><br><span class="line">select * <span class="keyword">from</span> wp_options where option_id=<span class="number">1</span>;</span><br><span class="line"><span class="comment">#更新IP，xxxx为你的新IP地址</span></span><br><span class="line"><span class="comment">## 比如修改apache2的监听端口为88，则填入127.0.0.1:88</span></span><br><span class="line">update wp_options <span class="built_in">set</span> option_value=<span class="string">&quot;http://xxxx&quot;</span> where option_id=<span class="number">1</span>;</span><br><span class="line"><span class="comment">## 生效并退出</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">exit;</span><br><span class="line"><span class="comment">#浏览器访问WordPress后台</span></span><br><span class="line">http://xxxx/wp-admin/index.php</span><br><span class="line"><span class="comment">## 在&#x27;设置-常规选项-站点地址&#x27;中输入你的新IP地址或域名</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用moviepy模块操作视频与音频</title>
      <link href="/2020/08/08/%E4%BD%BF%E7%94%A8moviepy%E6%A8%A1%E5%9D%97%E6%93%8D%E4%BD%9C%E8%A7%86%E9%A2%91%E4%B8%8E%E9%9F%B3%E9%A2%91/"/>
      <url>/2020/08/08/%E4%BD%BF%E7%94%A8moviepy%E6%A8%A1%E5%9D%97%E6%93%8D%E4%BD%9C%E8%A7%86%E9%A2%91%E4%B8%8E%E9%9F%B3%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h2 id="代码与注释"><a href="#代码与注释" class="headerlink" title="代码与注释"></a>代码与注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#裁剪与写入</span></span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> VideoFileClip,AudioFileClip</span><br><span class="line"><span class="comment">#拼接视频与音频</span></span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> concatenate_videoclips,concatenate_audioclips</span><br><span class="line"><span class="comment">#预加载的视频</span></span><br><span class="line">videoFile = <span class="string">&#x27;demo.avi&#x27;</span></span><br><span class="line"><span class="comment">#要保存的文件名</span></span><br><span class="line">video_name = <span class="string">&#x27;cut_video.mp4&#x27;</span></span><br><span class="line">audio_name = <span class="string">&#x27;cut_audio.mp3&#x27;</span></span><br><span class="line"><span class="comment">#载入文件</span></span><br><span class="line">video = VideoFileClip(videoFile)</span><br><span class="line">audio = AudioFileClip(<span class="string">&#x27;空山新雨后.mp3&#x27;</span>)<span class="comment">#.volumex(0.2) #设定音量</span></span><br><span class="line"><span class="comment">#设定起点与终点，末尾为-1</span></span><br><span class="line">cut_audio = audio.subclip(<span class="number">0</span>,<span class="number">171</span>)</span><br><span class="line">cut_video = video.subclip(<span class="number">0</span>,<span class="number">171</span>)</span><br><span class="line"><span class="comment">#分离音视频</span></span><br><span class="line">video_no_audio = video.without_audio()</span><br><span class="line">video_audio = video.audio</span><br><span class="line"><span class="comment">#将音频写入视频</span></span><br><span class="line">cut_video = cut_video.set_audio(cut_audio)</span><br><span class="line"><span class="comment">#保存裁剪后的的文件</span></span><br><span class="line">cut_audio.to_audiofile(audio_name)</span><br><span class="line">cut_video.to_videofile(video_name,remove_temp = <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#另一种保存视频的方法</span></span><br><span class="line"><span class="comment">#cut_video.write_videofile(name,fps = 1,remove_temp = True)</span></span><br><span class="line"><span class="comment">#拼接视频，音频应该类似</span></span><br><span class="line"><span class="comment">#video = concatenate_videoclips([video1,video2,video3])</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python+opencv将图片合成视频</title>
      <link href="/2020/08/08/%E4%BD%BF%E7%94%A8python+opencv%E5%B0%86%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90%E8%A7%86%E9%A2%91/"/>
      <url>/2020/08/08/%E4%BD%BF%E7%94%A8python+opencv%E5%B0%86%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> glob,os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h2 id="加载中文路径"><a href="#加载中文路径" class="headerlink" title="加载中文路径"></a>加载中文路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cv_imread</span>(<span class="params">file_path</span>):</span></span><br><span class="line">    cv_img = cv2.imdecode(np.fromfile(file_path,dtype = np.uint8),-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> cv_img</span><br></pre></td></tr></table></figure><h2 id="修正图片大小"><a href="#修正图片大小" class="headerlink" title="修正图片大小"></a>修正图片大小</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize</span>(<span class="params">img_array,align_mode</span>):</span></span><br><span class="line">    _height = <span class="built_in">len</span>(img_array[<span class="number">0</span>])</span><br><span class="line">    _width = <span class="built_in">len</span>(img_array[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(img_array)):</span><br><span class="line">        img = img_array[i]</span><br><span class="line">        height = <span class="built_in">len</span>(img)</span><br><span class="line">        width = <span class="built_in">len</span>(img[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> align_mode == <span class="string">&#x27;smallest&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> height &lt; _height:</span><br><span class="line">                _height = height</span><br><span class="line">            <span class="keyword">if</span> width &lt; _width:</span><br><span class="line">                _width = width</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> height &gt; _height:</span><br><span class="line">                _height = height</span><br><span class="line">            <span class="keyword">if</span> width &gt; _width:</span><br><span class="line">                _width = width</span><br><span class="line">        <span class="string">&quot;&quot;&quot;if i &gt; 50:</span></span><br><span class="line"><span class="string">            break&quot;&quot;&quot;</span></span><br><span class="line">                </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img_array)):</span><br><span class="line">        img1 = cv2.resize(img_array[i],(_width,_height),interpolation = cv2.INTER_CUBIC)</span><br><span class="line">        img_array[i] = img1</span><br></pre></td></tr></table></figure><h2 id="写入视频"><a href="#写入视频" class="headerlink" title="写入视频"></a>写入视频</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">images_to_video</span>(<span class="params">Base_dir,paths</span>):</span></span><br><span class="line">    img_array = []</span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> paths:</span><br><span class="line"><span class="comment">#请根据实际情况修改要匹配的扩展名</span></span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> glob.glob(Base_dir + path + <span class="string">&#x27;/*.jpg&#x27;</span>):</span><br><span class="line">            img = cv_imread(filename)</span><br><span class="line">            <span class="keyword">if</span> img <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(filename + <span class="string">&quot; is error.&quot;</span>)</span><br><span class="line">            img_array.append(img)    </span><br><span class="line">    img_array,size = resize(img_array,<span class="string">&#x27;largest&#x27;</span>)</span><br><span class="line">    fps = <span class="number">1</span></span><br><span class="line">    out = cv2.VideoWriter(<span class="string">&#x27;demo.avi&#x27;</span>,cv2.VideoWriter_fourcc(*<span class="string">&#x27;DIVX&#x27;</span>),fps,size)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img_array)):</span><br><span class="line">        out.write(img_array[i])</span><br><span class="line">        </span><br><span class="line">    out.release()</span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="comment">#qin请根据实际情况修改Base_dir</span></span><br><span class="line">    Base_dir = <span class="string">&#x27;./学习资料/&#x27;</span></span><br><span class="line">    paths = os.listdir(Base_dir)</span><br><span class="line">    images_to_video(Base_dir,paths)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取微博热搜并发送提醒（改进版）</title>
      <link href="/2020/08/06/%E7%88%AC%E5%8F%96%E5%BE%AE%E5%8D%9A%E7%83%AD%E6%90%9C%E5%B9%B6%E5%8F%91%E9%80%81%E6%8F%90%E9%86%92%EF%BC%88%E6%94%B9%E8%BF%9B%E7%89%88%EF%BC%89/"/>
      <url>/2020/08/06/%E7%88%AC%E5%8F%96%E5%BE%AE%E5%8D%9A%E7%83%AD%E6%90%9C%E5%B9%B6%E5%8F%91%E9%80%81%E6%8F%90%E9%86%92%EF%BC%88%E6%94%B9%E8%BF%9B%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天在csdn看到了一篇爬取微博热搜并发邮件的博客，但是我在将其部署到腾讯云函数时出现了错误，于是使用server酱推送到微信，效果看起来还不错，废话不多说，上代码！</p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Thu Aug  6 18:09:58 2020</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: ljc545w</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#请在cmd下使用pip install requests命令安装依赖</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment">#以下三个包用于发送邮件，非第三方包，无需使用pip安装</span></span><br><span class="line"><span class="comment">#如果不使用邮件提醒，可以注释掉</span></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br></pre></td></tr></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个请求头...尊重一下你要爬的网站</span></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#获取日期</span></span><br><span class="line">date = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"><span class="comment">#server酱秘钥，请到sc.ftqq.com按提示获取</span></span><br><span class="line">SCKEY = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#爬取微博热搜数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Weibo_Spider</span>():</span></span><br><span class="line">    <span class="comment">#初始化contents字符串，并写入日期</span></span><br><span class="line">    contents = <span class="string">&#x27;&gt; 今天是&#x27;</span> + date + <span class="string">&#x27;\n\n&#x27;</span></span><br><span class="line">    <span class="comment">#微博热搜地址</span></span><br><span class="line">    url = <span class="string">&#x27;https://s.weibo.com/top/summary&#x27;</span></span><br><span class="line">    <span class="comment">#使用requests读取目标url</span></span><br><span class="line">    response = requests.get(url,headers = headers)</span><br><span class="line">    response.encoding = response.apparent_encoding</span><br><span class="line">    <span class="comment">#如果返回值不是200，可能你小子的ip被封了....</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        res = response.text</span><br><span class="line"><span class="comment">#当然你也可以看看返回的是什么...</span></span><br><span class="line"><span class="comment">#print(res)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    <span class="comment">#正则匹配我们想要的数据</span></span><br><span class="line">    pattern_title = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;a\shref=&quot;/weibo?.*?&quot;&gt;(.*?)&lt;&#x27;</span>)</span><br><span class="line">    titles = re.findall(pattern_title,res)</span><br><span class="line">    pattern_href = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;a\shref=&quot;(/weibo?.*?)&quot;.*?&lt;&#x27;</span>)</span><br><span class="line">    hrefs = re.findall(pattern_href,res)</span><br><span class="line">    <span class="comment">#尝试捕捉异常</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#如果titles与href数量不一致，嗯。。。不管它！</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(titles) != <span class="built_in">len</span>(hrefs):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;可能有一点小小的error&#x27;</span>)</span><br><span class="line">        <span class="comment">#配置contents字符串</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(titles)):</span><br><span class="line">            title = titles[i]</span><br><span class="line">            href = <span class="string">&#x27;https://s.weibo.com&#x27;</span> + hrefs[i]</span><br><span class="line">            <span class="comment">#server酱支持Markdown格式</span></span><br><span class="line">            content = <span class="string">&#x27;### # #&#x27;</span> + title + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;[点击查看详情](&#x27;</span> + href + <span class="string">&#x27;)\n\n&#x27;</span></span><br><span class="line">            contents += content</span><br><span class="line">        <span class="comment">#返回contents字符串</span></span><br><span class="line">        <span class="keyword">return</span> contents</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于发送邮件的函数            </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span>(<span class="params">contents</span>):</span></span><br><span class="line">    <span class="comment">#配置邮箱host，没有163邮箱的用QQ邮箱也可以</span></span><br><span class="line"><span class="comment">#mailhost = &#x27;smtp.qq.com&#x27;</span></span><br><span class="line">    mailhost = <span class="string">&#x27;smtp.163.com&#x27;</span></span><br><span class="line">    mail = smtplib.SMTP()</span><br><span class="line">    <span class="comment">#通过25端口连接host</span></span><br><span class="line">    mail.connect(mailhost,<span class="number">25</span>)</span><br><span class="line">    <span class="comment">#在这里写入你的邮箱</span></span><br><span class="line">    sender = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#SMTP/IMAP授权码，去个人邮箱中开启，请勿使用邮箱密码</span></span><br><span class="line">    password = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#收件人，可以与sender一致，也就是自己给自己发邮件</span></span><br><span class="line">    receiver = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    mail.login(sender, password)</span><br><span class="line">    <span class="comment">#邮件内容</span></span><br><span class="line">    news = contents</span><br><span class="line">    message = MIMEText(news,<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">#邮件标题</span></span><br><span class="line">    subject = <span class="string">&#x27;今日热搜&#x27;</span></span><br><span class="line">    message[<span class="string">&#x27;Subject&#x27;</span>] = Header(subject,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">#尝试捕捉error</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mail.sendmail(sender,receiver,message.as_string())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;邮件发送完毕&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;邮件发送失败\n&#x27;</span> + e)</span><br><span class="line">    mail.quit()</span><br></pre></td></tr></table></figure><h2 id="开始任务"><a href="#开始任务" class="headerlink" title="开始任务"></a>开始任务</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始推送&#x27;</span>)</span><br><span class="line">    <span class="comment">#server酱标题，不可缺省</span></span><br><span class="line">    title = <span class="string">&#x27;今日热点已经送达&#x27;</span></span><br><span class="line">    <span class="comment">#调用函数获取热搜信息</span></span><br><span class="line">    content = Weibo_Spider()</span><br><span class="line">    <span class="comment">#将数据整理成一个字典</span></span><br><span class="line">    msg = &#123;</span><br><span class="line">        <span class="string">&#x27;标题&#x27;</span>:title,</span><br><span class="line">        <span class="string">&#x27;内容&#x27;</span>:content</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#server酱推送到微信</span></span><br><span class="line">    push(SCKEY,msg)</span><br><span class="line">    <span class="comment">#发送邮件，部署到腾讯云时尽量不要使用，经常调用失败</span></span><br><span class="line">    <span class="comment">#send_email(content)</span></span><br><span class="line">    <span class="built_in">print</span>(date + <span class="string">&#x27;任务完成&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本地入口函数，如果使用腾讯云请删除或注释掉</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    job()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#腾讯云入口函数，此时还请不要使用邮件功能</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;def main_handler(event,context):</span></span><br><span class="line"><span class="string">    job()</span></span><br><span class="line"><span class="string">    return(&quot;Success&quot;)&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="云函数定时提醒"><a href="#云函数定时提醒" class="headerlink" title="云函数定时提醒"></a>云函数定时提醒</h2><p>1：使用微信扫码登录<a href="https://console.cloud.tencent.com/scf/list?rid=1&ns=default" title="腾讯云">腾讯云</a><br>2：点击新建，输入函数名称，运行环境选择python3.6，创建方式选择空白函数<br>3：清空index.py原有内容，并贴入本文代码，取消末尾入口函数的注释<br>4：点击下方保存并测试，如果调用成功，你将在返回结果中看到“success”,并且收到微信提醒<br>5：在下方高级设置里，将内存修改为64MB，超时时间修改为900，点击完成<br>6：创建触发器，触发方式选择定时触发，cron表达式参考：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">18</span> * * * * </span><br></pre></td></tr></table></figure><p>分别代表秒、分、时、日、月、星期、年，参考式代表的是每天下午6点。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1：请勿在五分钟内通过server酱推送相同信息，不然无法收到提醒<br>2：每天调用尽量不要超过500次，被封的话可以捐赠server酱或者重新注册一个github…</p><h2 id="请参考以下内容"><a href="#请参考以下内容" class="headerlink" title="请参考以下内容"></a>请参考以下内容</h2><p><a href="https://zhuanlan.zhihu.com/p/24670789" title="知乎：十条简明的Markdown格式">知乎：十条简明的Markdown格式</a><br><a href="https://blog.csdn.net/Yhen1/article/details/107202187" title="CSDN：爬取微博热搜+定时发送邮件">CSDN：爬取微博热搜+定时发送邮件</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑白科技 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取微博热搜并发送定时邮件</title>
      <link href="/2020/08/06/%E7%88%AC%E5%8F%96%E5%BE%AE%E5%8D%9A%E7%83%AD%E6%90%9C%E5%B9%B6%E5%8F%91%E9%80%81%E5%AE%9A%E6%97%B6%E9%82%AE%E4%BB%B6/"/>
      <url>/2020/08/06/%E7%88%AC%E5%8F%96%E5%BE%AE%E5%8D%9A%E7%83%AD%E6%90%9C%E5%B9%B6%E5%8F%91%E9%80%81%E5%AE%9A%E6%97%B6%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请先在窗口执行import xxx，然后安装缺失的第三方包</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br></pre></td></tr></table></figure><h2 id="日期与请求头"><a href="#日期与请求头" class="headerlink" title="日期与请求头"></a>日期与请求头</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">date = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="爬取热搜"><a href="#爬取热搜" class="headerlink" title="爬取热搜"></a>爬取热搜</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Weibo_Spider</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(date + <span class="string">&#x27;.txt&#x27;</span>,<span class="string">&#x27;wt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.close()</span><br><span class="line">    url = <span class="string">&#x27;https://s.weibo.com/top/summary&#x27;</span></span><br><span class="line">    response = requests.get(url,headers = headers)</span><br><span class="line">    response.encoding = response.apparent_encoding</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        res = response.text</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    doc = pq(res)</span><br><span class="line">    td = doc(<span class="string">&#x27;.td-02 a&#x27;</span>).items()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> td:</span><br><span class="line">        title = item.text()</span><br><span class="line">        href = <span class="string">&#x27;https://s.weibo.com&#x27;</span> + item.attr(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        content = title + <span class="string">&#x27;\n&#x27;</span> + href + <span class="string">&#x27;\n\n&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(date + <span class="string">&#x27;.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure><h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span>():</span></span><br><span class="line">    mailhost = <span class="string">&#x27;smtp.163.com&#x27;</span></span><br><span class="line">    mail = smtplib.SMTP()</span><br><span class="line">    mail.connect(mailhost,<span class="number">465</span>)</span><br><span class="line">    sender = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    password = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    receiver = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    mail.login(sender, password)</span><br><span class="line">    f = <span class="built_in">open</span>(date + <span class="string">&#x27;.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    news = f.read()</span><br><span class="line">    message = MIMEText(news,<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    subject = <span class="string">&#x27;今日热搜&#x27;</span></span><br><span class="line">    message[<span class="string">&#x27;Subject&#x27;</span>] = Header(subject,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mail.sendmail(sender,receiver,message.as_string())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;邮件发送完毕&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;邮件发送失败\n&#x27;</span> + e)</span><br><span class="line">    mail.quit()</span><br></pre></td></tr></table></figure><h2 id="控制与定时"><a href="#控制与定时" class="headerlink" title="控制与定时"></a>控制与定时</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始发送邮件&#x27;</span>)</span><br><span class="line">    Weibo_Spider()</span><br><span class="line">    send_email()</span><br><span class="line">    <span class="built_in">print</span>(date + <span class="string">&#x27;任务完成&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        schedule.every().day.at(<span class="string">&quot;08:00&quot;</span>).do(job)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="来自CSDN，搭配腾讯云函数使用更佳"><a href="#来自CSDN，搭配腾讯云函数使用更佳" class="headerlink" title="来自CSDN，搭配腾讯云函数使用更佳"></a>来自CSDN，搭配腾讯云函数使用更佳</h2>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬取网易云音乐</title>
      <link href="/2020/08/04/python%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
      <url>/2020/08/04/python%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re,lxml</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br></pre></td></tr></table></figure><h2 id="selenium无可视化"><a href="#selenium无可视化" class="headerlink" title="selenium无可视化"></a>selenium无可视化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;请输入歌曲名：&#x27;</span>)</span><br><span class="line">url_1 = <span class="string">&#x27;https://music.163.com/#/search/m/?s=&#x27;</span> + name + <span class="string">&#x27;&amp;type=1&#x27;</span></span><br><span class="line">browser = webdriver.Chrome(executable_path = <span class="string">&#x27;chromedriver.exe&#x27;</span>,options = chrome_options)</span><br><span class="line">browser.get(url = url_1)</span><br><span class="line">browser.switch_to.frame(<span class="string">&#x27;g_iframe&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">page_text = browser.execute_script(<span class="string">&#x27;return document.documentElement.outerHTML&#x27;</span>)</span><br><span class="line">browser.quit()</span><br><span class="line">bf = bs(page_text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">html = bf.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&quot;ztag j-flag&quot;</span>)</span><br><span class="line">html = <span class="built_in">str</span>(html)</span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;a.*?id=(.*?)&quot;&#x27;</span>,re.M)</span><br><span class="line">music_id = re.findall(pattern, html)</span><br><span class="line"><span class="comment">## 这里可以写一个for循环，爬取多个版本</span></span><br><span class="line">url = <span class="string">&#x27;http://music.163.com/song/media/outer/url?id=&#x27;</span> + music_id[<span class="number">1</span>] + <span class="string">&#x27;.mp3&#x27;</span></span><br><span class="line"><span class="comment">#外链地址</span></span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line">audio_content = requests.get(url,headers = headers).content</span><br><span class="line">filepath = name + <span class="string">&#x27;.mp3&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (filepath,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(audio_content)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;爬取完成！&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>请注意无法爬取VIP歌曲</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cv2和numpy模块实现下雨效果</title>
      <link href="/2020/08/01/cv2%E5%92%8Cnumpy%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0%E4%B8%8B%E9%9B%A8%E6%95%88%E6%9E%9C/"/>
      <url>/2020/08/01/cv2%E5%92%8Cnumpy%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0%E4%B8%8B%E9%9B%A8%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h2 id="初次模糊"><a href="#初次模糊" class="headerlink" title="初次模糊"></a>初次模糊</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_noise</span>(<span class="params">img,value = <span class="number">10</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    noise = np.random.uniform(<span class="number">0</span>,<span class="number">256</span>,img.shape[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">    v = value * <span class="number">0.01</span></span><br><span class="line">    noise[np.where(noise &lt; (<span class="number">256</span> - v))] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    k = np.array([ [<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0</span>],</span><br><span class="line">                 [<span class="number">0.1</span>,<span class="number">8</span>,<span class="number">0.1</span>],</span><br><span class="line">                 [<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0</span>] ])</span><br><span class="line">    </span><br><span class="line">    noise = cv2.filter2D(noise,-<span class="number">1</span>,k)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;cv2.imshow(&#x27;img&#x27;,noise)</span></span><br><span class="line"><span class="string">    cv2.waitKey()</span></span><br><span class="line"><span class="string">    cv2.destroyWindow(&#x27;img&#x27;)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> noise</span><br></pre></td></tr></table></figure><h2 id="再次模糊"><a href="#再次模糊" class="headerlink" title="再次模糊"></a>再次模糊</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rain_blur</span>(<span class="params">noise,length = <span class="number">10</span>,angle = <span class="number">0</span>,w = <span class="number">1</span></span>):</span></span><br><span class="line">    trans = cv2.getRotationMatrix2D((length / <span class="number">2</span>,length / <span class="number">2</span>),angle - <span class="number">45</span>,<span class="number">1</span> - length / <span class="number">100</span>)</span><br><span class="line">    dig = np.diag(np.ones(length))</span><br><span class="line">    k = cv2.warpAffine(dig,trans,(length,length))</span><br><span class="line">    k = cv2.GaussianBlur(k,(w,w),<span class="number">0</span>)</span><br><span class="line">    blurred = cv2.filter2D(noise,-<span class="number">1</span>,k)</span><br><span class="line">    cv2.normalize(blurred,blurred,<span class="number">0</span>,<span class="number">255</span>,cv2.NORM_MINMAX)</span><br><span class="line">    blurred = np.array(blurred,dtype = np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> blurred</span><br></pre></td></tr></table></figure><h2 id="第一种效果"><a href="#第一种效果" class="headerlink" title="第一种效果"></a>第一种效果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alpha_rain</span>(<span class="params">rain,img,beta = <span class="number">0.8</span></span>):</span></span><br><span class="line">    rain = np.expand_dims(rain,<span class="number">2</span>)</span><br><span class="line">    rain_effect = np.concatenate((img,rain),axis = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    rain_result = img.copy()</span><br><span class="line">    rain = np.array(rain,dtype = np.float32)</span><br><span class="line">    rain_result[:,:,<span class="number">0</span>] = rain_result[:,:,<span class="number">0</span>] * (<span class="number">255</span> - rain[:,:,<span class="number">0</span>]) / <span class="number">255</span> + beta * rain[:,:,<span class="number">0</span>]</span><br><span class="line">    rain_result[:,:,<span class="number">1</span>] = rain_result[:,:,<span class="number">1</span>] * (<span class="number">255</span> - rain[:,:,<span class="number">0</span>]) / <span class="number">255</span> + beta * rain[:,:,<span class="number">0</span>]</span><br><span class="line">    rain_result[:,:,<span class="number">2</span>] = rain_result[:,:,<span class="number">2</span>] * (<span class="number">255</span> - rain[:,:,<span class="number">0</span>]) / <span class="number">255</span> + beta * rain[:,:,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#把图像设定为灰度</span></span><br><span class="line">    <span class="comment">#rain_result = cv2.cvtColor(rain_result,cv2.COLOR_RGB2GRAY)</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;rain_effct_result&#x27;</span>,rain_result)</span><br><span class="line">    k = cv2.waitKey()</span><br><span class="line"><span class="comment">#按s保存图片</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>):</span><br><span class="line">        cv2.imwrite(<span class="string">&#x27;girl_1.jpeg&#x27;</span>,rain_result,[<span class="built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY),<span class="number">100</span>])</span><br><span class="line">        cv2.destroyWindow(<span class="string">&#x27;rain_effct_result&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cv2.destroyWindow(<span class="string">&#x27;rain_effct_result&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="第二种效果"><a href="#第二种效果" class="headerlink" title="第二种效果"></a>第二种效果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_rain</span>(<span class="params">rain,img,alpha = <span class="number">0.9</span></span>):</span></span><br><span class="line">    rain = np.expand_dims(rain,<span class="number">2</span>)</span><br><span class="line">    rain = np.repeat(rain,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    result = cv2.addWeighted(img,alpha,rain,<span class="number">1</span> - alpha,<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#result = cv2.cvtColor(result,cv2.COLOR_RGB2GRAY)</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;rain_effct&#x27;</span>,result)</span><br><span class="line">    k = cv2.waitKey()</span><br><span class="line">    <span class="keyword">if</span> k == <span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>):</span><br><span class="line">        cv2.imwrite(<span class="string">&#x27;girl_2.png&#x27;</span>,result,[<span class="built_in">int</span>(cv2.IMWRITE_PNG_COMPRESSION),<span class="number">3</span>])</span><br><span class="line">        cv2.destroyWindow(<span class="string">&#x27;rain_effct&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cv2.destroyWindow(<span class="string">&#x27;rain_effct&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="开始运行"><a href="#开始运行" class="headerlink" title="开始运行"></a>开始运行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;girl.jpeg&#x27;</span>)</span><br><span class="line">noise = get_noise(img,value = <span class="number">500</span>)</span><br><span class="line">rain = rain_blur(noise,length = <span class="number">50</span>,angle = -<span class="number">30</span>,w = <span class="number">3</span>)</span><br><span class="line">alpha_rain(rain,img,beta=<span class="number">0.6</span>)</span><br><span class="line">add_rain(rain,img)</span><br></pre></td></tr></table></figure><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p><img src="https://www.ljczero.top/media/editor/girl_20210129233531282412.jpeg"></p><h2 id="效果1"><a href="#效果1" class="headerlink" title="效果1"></a>效果1</h2><p><img src="https://www.ljczero.top/media/editor/girl_1_20210129233558947810.jpeg"></p><h2 id="效果2"><a href="#效果2" class="headerlink" title="效果2"></a>效果2</h2><p><img src="https://www.ljczero.top/media/editor/girl_2_20210129233613678557.jpg"><br>似乎不能上传png文件，所以改成了jpg格式</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python Turtle画一棵树</title>
      <link href="/2020/08/01/Python%20Turtle%E7%94%BB%E4%B8%80%E6%A3%B5%E6%A0%91/"/>
      <url>/2020/08/01/Python%20Turtle%E7%94%BB%E4%B8%80%E6%A3%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h2 id="树的主体（递归）"><a href="#树的主体（递归）" class="headerlink" title="树的主体（递归）"></a>树的主体（递归）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawTree</span>(<span class="params">length</span>):</span></span><br><span class="line">    <span class="keyword">if</span> length &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> length &lt; <span class="number">30</span> <span class="keyword">and</span> length &gt; <span class="number">14</span>:<span class="comment">#缩小一下树干</span></span><br><span class="line">            pensize(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">elif</span> length &lt; <span class="number">15</span> <span class="keyword">and</span> length &gt; <span class="number">5</span>:<span class="comment">#长度这个范围内那么就是绿叶</span></span><br><span class="line">            color(<span class="string">&#x27;#04B486&#x27;</span>)<span class="comment">#</span></span><br><span class="line">            pensize(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">elif</span> length &lt; <span class="number">5</span> <span class="keyword">and</span> length &gt; <span class="number">1</span>:<span class="comment">#红花</span></span><br><span class="line">            color(<span class="string">&#x27;#FE2E9A&#x27;</span>)</span><br><span class="line">            pensize(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            color(<span class="string">&#x27;#5E5E5E&#x27;</span>)<span class="comment">#其他范围就是正常的树干</span></span><br><span class="line">            pensize(<span class="number">5</span>)</span><br><span class="line">        <span class="comment">#随机角度与长度</span></span><br><span class="line">        randangle = <span class="number">2</span> * random.random()</span><br><span class="line">        randlen = <span class="number">2</span> * random.random()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#每次使用函数先绘制线段，再调整角度，这里是向右的角度转动</span></span><br><span class="line">        fd(length)</span><br><span class="line">        right(<span class="number">20</span> * randangle)</span><br><span class="line">        drawTree(length - <span class="number">10</span> * randlen)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#这里是向左的角度转动</span></span><br><span class="line">        left(<span class="number">40</span> * randangle)</span><br><span class="line">        drawTree(length - <span class="number">10</span> * randlen)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#为什么需要再向右转20度？那是因为我一共向左转了40度，使用backward后退，必须是相同的角度，不然退回去角度就不同了位置就不会对</span></span><br><span class="line">        right(<span class="number">20</span> * randangle)</span><br><span class="line"></span><br><span class="line">        up()</span><br><span class="line">        backward(length)</span><br><span class="line">        down()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五毛特效"><a href="#五毛特效" class="headerlink" title="五毛特效"></a>五毛特效</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fallingFlowers</span>(<span class="params">m</span>):</span></span><br><span class="line">    x,y = -<span class="number">1500</span>,-<span class="number">750</span></span><br><span class="line"></span><br><span class="line">    yval = <span class="number">50</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        up()</span><br><span class="line">        goto(x,y)</span><br><span class="line">        x += <span class="number">100</span></span><br><span class="line">        down()</span><br><span class="line">        yval = <span class="number">50</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            a = <span class="number">100</span> * random.random()</span><br><span class="line">            b = <span class="number">2</span> * random.random()</span><br><span class="line">            <span class="keyword">if</span> a &gt; <span class="number">59</span>:</span><br><span class="line">                color(<span class="string">&#x27;#FE2E9A&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                color(<span class="string">&#x27;#04B486&#x27;</span>)</span><br><span class="line">            circle(<span class="number">5</span>)</span><br><span class="line">            up()</span><br><span class="line">            goto(x,y + (yval * b))</span><br><span class="line">            fd(a)</span><br><span class="line">            yval += <span class="number">50</span></span><br><span class="line">            down()</span><br></pre></td></tr></table></figure><h2 id="开始运行"><a href="#开始运行" class="headerlink" title="开始运行"></a>开始运行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    setworldcoordinates(-<span class="number">1000</span>,-<span class="number">750</span>,<span class="number">1000</span>,<span class="number">750</span>)</span><br><span class="line"><span class="comment">#如果想看画图过程可修改为tracer(-200,1)</span></span><br><span class="line">    tracer(<span class="literal">False</span>)</span><br><span class="line">    fallingFlowers(<span class="number">20</span>)</span><br><span class="line">    bgcolor(<span class="string">&#x27;#F5F6CE&#x27;</span>)</span><br><span class="line">    color(<span class="string">&#x27;#5E5E5E&#x27;</span>)</span><br><span class="line">    pensize(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    up()</span><br><span class="line">    goto(<span class="number">0</span>,-<span class="number">700</span>)</span><br><span class="line">    down()</span><br><span class="line"></span><br><span class="line">    left(<span class="number">80</span>)</span><br><span class="line">    fd(<span class="number">140</span>)</span><br><span class="line">    drawTree(<span class="number">120</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> turtle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pygame和Turtle写的简易播放器</title>
      <link href="/2020/07/29/Pygame%E5%92%8CTurtle%E5%86%99%E7%9A%84%E7%AE%80%E6%98%93%E6%92%AD%E6%94%BE%E5%99%A8/"/>
      <url>/2020/07/29/Pygame%E5%92%8CTurtle%E5%86%99%E7%9A%84%E7%AE%80%E6%98%93%E6%92%AD%E6%94%BE%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> askdirectory</span><br><span class="line"><span class="keyword">import</span> os,time</span><br></pre></td></tr></table></figure><h2 id="窗口和变量"><a href="#窗口和变量" class="headerlink" title="窗口和变量"></a>窗口和变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">window = tk.Tk()</span><br><span class="line">window.title(<span class="string">&#x27;播放器&#x27;</span>)</span><br><span class="line">window.geometry(<span class="string">&#x27;300x300&#x27;</span>)</span><br><span class="line">pygame.mixer.init()</span><br><span class="line"></span><br><span class="line">value = []</span><br><span class="line">count = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">flag = []</span><br><span class="line">filepath,musiclist = [],[]</span><br><span class="line">flag.append(<span class="literal">False</span>)</span><br><span class="line">value.append(<span class="number">50</span>)</span><br></pre></td></tr></table></figure><h2 id="主要函数"><a href="#主要函数" class="headerlink" title="主要函数"></a>主要函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play_music</span>(<span class="params">musiclist,count,times,flag</span>):</span></span><br><span class="line">    <span class="keyword">if</span> flag[<span class="number">0</span>] == <span class="literal">False</span>:</span><br><span class="line">        path.<span class="built_in">set</span>(filepath[<span class="number">0</span>] + <span class="string">&#x27;/&#x27;</span> + musiclist[count[<span class="number">0</span>]])</span><br><span class="line">        filename = musiclist[count[<span class="number">0</span>]].split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        pygame.mixer.music.load(musiclist[count[<span class="number">0</span>]])</span><br><span class="line">        pygame.mixer.music.set_volume(value[<span class="number">0</span>] / <span class="number">100</span>)</span><br><span class="line">        pygame.mixer.music.play(loops = times,start = <span class="number">0.0</span>)</span><br><span class="line">        flag[<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectPath</span>():</span></span><br><span class="line">    path_ = askdirectory()</span><br><span class="line">    path.<span class="built_in">set</span>(path_)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startMusic</span>():</span></span><br><span class="line">    filepath.clear()</span><br><span class="line">    musiclist.clear()</span><br><span class="line">    count[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    filepath.append(path.get())</span><br><span class="line">    flag[<span class="number">0</span>] = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.chdir(path.get())</span><br><span class="line">        <span class="keyword">for</span> music <span class="keyword">in</span> os.listdir(path.get()):</span><br><span class="line">            filename = music.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> filename[-<span class="number">1</span>] == <span class="string">&#x27;mp3&#x27;</span> <span class="keyword">or</span> filename[-<span class="number">1</span>] == <span class="string">&#x27;flac&#x27;</span>:</span><br><span class="line">                musiclist.append(music)</span><br><span class="line">                count[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">                count[<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">                times = <span class="number">1</span></span><br><span class="line">        play_music(musiclist,count,times,flag)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        tk.messagebox.showerror(<span class="string">&#x27;错误&#x27;</span>,<span class="string">&#x27;请正确选择文件夹&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quitMusic</span>():</span></span><br><span class="line">    pygame.mixer.music.stop()</span><br><span class="line">    window.destroy()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pauseMusic</span>():</span></span><br><span class="line">    pygame.mixer.music.pause()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continueMusic</span>():</span></span><br><span class="line">    pygame.mixer.music.unpause()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextMusic</span>():</span></span><br><span class="line">    count[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count[<span class="number">0</span>] &lt;= count[<span class="number">1</span>] - <span class="number">1</span>:</span><br><span class="line">        flag[<span class="number">0</span>] = <span class="literal">False</span></span><br><span class="line">        times = <span class="number">1</span></span><br><span class="line">        play_music(musiclist,count,times,flag)</span><br><span class="line">    <span class="keyword">elif</span> count[<span class="number">0</span>] == count[<span class="number">1</span>]:</span><br><span class="line">        count[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        flag[<span class="number">0</span>] = <span class="literal">False</span></span><br><span class="line">        times = <span class="number">1</span></span><br><span class="line">        play_music(musiclist,count,times,flag)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleMusic</span>():</span></span><br><span class="line">    pygame.mixer.music.play(loops = -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">soundAdd</span>():</span></span><br><span class="line">    value[<span class="number">0</span>] += <span class="number">5</span></span><br><span class="line">    pygame.mixer.music.set_volume(value[<span class="number">0</span>] / <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">soundReduce</span>():</span></span><br><span class="line">    value[<span class="number">0</span>] -= <span class="number">5</span></span><br><span class="line">    pygame.mixer.music.set_volume(value[<span class="number">0</span>] / <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="文本框和按钮"><a href="#文本框和按钮" class="headerlink" title="文本框和按钮"></a>文本框和按钮</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">path = tk.StringVar()</span><br><span class="line"><span class="comment">#path.set(&#x27;E:/Music&#x27;)</span></span><br><span class="line">entry_1 = tk.Entry(window,textvariable = path).place(x = <span class="number">100</span>,y = <span class="number">30</span>,width = <span class="number">180</span>,height = <span class="number">30</span>)</span><br><span class="line">button_1 = tk.Button(window,text = <span class="string">&#x27;选择目录&#x27;</span>,command = selectPath)</span><br><span class="line">button_1.place(x = <span class="number">30</span>,y = <span class="number">30</span>,width = <span class="number">60</span>,height = <span class="number">30</span>)</span><br><span class="line">button_2 = tk.Button(window,text = <span class="string">&#x27;播放&#x27;</span>,command = startMusic)</span><br><span class="line">button_2.place(x = <span class="number">30</span>,y = <span class="number">80</span>,width = <span class="number">100</span>,height = <span class="number">30</span>)</span><br><span class="line">button_3 = tk.Button(window,text = <span class="string">&#x27;下一曲&#x27;</span>,command = nextMusic)</span><br><span class="line">button_3.place(x = <span class="number">180</span>,y = <span class="number">80</span>,width = <span class="number">100</span>,height = <span class="number">30</span>)</span><br><span class="line">button_4 = tk.Button(window,text = <span class="string">&#x27;暂停&#x27;</span>,command = pauseMusic)</span><br><span class="line">button_4.place(x = <span class="number">30</span>,y = <span class="number">140</span>,width = <span class="number">100</span>,height = <span class="number">30</span>)</span><br><span class="line">button_5 = tk.Button(window,text = <span class="string">&#x27;继续&#x27;</span>,command = continueMusic)</span><br><span class="line">button_5.place(x = <span class="number">180</span>,y = <span class="number">140</span>,width = <span class="number">100</span>,height = <span class="number">30</span>)</span><br><span class="line">button_6 = tk.Button(window,text = <span class="string">&#x27;升高音量&#x27;</span>,command = soundAdd)</span><br><span class="line">button_6.place(x = <span class="number">30</span>,y = <span class="number">200</span>,width = <span class="number">100</span>,height = <span class="number">30</span>)</span><br><span class="line">button_7 = tk.Button(window,text = <span class="string">&#x27;降低音量&#x27;</span>,command = soundReduce)</span><br><span class="line">button_7.place(x = <span class="number">180</span>,y = <span class="number">200</span>,width = <span class="number">100</span>,height = <span class="number">30</span>)</span><br><span class="line">button_8 = tk.Button(window,text = <span class="string">&#x27;单曲循环&#x27;</span>,command = singleMusic)</span><br><span class="line">button_8.place(x = <span class="number">30</span>,y = <span class="number">260</span>,width = <span class="number">100</span>,height = <span class="number">30</span>)</span><br><span class="line">button_9 = tk.Button(window,text = <span class="string">&#x27;退出&#x27;</span>,command = quitMusic)</span><br><span class="line">button_9.place(x = <span class="number">180</span>,y = <span class="number">260</span>,width = <span class="number">100</span>,height = <span class="number">30</span>)</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><h2 id="以上代码拼接即为完整代码"><a href="#以上代码拼接即为完整代码" class="headerlink" title="以上代码拼接即为完整代码"></a>以上代码拼接即为完整代码</h2>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现八大排序（持续更新）</title>
      <link href="/2020/07/24/Python%E5%AE%9E%E7%8E%B0%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2020/07/24/Python%E5%AE%9E%E7%8E%B0%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line">numberlist = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">冒泡排序</span></span><br><span class="line"><span class="string">比较相邻的元素。如果第一个比第二个大，就交换他们两个。</span></span><br><span class="line"><span class="string">对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。</span></span><br><span class="line"><span class="string">这步做完后，最后的元素会是最大的数。</span></span><br><span class="line"><span class="string">针对所有的元素重复以上的步骤，除了最后一个。</span></span><br><span class="line"><span class="string">持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">bumberlist</span>):</span></span><br><span class="line">    length = <span class="built_in">len</span>(numberlist)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length - i):</span><br><span class="line">            <span class="keyword">if</span> numberlist[j - <span class="number">1</span>] &gt; numberlist[j]:</span><br><span class="line">                numberlist[j],numberlist[j - <span class="number">1</span>] = numberlist[j - <span class="number">1</span>],numberlist[j]</span><br><span class="line">    <span class="keyword">return</span> numberlist</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">选择排序</span></span><br><span class="line"><span class="string">选择排序（Selection sort）是一种简单直观的排序算法。</span></span><br><span class="line"><span class="string">它的工作原理如下:</span></span><br><span class="line"><span class="string">首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，</span></span><br><span class="line"><span class="string">然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</span></span><br><span class="line"><span class="string">以此类推，直到所有元素均排序完毕。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectSort</span>(<span class="params">array</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(array)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        minNum = array[i]</span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> array[j] &lt; minNum:</span><br><span class="line">                minIndex = j</span><br><span class="line">                minNum = array[j]</span><br><span class="line">        array[i], array[minIndex] = array[minIndex], array[i]</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">插入排序</span></span><br><span class="line"><span class="string">从第一个元素开始，该元素可以认为已经被排序</span></span><br><span class="line"><span class="string">取出下一个元素，在已经排序的元素序列中从后向前扫描</span></span><br><span class="line"><span class="string">如果该元素（已排序）大于新元素，将该元素移到下一位置</span></span><br><span class="line"><span class="string">重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</span></span><br><span class="line"><span class="string">将新元素插入到该位置后</span></span><br><span class="line"><span class="string">重复步骤2~5</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">numberlist</span>):</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(numberlist)):</span><br><span class="line">        cur = numberlist[k]</span><br><span class="line">        j = k</span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> numberlist[j - <span class="number">1</span>] &gt; cur:</span><br><span class="line">            numberlist[j] = numberlist[j - <span class="number">1</span>]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        numberlist[j] = cur</span><br><span class="line">    <span class="keyword">return</span> numberlist</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">希尔排序</span></span><br><span class="line"><span class="string">希尔排序的基本思想是：将数组列在一个表中并对列分别进行插入排序，</span></span><br><span class="line"><span class="string">重复这过程，不过每次用更长的列（步长更长了，列数更少了）来进行。</span></span><br><span class="line"><span class="string">最后整个表就只有一列了。</span></span><br><span class="line"><span class="string">将数组转换至表是为了更好地理解这算法，算法本身还是使用数组进行排序。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span>(<span class="params">numberlist</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(numberlist)</span><br><span class="line">    gap = <span class="built_in">round</span>(n / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap,n):</span><br><span class="line">            temp = numberlist[i]</span><br><span class="line">            index = i</span><br><span class="line">            <span class="keyword">while</span> index &gt;= gap  <span class="keyword">and</span> numberlist[index - gap] &gt; temp:</span><br><span class="line">                numberlist[index] = numberlist[index - gap]</span><br><span class="line">            numberlist[index] = temp</span><br><span class="line">        gap = <span class="built_in">round</span>(gap / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> numberlist</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">归并排序</span></span><br><span class="line"><span class="string">思路：拆拆拆到单个数字，合并合并合并</span></span><br><span class="line"><span class="string">归并排序是采用分治法的一个非常典型的应用。</span></span><br><span class="line"><span class="string">归并排序的思想就是先递归分解数组，再合并数组。</span></span><br><span class="line"><span class="string">先考虑合并两个有序数组，基本思路是比较两个数组的最前面的数，</span></span><br><span class="line"><span class="string">谁小就先取谁，取了后相应的指针就往后移一位。</span></span><br><span class="line"><span class="string">然后再比较，直至一个数组为空，最后把另一个数组的剩余部分复制过来即可。</span></span><br><span class="line"><span class="string">再考虑递归分解，基本思路是将数组分解成left和right，</span></span><br><span class="line"><span class="string">如果这两个数组内部数据是有序的，</span></span><br><span class="line"><span class="string">那么就可以用上面合并数组的方法将这两个数组合并排序。</span></span><br><span class="line"><span class="string">如何让这两个数组内部是有序的？可以再二分，直至分解出的小组只含有一个元素时为止，</span></span><br><span class="line"><span class="string">此时认为该小组内部已有序。然后合并排序相邻二个小组即可。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">array</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(array) &lt;= <span class="number">1</span>: <span class="keyword">return</span> array</span><br><span class="line">    num = <span class="built_in">len</span>(array) // <span class="number">2</span></span><br><span class="line">    left = merge_sort(array[:num])</span><br><span class="line">    right = merge_sort(array[num:])</span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">left, right</span>):</span></span><br><span class="line">    l,r = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> l &lt; <span class="built_in">len</span>(left) <span class="keyword">and</span> r &lt; <span class="built_in">len</span>(right):</span><br><span class="line">        <span class="keyword">if</span> left[l] &lt; right[r]:</span><br><span class="line">            result.append(left[l])</span><br><span class="line">            l = l + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right[r])</span><br><span class="line">            r += <span class="number">1</span></span><br><span class="line">    result += left[l:]</span><br><span class="line">    result += right[r:]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">快速排序</span></span><br><span class="line"><span class="string">快速排序通常明显比同为Ο(n log n)的其他算法更快，因此常被采用，</span></span><br><span class="line"><span class="string">而且快排采用了分治法的思想，所以在很多笔试面试中能经常看到快排的影子。</span></span><br><span class="line"><span class="string">可见掌握快排的重要性。</span></span><br><span class="line"><span class="string">快排特点：</span></span><br><span class="line"><span class="string">每经过一趟快排，轴点元素都必然就位，也就是说，</span></span><br><span class="line"><span class="string">一趟下来至少有关键字key节点在其最终位置，所以考察各个选项，看有几个元素就位即可。</span></span><br><span class="line"><span class="string">逆序的数列，选择首位为key，则会退化到O（n^2），</span></span><br><span class="line"><span class="string">可以随机选择一个元素作为基准元素。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#python指针交换法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">array</span>):</span></span><br><span class="line">    <span class="keyword">return</span> _quick_sort(array, <span class="number">0</span>, <span class="built_in">len</span>(array) - <span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_quick_sort</span>(<span class="params">array, left, right</span>):</span></span><br><span class="line">    <span class="keyword">if</span> left &gt;= right: <span class="keyword">return</span> array</span><br><span class="line">    key = array[left]</span><br><span class="line">    lp = left</span><br><span class="line">    rp = right</span><br><span class="line">    <span class="keyword">while</span> (lp &lt; rp):</span><br><span class="line">        <span class="keyword">while</span> array[rp] &gt;= key <span class="keyword">and</span> lp &lt; rp:</span><br><span class="line">            rp -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> array[lp] &lt;= key <span class="keyword">and</span> lp &lt; rp:</span><br><span class="line">            lp += <span class="number">1</span></span><br><span class="line">        array[lp], array[rp] = array[rp], array[lp]</span><br><span class="line">    array[left], array[lp] = array[lp], array[left]</span><br><span class="line">    _quick_sort(array, left, lp - <span class="number">1</span>)</span><br><span class="line">    _quick_sort(array, lp + <span class="number">1</span>, right)</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">堆排序</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MAX_Heapify</span>(<span class="params">heap, HeapSize, root</span>):</span>  <span class="comment"># 在堆中做结构调整使得父节点的值大于子节点</span></span><br><span class="line"></span><br><span class="line">    left = <span class="number">2</span> * root + <span class="number">1</span></span><br><span class="line">    right = left + <span class="number">1</span></span><br><span class="line">    larger = root</span><br><span class="line">    <span class="keyword">if</span> left &lt; HeapSize <span class="keyword">and</span> heap[larger] &lt; heap[left]:</span><br><span class="line">        larger = left</span><br><span class="line">    <span class="keyword">if</span> right &lt; HeapSize <span class="keyword">and</span> heap[larger] &lt; heap[right]:  <span class="comment"># 确定到底和左还是右节点换，先判断做节点</span></span><br><span class="line">        larger = right</span><br><span class="line">    <span class="keyword">if</span> larger != root:  <span class="comment"># 如果做了堆调整：则larger的值等于左节点或者右节点的，这个时候做对调值操作</span></span><br><span class="line">        heap[larger],heap[root] = heap[root],heap[larger]</span><br><span class="line">        MAX_Heapify(heap, HeapSize, larger)  <span class="comment"># 从顶端递归往下调整，用larger是因为larger是数组索引，并且已经在比较时候更新过，而root没有更新过！</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Build_MAX_Heap</span>(<span class="params">heap</span>):</span>  <span class="comment"># 构造一个堆，将堆中所有数据重新排序</span></span><br><span class="line">    HeapSize = <span class="built_in">len</span>(heap)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(((HeapSize - <span class="number">1</span>) - <span class="number">1</span>) // <span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):  <span class="comment"># 从后往前出数(z最后一个节点的父节点)  &#x27;//&#x27; got integer</span></span><br><span class="line">        MAX_Heapify(heap,HeapSize,i)  <span class="comment"># 这里堆的大小是固定，root是i逐步减小</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HeapSort</span>(<span class="params">heap</span>):</span>  <span class="comment"># 将根节点取出与最后一位做对调，对前面len-1个节点继续进行对调整过程。</span></span><br><span class="line">    Build_MAX_Heap(heap)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(heap) - <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        heap[<span class="number">0</span>],heap[i] = heap[i],heap[<span class="number">0</span>]</span><br><span class="line">        MAX_Heapify(heap, i, <span class="number">0</span>)  <span class="comment"># 这里堆的大小是逐步缩小，root永远是0</span></span><br><span class="line">    <span class="keyword">return</span> heap</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">计数排序</span></span><br><span class="line"><span class="string">1.找出待排序的数组中最大和最小的元素</span></span><br><span class="line"><span class="string">2.统计数组中每个值为i的元素出现的次数，存入数组C的第i项</span></span><br><span class="line"><span class="string">3.对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）</span></span><br><span class="line"><span class="string">4.反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_sort</span>(<span class="params">ary</span>):</span></span><br><span class="line">    <span class="built_in">max</span> = <span class="built_in">min</span> = <span class="number">0</span>  <span class="comment"># min和max应该用sys.maxint</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ary:</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">min</span>:</span><br><span class="line">            <span class="built_in">min</span> = i</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="built_in">max</span>:</span><br><span class="line">            <span class="built_in">max</span> = i </span><br><span class="line">    count = [<span class="number">0</span>] * (<span class="built_in">max</span> - <span class="built_in">min</span> +<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> ary:</span><br><span class="line">        count[index - <span class="built_in">min</span>] += <span class="number">1</span></span><br><span class="line">    index=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span> - <span class="built_in">min</span> + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(count[a]):  <span class="comment"># 重点：有多少个就for循环多少次</span></span><br><span class="line">            ary[index] = a + <span class="built_in">min</span></span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ary</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">双向冒泡排序</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double_bubble_sort</span>(<span class="params">number_list:<span class="built_in">list</span></span>) -&gt; <span class="built_in">list</span>:</span></span><br><span class="line">    <span class="comment">#列表开始的索引</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    <span class="comment">#列表末尾的索引</span></span><br><span class="line">    high = <span class="built_in">len</span>(number_list) - <span class="number">1</span></span><br><span class="line">    <span class="comment">#开始循环，每一次排序好两个数字</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        <span class="comment">#用作退出循环的标志</span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="comment">#正向冒泡，找到剩下数字中最大的，将其排到“末尾”</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(low,high):</span><br><span class="line">            <span class="keyword">if</span> number_list[i] &gt; number_list[i + <span class="number">1</span>]:</span><br><span class="line">                number_list[i],number_list[i + <span class="number">1</span>] = number_list[i + <span class="number">1</span>],number_list[i]</span><br><span class="line">                <span class="comment">#存在数据交换就改变flag</span></span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">        <span class="comment">#不存在数据交换，即排序完成时跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#末尾索引减少1</span></span><br><span class="line">        high = high - <span class="number">1</span></span><br><span class="line">        <span class="comment">#反向冒泡，找到剩下数字中最小的，将其排到“开头”</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(high,low,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> number_list[i] &lt; number_list[i - <span class="number">1</span>]:</span><br><span class="line">                number_list[i],number_list[i - <span class="number">1</span>] = number_list[i - <span class="number">1</span>],number_list[i]</span><br><span class="line">        <span class="comment">#开头索引增加1</span></span><br><span class="line">        low += <span class="number">1</span></span><br><span class="line">    <span class="comment">#排序完成，返回列表</span></span><br><span class="line">    <span class="keyword">return</span> number_list</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">桶排序</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">基数排序</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;冒泡排序:\n&#x27;</span> + <span class="built_in">str</span>(bubble_sort(numberlist)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;选择排序:\n&#x27;</span> + <span class="built_in">str</span>(selectSort(numberlist)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;插入排序:\n&#x27;</span> + <span class="built_in">str</span>(insert_sort(numberlist)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;希尔排序:\n&#x27;</span> + <span class="built_in">str</span>(shell_sort(numberlist)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;归并排序:\n&#x27;</span> + <span class="built_in">str</span>(merge_sort(numberlist)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;快速排序:\n&#x27;</span> + <span class="built_in">str</span>(quick_sort(numberlist)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;堆排序:\n&#x27;</span> + <span class="built_in">str</span>(HeapSort(numberlist)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;计数排序:\n&#x27;</span> + <span class="built_in">str</span>(count_sort(numberlist)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;计数排序:\n&#x27;</span> + <span class="built_in">str</span>(double_bubble_sort([<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>])))</span><br><span class="line">    <span class="comment">#print(numberlist)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用turtle和random画出的星空</title>
      <link href="/2020/07/23/%E5%88%A9%E7%94%A8turtle%E5%92%8Crandom%E7%94%BB%E5%87%BA%E7%9A%84%E6%98%9F%E7%A9%BA/"/>
      <url>/2020/07/23/%E5%88%A9%E7%94%A8turtle%E5%92%8Crandom%E7%94%BB%E5%87%BA%E7%9A%84%E6%98%9F%E7%A9%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random,randint</span><br><span class="line"></span><br><span class="line">screen = Screen()</span><br><span class="line">width,height = <span class="number">800</span>,<span class="number">600</span></span><br><span class="line"></span><br><span class="line">screen.setup(width,height)</span><br><span class="line">screen.title(<span class="string">&quot;两情若是久长时，又岂在朝朝暮暮&quot;</span>)</span><br><span class="line">screen.bgcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">screen.mode(<span class="string">&#x27;logo&#x27;</span>)</span><br><span class="line">screen.delay(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">t = Turtle(visible = <span class="literal">False</span>,shape = <span class="string">&#x27;circle&#x27;</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.setheading(-<span class="number">90</span>)</span><br><span class="line">t.goto(width / <span class="number">2</span>,randint(-height / <span class="number">2</span>,height / <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">stars = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    star = t.clone()</span><br><span class="line">    s = random() / <span class="number">3</span></span><br><span class="line">    star.shapesize(s,s)</span><br><span class="line">    star.speed(<span class="built_in">int</span>(s * <span class="number">10</span>))</span><br><span class="line">    star.setx(width / <span class="number">2</span> + randint(<span class="number">1</span>,width))</span><br><span class="line">    star.sety(randint(-height / <span class="number">2</span>,height / <span class="number">2</span>))</span><br><span class="line">    star.showturtle()</span><br><span class="line">    stars.append(star)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> star <span class="keyword">in</span> stars:</span><br><span class="line">            star.setx(star.xcor() - <span class="number">3</span> * star.speed())</span><br><span class="line">            <span class="keyword">if</span> star.xcor() &lt; -width / <span class="number">2</span>:</span><br><span class="line">                star.hideturtle()</span><br><span class="line">                star.setx(width / <span class="number">2</span> + randint(<span class="number">1</span>,width))</span><br><span class="line">                star.sety(randint(-height / <span class="number">2</span>,height / <span class="number">2</span>))</span><br><span class="line">                star.showturtle()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Pygame实现代码雨效果</title>
      <link href="/2020/07/23/%E5%88%A9%E7%94%A8Pygame%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%9B%A8%E6%95%88%E6%9E%9C/"/>
      <url>/2020/07/23/%E5%88%A9%E7%94%A8Pygame%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%9B%A8%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h2 id="pygame窗口"><a href="#pygame窗口" class="headerlink" title="pygame窗口"></a>pygame窗口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FONT_PX = <span class="number">15</span></span><br><span class="line">run = <span class="literal">True</span></span><br><span class="line">pygame.init()</span><br><span class="line">winSur = pygame.display.set_mode((<span class="number">500</span>,<span class="number">600</span>))</span><br><span class="line"><span class="comment">#font = pygame.font.SysFont(&#x27;fangsong&#x27;,20)</span></span><br><span class="line">font = pygame.font.SysFont(<span class="string">&#x27;123.ttf&#x27;</span>,<span class="number">22</span>)</span><br><span class="line">bg_suface = pygame.Surface((<span class="number">500</span>,<span class="number">600</span>),flags = pygame.SRCALPHA)</span><br><span class="line">pygame.Surface.convert(bg_suface)</span><br><span class="line">bg_suface.fill(pygame.Color(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">13</span>))</span><br><span class="line">winSur.fill((<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line"><span class="comment">#雨滴内容</span></span><br><span class="line">letter = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>]</span><br><span class="line">texts = [font.render(<span class="built_in">str</span>(letter[i]),<span class="literal">True</span>,(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(letter))]</span><br><span class="line">colums = <span class="built_in">int</span>(<span class="number">500</span> / FONT_PX)</span><br><span class="line">drops = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(colums)]</span><br></pre></td></tr></table></figure><h2 id="主要循环"><a href="#主要循环" class="headerlink" title="主要循环"></a>主要循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> run:</span><br><span class="line"><span class="comment">#捕捉一下错误，不然会因为关闭pygame窗口报大量error</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                pygame.quit()</span><br><span class="line">                run = <span class="literal">False</span></span><br><span class="line">        pygame.time.delay(<span class="number">33</span>)</span><br><span class="line">        winSur.blit(bg_suface,(<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(drops)):</span><br><span class="line">            text = random.choice(texts)</span><br><span class="line">            winSur.blit(text,(i * FONT_PX,drops[i] * FONT_PX))</span><br><span class="line">            drops[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> drops[i] * <span class="number">10</span> &gt; <span class="number">600</span> <span class="keyword">or</span> random.random() &gt; <span class="number">0.95</span>:</span><br><span class="line">                drops[i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        pygame.display.flip()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python制作带有GUI的照片动漫化程序</title>
      <link href="/2020/07/23/Python%E5%88%B6%E4%BD%9C%E5%B8%A6%E6%9C%89GUI%E7%9A%84%E7%85%A7%E7%89%87%E5%8A%A8%E6%BC%AB%E5%8C%96%E7%A8%8B%E5%BA%8F/"/>
      <url>/2020/07/23/Python%E5%88%B6%E4%BD%9C%E5%B8%A6%E6%9C%89GUI%E7%9A%84%E7%85%A7%E7%89%87%E5%8A%A8%E6%BC%AB%E5%8C%96%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>这个项目调用的是<a href="http://ai.baidu.com/" title="百度AI开放平台">百度AI开放平台</a>照片动漫化接口，点击链接，注册并登录，选择“开放能力–图像技术–图像特效–人像动漫化”，点击立即使用，之后按提示操作即可获得API和password，个人用户可免费调用500次。</p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> askopenfilename</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br></pre></td></tr></table></figure><h2 id="获取照片路径"><a href="#获取照片路径" class="headerlink" title="获取照片路径"></a>获取照片路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectPath</span>():</span></span><br><span class="line">    path_ = askopenfilename()</span><br><span class="line">    path.<span class="built_in">set</span>(path_)</span><br></pre></td></tr></table></figure><h2 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_access_token</span>():</span></span><br><span class="line">    url = <span class="string">&#x27;https://aip.baidubce.com/oauth/2.0/token&#x27;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;grant_type&#x27;</span>:<span class="string">&#x27;client_credentials&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;client_id&#x27;</span>:Api.get(),</span><br><span class="line">        <span class="string">&#x27;client_secret&#x27;</span>:Password.get()</span><br><span class="line">        &#125;</span><br><span class="line">    res = requests.post(url,data = data,headers = headers)</span><br><span class="line">    res = res.json()</span><br><span class="line">    access_token = res[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> access_token</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_process</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        img_before = path.get()</span><br><span class="line">        img_after = img_before.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        img_after = img_after[<span class="number">0</span>] + <span class="string">&#x27;_1.&#x27;</span> + img_after[-<span class="number">1</span>]</span><br><span class="line">        request_url = <span class="string">&#x27;https://aip.baidubce.com/rest/2.0/image-process/v1/selfie_anime&#x27;</span></span><br><span class="line">        file = <span class="built_in">open</span>(img_before,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        origin_img = base64.b64encode(file.read())</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        tk.messagebox.showerror(<span class="string">&#x27;错误&#x27;</span>,<span class="string">&#x27;请选择照片再执行！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;access_token&#x27;</span>:get_access_token(),</span><br><span class="line">            <span class="string">&#x27;image&#x27;</span>:origin_img,</span><br><span class="line">            <span class="string">&#x27;others&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        tk.messagebox.showerror(<span class="string">&#x27;错误&#x27;</span>,<span class="string">&#x27;Api可能已经失效或网络未连接！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.post(request_url,data = data,headers = headers)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        tk.messagebox.showerror(<span class="string">&#x27;错误&#x27;</span>,<span class="string">&#x27;请检查网络连接是否正常&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = res.json()</span><br><span class="line">            f = <span class="built_in">open</span>(img_after,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">            after_img = res[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">            after_img = base64.b64decode(after_img)</span><br><span class="line">            f.write(after_img)</span><br><span class="line">            f.close()</span><br><span class="line">            tk.messagebox.showinfo(<span class="string">&#x27;成功！&#x27;</span>,<span class="string">&#x27;照片已经动漫化&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tk.messagebox.showerror(<span class="string">&#x27;错误&#x27;</span>,<span class="string">&#x27;Api可能已经失效！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> askopenfilename</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.title(<span class="string">&#x27;照片动漫化&#x27;</span>)</span><br><span class="line">window.geometry(<span class="string">&#x27;250x200&#x27;</span>)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectPath</span>():</span></span><br><span class="line">    path_ = askopenfilename()</span><br><span class="line">    path.<span class="built_in">set</span>(path_)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_access_token</span>():</span></span><br><span class="line">    url = <span class="string">&#x27;https://aip.baidubce.com/oauth/2.0/token&#x27;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;grant_type&#x27;</span>:<span class="string">&#x27;client_credentials&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;client_id&#x27;</span>:Api.get(),</span><br><span class="line">        <span class="string">&#x27;client_secret&#x27;</span>:Password.get()</span><br><span class="line">        &#125;</span><br><span class="line">    res = requests.post(url,data = data,headers = headers)</span><br><span class="line">    res = res.json()</span><br><span class="line">    access_token = res[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> access_token</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_process</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        img_before = path.get()</span><br><span class="line">        img_after = img_before.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        img_after = img_after[<span class="number">0</span>] + <span class="string">&#x27;_1.&#x27;</span> + img_after[-<span class="number">1</span>]</span><br><span class="line">        request_url = <span class="string">&#x27;https://aip.baidubce.com/rest/2.0/image-process/v1/selfie_anime&#x27;</span></span><br><span class="line">        file = <span class="built_in">open</span>(img_before,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        origin_img = base64.b64encode(file.read())</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        tk.messagebox.showerror(<span class="string">&#x27;错误&#x27;</span>,<span class="string">&#x27;请选择照片再执行！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;access_token&#x27;</span>:get_access_token(),</span><br><span class="line">            <span class="string">&#x27;image&#x27;</span>:origin_img,</span><br><span class="line">            <span class="string">&#x27;others&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        tk.messagebox.showerror(<span class="string">&#x27;错误&#x27;</span>,<span class="string">&#x27;Api可能已经失效或网络未连接！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.post(request_url,data = data,headers = headers)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        tk.messagebox.showerror(<span class="string">&#x27;错误&#x27;</span>,<span class="string">&#x27;请检查网络连接是否正常&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = res.json()</span><br><span class="line">            f = <span class="built_in">open</span>(img_after,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">            after_img = res[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">            after_img = base64.b64decode(after_img)</span><br><span class="line">            f.write(after_img)</span><br><span class="line">            f.close()</span><br><span class="line">            tk.messagebox.showinfo(<span class="string">&#x27;成功！&#x27;</span>,<span class="string">&#x27;照片已经动漫化&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tk.messagebox.showerror(<span class="string">&#x27;错误&#x27;</span>,<span class="string">&#x27;Api可能已经失效！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">path = tk.StringVar()</span><br><span class="line">entry_1 = tk.Entry(window,textvariable = path).place(x = <span class="number">80</span>,y = <span class="number">90</span>)</span><br><span class="line">button_1 = tk.Button(window,text = <span class="string">&#x27;选择照片&#x27;</span>,command = selectPath)</span><br><span class="line">button_1.place(x = <span class="number">10</span>,y = <span class="number">90</span>,height = <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">Api = tk.StringVar()</span><br><span class="line">entry_2 = tk.Entry(window,textvariable = Api,show = <span class="string">&#x27;*&#x27;</span>).place(x = <span class="number">80</span>,y = <span class="number">30</span>)</span><br><span class="line">tk.Label(window,text = <span class="string">&#x27;Api    :&#x27;</span>).place(x = <span class="number">30</span>,y = <span class="number">30</span>,height = <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">Password = tk.StringVar()</span><br><span class="line">entry_3 = tk.Entry(window,textvariable = Password,show = <span class="string">&#x27;*&#x27;</span>).place(x = <span class="number">80</span>,y = <span class="number">60</span>)</span><br><span class="line">tk.Label(window,text = <span class="string">&#x27;Password:&#x27;</span>).place(x = <span class="number">10</span>,y = <span class="number">60</span>,height = <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">button_2 = tk.Button(window,text = <span class="string">&#x27;开始执行&#x27;</span>,command = img_process)</span><br><span class="line">button_2.place(x = <span class="number">75</span>,y = <span class="number">130</span>,height = <span class="number">50</span>,width = <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    window.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="项目的打包"><a href="#项目的打包" class="headerlink" title="项目的打包"></a>项目的打包</h2><p>cmd下，切换到py文件保存目录，然后参考以下用法：<br>pyinstaller -Fw xxx.py<br>ps：建议在虚拟环境下打包，用到什么库就安装什么，不然打包出来体积会非常大</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫中bs4的使用</title>
      <link href="/2020/07/12/%E7%88%AC%E8%99%AB%E4%B8%ADbs4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/12/%E7%88%AC%E8%99%AB%E4%B8%ADbs4%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>#bs4解析网页<br>以爬取某网站表情包为例</p><h2 id="用到的包"><a href="#用到的包" class="headerlink" title="用到的包"></a>用到的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re,os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br></pre></td></tr></table></figure><h2 id="URL地址"><a href="#URL地址" class="headerlink" title="URL地址"></a>URL地址</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urls = [<span class="string">&#x27;https://www.doutula.com/search?type=photo&amp;more=1&amp;keyword=%E6%80%BC%E4%BA%BA&amp;page=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>)]</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="处理网页"><a href="#处理网页" class="headerlink" title="处理网页"></a>处理网页</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(urls)):</span><br><span class="line"><span class="comment">#利用requests读取网页数据</span></span><br><span class="line">    r = requests.get(urls[i],headers = headers)</span><br><span class="line"><span class="comment">#将网站转码</span></span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line"><span class="comment">#如果返回值不是200说明遇到反爬了</span></span><br><span class="line"><span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line"><span class="comment">#保存网页数据</span></span><br><span class="line">html = r.text</span><br><span class="line"><span class="comment">#调用bs4处理网页</span></span><br><span class="line">bf = bs(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(bf)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"><span class="comment">#先分析第一页就够了</span></span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="匹配图片地址和名称"><a href="#匹配图片地址和名称" class="headerlink" title="匹配图片地址和名称"></a>匹配图片地址和名称</h2><p>观察‘print(bf)’返回的内容，我们使用以下命令:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取保存图片地址和名称的div模块</span></span><br><span class="line">   html = bf.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&quot;random_picture&quot;</span>)</span><br><span class="line"><span class="comment">#取图片地址</span></span><br><span class="line">   imgs = html.find_all(<span class="string">&#x27;img&#x27;</span>,referrerpolicy=<span class="string">&quot;no-referrer&quot;</span>)</span><br><span class="line"><span class="comment">#取名称所在字段</span></span><br><span class="line">   titles = html.find_all(<span class="string">&#x27;p&#x27;</span>,style=<span class="string">&quot;display: none&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="取图片格式并取精确的图片名"><a href="#取图片格式并取精确的图片名" class="headerlink" title="取图片格式并取精确的图片名"></a>取图片格式并取精确的图片名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(imgs)):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#匹配图片的格式(.jpg、.png、.gif等)</span></span><br><span class="line">mat = <span class="built_in">str</span>(imgs[j].get(<span class="string">&quot;data-original&quot;</span>))[-<span class="number">4</span>:]</span><br><span class="line"><span class="comment">#如果是jpeg格式，就给它加上一个‘.’</span></span><br><span class="line">        <span class="keyword">if</span> mat[<span class="number">0</span>] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">mat = <span class="string">&#x27;.&#x27;</span> + mat</span><br><span class="line"><span class="comment">#图片的URL地址</span></span><br><span class="line">        path = imgs[j].get(<span class="string">&quot;data-original&quot;</span>)</span><br><span class="line"><span class="comment">#print(path)        #可以在这里输出看一下结果</span></span><br><span class="line"><span class="comment">#正则匹配，使图片名称更精确</span></span><br><span class="line">        pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&gt;.*?&lt;&#x27;</span>)</span><br><span class="line"><span class="comment">#其实用search就可以</span></span><br><span class="line">        title = re.findall(pattern,<span class="built_in">str</span>(titles[j]))[<span class="number">0</span>][<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="comment">#现在就可以为图片命名了</span></span><br><span class="line">        filename = <span class="built_in">str</span>(j) + title + mat</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment">#先练习第一张图片就可以</span></span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;bqb/&#x27;</span> + filename,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(img)</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>去掉break，来爬取几千张怼人表情包吧！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re,os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urls = [<span class="string">&#x27;https://www.doutula.com/search?type=photo&amp;more=1&amp;keyword=%E6%80%BC%E4%BA%BA&amp;page=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>)]</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;bqb&#x27;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&#x27;bqb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(urls)):</span><br><span class="line">    r = requests.get(urls[i],headers = headers)</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        html = r.text</span><br><span class="line">        bf = bs(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        html = bf.find(<span class="string">&#x27;div&#x27;</span>,class_ = <span class="string">&quot;random_picture&quot;</span>)</span><br><span class="line">        imgs = html.find_all(<span class="string">&#x27;img&#x27;</span>,referrerpolicy=<span class="string">&quot;no-referrer&quot;</span>)</span><br><span class="line">        titles = html.find_all(<span class="string">&#x27;p&#x27;</span>,style=<span class="string">&quot;display: none&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(imgs)):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                mat = <span class="built_in">str</span>(imgs[j].get(<span class="string">&quot;data-original&quot;</span>))[-<span class="number">4</span>:]</span><br><span class="line">                <span class="keyword">if</span> mat[<span class="number">0</span>] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    mat = <span class="string">&#x27;.&#x27;</span> + mat</span><br><span class="line">                path = imgs[j].get(<span class="string">&quot;data-original&quot;</span>)</span><br><span class="line">                pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&gt;.*?&lt;&#x27;</span>)</span><br><span class="line">                title = re.findall(pattern,<span class="built_in">str</span>(titles[j]))[<span class="number">0</span>][<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">                filename = <span class="built_in">str</span>(j) + title + mat</span><br><span class="line">                img = requests.get(path,headers = headers).content</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;bqb/&#x27;</span> + filename,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(img)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第&#x27;</span> + <span class="built_in">str</span>(i + <span class="number">1</span>) + <span class="string">&#x27;页下载完成&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p><img src="https://www.ljczero.top/media/editor/%E6%8D%95%E8%8E%B7_20200713003119843164.JPG"><br>#以上！</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人网站都需要做什么</title>
      <link href="/2020/07/11/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E9%83%BD%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88/"/>
      <url>/2020/07/11/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E9%83%BD%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h2 id="所需条件"><a href="#所需条件" class="headerlink" title="所需条件"></a>所需条件</h2><p>1：云服务器<br>如果你是在校生，可以尝试<a href="https://developer.aliyun.com/adc/student/" title="白嫖阿里云">白嫖阿里云</a>。<br>如果你已经毕业1+天，那就不能白嫖！我购买了阿里云的ECS学生机，优惠也不错，57块买了半年，当然，腾讯云也有学生机，看个人喜好。<br>2：注册一个域名<br>在哪里买服务器就去哪里注册吧，这可以免除一些在域名解析以及备案时候的麻烦，top结尾的域名首年只要9块，对穷人可以说是相当的良心了。<br>ps：在注册域名的地方解析，是不收取额外的解析费用的。<br>3：一个网站模版<br>如果使用本站源码，你需要在项目目录下，运行python manage.py runserver,然后浏览器打开127.0.0.1:8000，保证运行正常。<br>基于其他编程语言开发的web项目，还请自行了解。</p><h2 id="部署教程"><a href="#部署教程" class="headerlink" title="部署教程"></a>部署教程</h2><p>不管是部署到本地，单独作为一个日记本使用，还是放到云服务器让别人也能够访问，以下三篇文章都能够很好的帮助你。<br><a href="https://blog.csdn.net/qq_41257358/article/details/106643109" title="CSDN：搭建个人服务器">CSDN：搭建个人服务器</a><br><a href="https://www.lylinux.net/article/2019/8/5/58.html" title="本站作者的部署教程">本站原作者的部署教程</a><br><a href="https://zhuanlan.zhihu.com/p/63038112" title="知乎：Django建站指南">知乎：Django建站指南</a><br>第一篇文章教你如何构建云服务器以及免密登录…可惜我已经毕业10天，不算在校生了，如果你打开的时候活动已经结束，也请不要恼怒。后面两篇，前者使用nginx+gunicorn+supervisor部署项目,后者使用nginx+uwsgi,如何取舍看个人喜好，我使用的是nginx+uwsgi，个人建议在配置远程数据库之前都参考原作者的文章，写的非常详细，之后如果使用uwsgi的话参考知乎的建站指南，里面给出了如何配置ssl证书的教程。</p><h2 id="别的问题"><a href="#别的问题" class="headerlink" title="别的问题"></a>别的问题</h2><p>拥有云服务器之后，直接在创建好的实例里面连接远程服务器，这样可以免去安装虚拟环境，使用Git命令克隆作者的项目即可，具体方法这里不再赘述。<br>安装虚拟环境的方法可以参考本站文章，如果觉得不够详细，可以去<a href="https://www.jianshu.com/p/838841cd7853" title="简书">简书</a>，这是一篇图文教程。</p>]]></content>
      
      
      <categories>
          
          <category> 技术至上 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑白科技 </tag>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Windows系统上安装Ubuntu</title>
      <link href="/2020/07/11/%E5%9C%A8Windows%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85Ubuntu/"/>
      <url>/2020/07/11/%E5%9C%A8Windows%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85Ubuntu/</url>
      
        <content type="html"><![CDATA[<h2 id="问题的产生"><a href="#问题的产生" class="headerlink" title="问题的产生"></a>问题的产生</h2><p>当我想搭建自己网站的时候，发现原作者使用的是Linux+nginx+gunicorn，而卑微如我只会使用Windows系统，换电脑的话又没有钱，那怎么办呢，只能使用虚拟环境了啊！！！环境了啊！！了啊！</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>首先到<a href="https://ubuntu.com/download/desktop" title="Ubuntu官网">Ubuntu官网</a>下载镜像，下载20.04吧，这个版本除了终端还有桌面，平常想玩个数独或者扫雷也是可以的。<br>然后到<a href="https://www.virtualbox.org/wiki/Downloads" title="这里">这里</a>下载Virtualbox，选择Windows hosts，至于Virtualbox的安装，这里就不再赘述了，基本没什么需要注意的，别装到C盘去就可以。<br>安装完成后打开，点击工具–&gt;新建,自定义你的虚拟环境名称，然后选择虚拟环境目录，最好选择剩余空间大的盘符，千万不要装到C盘去了，类型选择Linux，版本选择Ubuntu(64bit),如果是32位就选择32bit，点击确定，会让你分配给虚拟环境的内存，我电脑4G内存分配了1800M，勉强能用，给的越大越好，但是不要超过CPU内存的一半，点击下一步，现在创建虚拟硬盘，文件类型选择vdi，下一步，选择动态分配，再下一步选择文件位置和大小，我分配的大小是40G，应该能用挺久了，当然，如果你盘内还有200G的剩余空间，那你分配100G也是可以的。<br>点击创建，回到安装的主页，点击你的虚拟环境–&gt;设置，在”系统”里去掉软驱前面的勾选，并且单击箭头调整顺序，把硬盘放在光驱的前面，不然可能无法载入！在存储里，单击控制器:IDE右边的第一个加号，添加虚拟光驱，选择磁盘，找到你下载好的Ubuntu镜像，单击打开，就到了安装Ubuntu的界面啦，如果一直黑屏建议检查下是否把硬盘放到了光驱前面。<br>在安装界面，下拉选择中文简体，键盘布局选择汉语，单击继续，正常安装，继续，安装类型选择清除整个磁盘并安装Ubuntu，因为这是个虚拟镜像，所以不会对你的Windows系统造成任何影响，放心选择就是，单击继续，位置一般选北京(beijing)，接下来输入个人信息，密码一定要记牢，不然就算不设置需要密码登录，也无法获取root用户权限，那样很多命令就执行不了，然后会开始安装，等安装完成就可以愉快的使用强大的Linux终端搞事情啦。</p><h2 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h2><p>想往虚拟环境里传自己Windows系统下的项目？首先启动Ubuntu，在上方的菜单栏选择设备，安装增强功能，然后在设备–&gt;共享文件夹里选择你Windows下用来保存共享文件的目录，接着在Ubuntu的/mnt目录下新建一个文件夹，完成以后打开Ubuntu终端，输入su，输入密码进入root模式，在终端里输入如下命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t vboxsf Windows共享文件夹名 /mnt/Ubuntu共享文件夹名</span><br></pre></td></tr></table></figure><p>完成以后，把你想要传输的文件放到Windows的文件夹里，就能在Ubuntu的文件夹里看到了，这是一个可逆的过程。<br>ps：每次重新启动Ubuntu系统都要重新执行一遍上面的命令。</p>]]></content>
      
      
      <categories>
          
          <category> 技术至上 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑白科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Server酱的使用</title>
      <link href="/2020/07/10/%E5%85%B3%E4%BA%8EServer%E9%85%B1%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/10/%E5%85%B3%E4%BA%8EServer%E9%85%B1%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1：获取SCKEY"><a href="#1：获取SCKEY" class="headerlink" title="1：获取SCKEY"></a>1：获取SCKEY</h2><p>首先到<a href="https://github.com/" title="Github">Github</a>注册一个帐号，然后到<a href="http://sc.ftqq.com/" title="方糖">方糖</a>授权github帐号登录，扫描二维码绑定微信号即可免费获取专属SCKEY。</p><h2 id="2：关于Github"><a href="#2：关于Github" class="headerlink" title="2：关于Github"></a>2：关于Github</h2><p>由于国内网不能获取Github注册验证的邮件，所以需要借助一些工具，具体方法还请自行摸索，所产生的问题也与本人无关。</p><h2 id="3：使用范例"><a href="#3：使用范例" class="headerlink" title="3：使用范例"></a>3：使用范例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于发送POST或GET请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#填入你的SCKEY</span></span><br><span class="line">SCKEY = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#定义一个请求函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">SCKEY,msg</span>):</span></span><br><span class="line"><span class="keyword">if</span> SCKEY.isspace() <span class="keyword">or</span> <span class="built_in">len</span>(SCKEY) == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">        api = <span class="string">&#x27;https://sc.ftqq.com/&#x27;</span> + SCKEY + <span class="string">&#x27;.send&#x27;</span></span><br><span class="line">        title = msg[<span class="string">&quot;标题&quot;</span>]</span><br><span class="line">        context = msg[<span class="string">&quot;内容&quot;</span>]</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;text&quot;</span>:title,</span><br><span class="line">            <span class="string">&quot;desp&quot;</span>:context</span><br><span class="line">            &#125;</span><br><span class="line">        req = requests.post(api,data = data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="comment">#写标题，不可为空</span></span><br><span class="line">title = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">#写内容，可以缺省,支持Markdown格式</span></span><br><span class="line">context = <span class="string">&quot;&quot;</span></span><br><span class="line">msg = &#123;</span><br><span class="line"><span class="string">&quot;标题&quot;</span>:title,</span><br><span class="line"><span class="string">&quot;内容&quot;</span>:context</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#调用请求函数</span></span><br><span class="line">push(SCKEY,msg)</span><br></pre></td></tr></table></figure><h2 id="3：定时提醒"><a href="#3：定时提醒" class="headerlink" title="3：定时提醒"></a>3：定时提醒</h2><p>可以使用<a href="https://console.cloud.tencent.com/scf/list?rid=1&ns=default" title="腾讯云">腾讯云</a>提供的函数服务，微信授权登录，新建，运行环境Python3.6，创建方式：空白函数，在编辑区写入自己的代码，执行方法里选择入口函数，例如将if <strong>name</strong>==’<strong>main</strong>‘:更改为：def main():，则人口函数为<br>xxx.main(xxx为你的py文件名称)，最后创建触发器，自定义触发周期，cron表达式可参考如下格式：<br><code>0 30 8 * * * *</code><br>即为每天早上8:30分执行一次，前三个数分别代表秒分时，后面几个是日、月、星期、年，可按需要更改。<br>如果想要每天按时间提醒不同的内容，还请引入datetime模块，在函数文件里写if条件句判断时间，返回不同的msg字典。<br>#以上，不得不说Server酱真的很好用！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python外星人入侵(源码及打包教程)</title>
      <link href="/2020/07/10/Python%E5%A4%96%E6%98%9F%E4%BA%BA%E5%85%A5%E4%BE%B5(%E6%BA%90%E7%A0%81%E5%8F%8A%E6%89%93%E5%8C%85%E6%95%99%E7%A8%8B)/"/>
      <url>/2020/07/10/Python%E5%A4%96%E6%98%9F%E4%BA%BA%E5%85%A5%E4%BE%B5(%E6%BA%90%E7%A0%81%E5%8F%8A%E6%89%93%E5%8C%85%E6%95%99%E7%A8%8B)/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>很久以前就跟着书上写完了外星人入侵的小游戏，但是在打包的时候遇到了各种问题，打包完成开始游戏时总是黑屏然后闪退，前两天看到有位同学写完这个项目发布的博客，我在评论区留下了自己魔改了一点的…收获了40多个赞，于是我又搜索了一下如何才能正确打包，现在分享给大家。</p><h2 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h2><h3 id="1：源码及文件"><a href="#1：源码及文件" class="headerlink" title="1：源码及文件"></a>1：源码及文件</h3><p><a href="https://pan.baidu.com/s/1CRUNVsur9p96hu_x_qo_vA" title="百度网盘">百度网盘</a><br>提取码：hr64</p><h3 id="2：解决黑屏问题"><a href="#2：解决黑屏问题" class="headerlink" title="2：解决黑屏问题"></a>2：解决黑屏问题</h3><p>在scoreboard.py中，将<br><code>self.font = pygame.font.SysFont(None,48)</code><br>修改为<br><code>self.font = pygame.font.SysFont(&#39;arial&#39;,24)</code><br>48和24是字号，可以自行调整，48好像有点大我就改成了24.</p><h3 id="3：如何打包"><a href="#3：如何打包" class="headerlink" title="3：如何打包"></a>3：如何打包</h3><p>需要安装pyinstaller模块，安装方式：<br>在命令行窗口输入：<br>pip install pyinstaller<br>然后利用cd命令切换到代码所在目录<br>输入以下命令，然后回车：<br><code>pyinstaller -Fw alien_invasion.py -p alien.py -p bullet.py -p button.py -p game_functions.py -p game_stats.py -p scoreboard.py -p settings.py -p ship.py </code><br>-F：打包成单个可执行文件<br>-w：在运行游戏时不显示命令行窗口<br>-i xxx.ico：可以自定义图标<br>打包完成的文件存放在dist目录下<br>将images和musics文件夹拷贝进去即可运行<br>打包时会生成xxx.spec文件<br>再次打包时只需执行以下命令：<br>pyinstaller -F xxx.spec</p><h3 id="4：解决打包过大问题"><a href="#4：解决打包过大问题" class="headerlink" title="4：解决打包过大问题"></a>4：解决打包过大问题</h3><p>由于pyinstaller打包时会将所有安装过的模块都打包进去，所以可执行文件会显得十分臃肿，第一次打包完成有30M，挺吓人的，解决办法就是建立一个虚拟环境（总不能买一台新电脑吧…）。<br>win加R打开cmd，cd到自己想要保存虚拟环境的目录，输入以下命令：<br>py -3 -m venv venv<br>venv就是虚拟环境的名字<br>然后输入venv\Scripts\activate激活虚拟环境<br>在虚拟环境下使用pip安装用到的第三方包，比如本例中只用到了pygame，所以只需要pip install pygame即可。<br>另外还需要重新安装pyinstaller（pip install pyinstaller），不然会自动调用电脑中现存的模块，打包出来依然很臃肿。<br>最后利用cd命令切换到py文件存放目录进行打包，把文件拷贝到虚拟环境目录下也可。<br>deactivate退出虚拟环境，无用的虚拟环境可以直接删除。<br>ps：pipenv提供的虚拟环境也很好用，需要先：<br>pip install pipenv安装该模块<br>然后在命令行窗口输入：<br>pipenv install创建新的虚拟环境，接着：<br>pipenv shell进入虚拟环境<br>或者省略pipenv install，因为没有虚拟环境的时候会自动创建一个，剩下的步骤同上。<br>如果下载速度过慢可以使用以下命令：<br>pipenv install –skip-lock 包名<br>最后，pipenv –rm删除已有的虚拟环境。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>最后打包完成有8M多，这个大小应该还可以了。。。。<br>希望不会被律师函警告吧。。。。<br>CSDN链接：<a href="https://blog.csdn.net/ljc545w/article/details/106629519">https://blog.csdn.net/ljc545w/article/details/106629519</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部分LINUX终端及Windows下CMD常用命令</title>
      <link href="/2020/07/09/%E9%83%A8%E5%88%86LINUX%E7%BB%88%E7%AB%AF%E5%8F%8AWindows%E4%B8%8BCMD%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/07/09/%E9%83%A8%E5%88%86LINUX%E7%BB%88%E7%AB%AF%E5%8F%8AWindows%E4%B8%8BCMD%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>#防止自己遗忘</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装Python依赖包:</span></span><br><span class="line">pip install xxx -i 指定源</span><br><span class="line"><span class="comment">#比如需要安装virtualenv模块，则在命令行输入以下内容：</span></span><br><span class="line">python -m pip install virtualenv -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</span><br><span class="line"><span class="comment">#从txt批量安装</span></span><br><span class="line">pip install -Ur requirements.txt</span><br><span class="line"><span class="comment">#生成依赖txt</span></span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"><span class="comment">#创建虚拟环境(需要安装virtualenv模块):</span></span><br><span class="line">py -<span class="number">3</span> -m venv ll_env</span><br><span class="line"><span class="comment">#启动虚拟环境</span></span><br><span class="line">ll_env/Scripts/activate;<span class="comment">#输入deactivate并回车即可退出</span></span><br><span class="line"><span class="comment">#将py文件打包成可执行程序,需要安装pyinstaller模块</span></span><br><span class="line"><span class="comment">#-i指定图标,-F打包成单个程序,-w隐藏命令行窗口</span></span><br><span class="line">pyinstaller -i xxx.ico -Fw xxx1.py xxx2.py ...</span><br><span class="line"><span class="comment">#禁用pyecharts 1.9.0安全警告</span></span><br><span class="line"><span class="keyword">import</span> pyecharts.<span class="built_in">globals</span></span><br><span class="line">pyecharts.<span class="built_in">globals</span>._WarningControl.ShowWarning = <span class="literal">False</span></span><br><span class="line"><span class="comment">#禁用python安全警告</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"><span class="comment">#no mudule named &#x27;pip&#x27;的解决办法</span></span><br><span class="line">python -m ensurepip</span><br><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>几个Django常用命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建迁移文件</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line"><span class="comment">#迁移数据</span></span><br><span class="line">python manage.py migrate</span><br><span class="line"><span class="comment">#创建超级用户</span></span><br><span class="line">python manage.py createsuperuser</span><br><span class="line"><span class="comment">#收集静态资源</span></span><br><span class="line">python manage.py collectstatic --no-<span class="built_in">input</span></span><br><span class="line"><span class="comment">#启动Django服务</span></span><br><span class="line">python manage.py runserver ip:port;<span class="comment">#默认为127.0.0.1:8000,按Ctrl+C退出</span></span><br></pre></td></tr></table></figure><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#升级系统</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade -y</span><br><span class="line"><span class="comment">#获取root权限</span></span><br><span class="line">su <span class="comment">#需要输入root用户密码</span></span><br><span class="line"><span class="comment">#重启系统</span></span><br><span class="line">sudo reboot</span><br><span class="line"><span class="comment">#编辑某个文件</span></span><br><span class="line">sudo vim xxx.xxx</span><br><span class="line"><span class="comment">#安装服务,xxx为你需要的服务,如mysql</span></span><br><span class="line">sudo apt install xxx -y</span><br><span class="line"><span class="comment">#创建虚拟环境,同样需要安装virtualenv</span></span><br><span class="line">virtualenv -p /usr/<span class="built_in">bin</span>/python3 xxx</span><br><span class="line"><span class="comment">#启动虚拟环境,xxx为虚拟环境根目录</span></span><br><span class="line">source xxx/<span class="built_in">bin</span>/activate</span><br><span class="line"><span class="comment">#配置mysql数据库</span></span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line"><span class="comment">#使用root用户登录数据库</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment">#重启mysql服务</span></span><br><span class="line">sudo /etc/init.d/mysql restart</span><br><span class="line"><span class="comment">#查询user与host</span></span><br><span class="line">select user,host <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="comment">#修改root用户密码</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="comment">#赋予root权限</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"><span class="comment">#赋予用户权限</span></span><br><span class="line">GRANT <span class="built_in">all</span> ON database.* TO <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment">#查询已有数据库</span></span><br><span class="line">show databases;</span><br><span class="line"><span class="comment">#切换数据库</span></span><br><span class="line">use xxx;</span><br><span class="line"><span class="comment">#查询当前数据库表单</span></span><br><span class="line">show tables;</span><br><span class="line"><span class="comment">#创建用户和数据,以下是一个例子</span></span><br><span class="line">CREATE USER <span class="string">&#x27;djangoblog&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;DjAnGoBlOg123!@#&#x27;</span>;</span><br><span class="line">CREATE DATABASE `djangoblog` /*!<span class="number">40100</span> DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci */;</span><br><span class="line">GRANT <span class="built_in">all</span> ON djangoblog.* TO <span class="string">&#x27;djangoblog&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">exit <span class="comment">#退出</span></span><br><span class="line"><span class="comment">#mysql备份与还原</span></span><br><span class="line"><span class="comment">#物理备份（完全备份）</span></span><br><span class="line">mysqldump -u root -p --<span class="built_in">all</span>-databases &gt; /path/bak.sql</span><br><span class="line"><span class="comment">#指定数据库备份</span></span><br><span class="line">mysqldump -u root -p --databases db1 db2 db3 &gt; /path/bak.sql</span><br><span class="line"><span class="comment">#单独备份（不使用--databases，则还原时需事先创建数据库）</span></span><br><span class="line">mysqldump -u root -p djangoblog &gt; /path/djangoblog.sql</span><br><span class="line"><span class="comment">#还原数据库</span></span><br><span class="line">mysql -u root -p djangoblog &lt; djangoblog.sql</span><br><span class="line"><span class="comment">#在Windows下还原遇到unknown mysql server host时(改变编码)</span></span><br><span class="line">mysql -uroot -p --default-character-<span class="built_in">set</span>=utf8 djangoblog &lt; djangoblog.sql</span><br><span class="line"><span class="comment">#查询端口占用</span></span><br><span class="line">lsof -i:port</span><br><span class="line"><span class="comment">#杀死进程</span></span><br><span class="line">kill -<span class="number">9</span> port</span><br><span class="line"><span class="comment">#杀死某服务的全部进程,如nginx</span></span><br><span class="line">pkill -<span class="number">9</span> nginx</span><br><span class="line"><span class="comment">#删除文件</span></span><br><span class="line">rm xxx</span><br><span class="line"><span class="comment">#删除目录</span></span><br><span class="line">rm -rf xxx <span class="keyword">or</span> rmdir xxx</span><br><span class="line"><span class="comment">#复制文件夹</span></span><br><span class="line">cp xxx /path</span><br><span class="line"><span class="comment">#复制多个文件</span></span><br><span class="line">cp -r /var/www/html/wordpress/. /var/www/html</span><br><span class="line"><span class="comment">#移动文件夹下的所有文件</span></span><br><span class="line">sudo mv path/* path</span><br><span class="line"><span class="comment">#为文件夹赋予权限</span></span><br><span class="line">sudo chmod -R <span class="number">777</span> /var/www/html/</span><br><span class="line"><span class="comment">#移动文件或重命名</span></span><br><span class="line">sudo mv /path/index.html /path/index~.html</span><br><span class="line"><span class="comment">#复制文件并命名</span></span><br><span class="line">sudo cp /path/index.html /path/index~.html</span><br><span class="line"><span class="comment">#重启apache2</span></span><br><span class="line">sudo /etc/init.d/apache2 restart</span><br><span class="line"><span class="comment">#安装uwsgi-plugin-python</span></span><br><span class="line">sudo apt install uwsgi-plugin-python3</span><br><span class="line"><span class="comment">#nginx相关命令</span></span><br><span class="line">nginx -s start;<span class="comment">#启动</span></span><br><span class="line">nginx -s stop;<span class="comment">#停止</span></span><br><span class="line">nginx -t;<span class="comment">#查看nginx状态</span></span><br><span class="line">nginx -s reload;<span class="comment">#重新挂载</span></span><br><span class="line">service nginx restart;<span class="comment">#作用跟上面应该差不多,重启nginx服务</span></span><br><span class="line">nginx -c /etc/nginx/nginx.conf;<span class="comment">#遇到run错误时使用</span></span><br><span class="line"><span class="comment">#uwsgi常用命令</span></span><br><span class="line"><span class="comment">#启动单个uwsgi服务，如果报错请加--plugin python3</span></span><br><span class="line">uwsgi --http-socket :port --chdir /项目根目录 --home /虚拟环境目录 --module xxx.wsgi:application</span><br><span class="line"><span class="comment">#另外一种方法</span></span><br><span class="line">uwsgi --http-socket :<span class="number">8000</span> --chdir ~/python/DjangoBlog --plugin python3 --wsgi-file DjangoBlog.wsgi.py</span><br><span class="line"><span class="comment">#启动uwsgi多线程服务</span></span><br><span class="line">uwsgi --ini /home/~/python/DjangoBlog_uwsgi/DjangoBlog.ini</span><br><span class="line"><span class="comment">#查询uwsgi线程</span></span><br><span class="line">ps -aux | grep uwsgi</span><br><span class="line"><span class="comment">#重新g挂载uwsgi</span></span><br><span class="line">uwsgi --reload /home/~/python/DjangoBlog_uwsgi/uwsgi.pid</span><br><span class="line"><span class="comment">#杀死所有uwsgi线程</span></span><br><span class="line">ps -aux | grep uwsgi |awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs kill -<span class="number">9</span></span><br><span class="line"><span class="comment">#登录自己的服务器</span></span><br><span class="line">ssh root@ip</span><br><span class="line"><span class="comment">#从本地向云端传输文件(不可以在登录状态)</span></span><br><span class="line">scp /path/filename root@ip:/path</span><br><span class="line"><span class="comment">#启动memcached缓存服务</span></span><br><span class="line">/etc/init.d/memcached restart</span><br><span class="line"><span class="comment">#开放文件权限</span></span><br><span class="line">chmod <span class="number">777</span> /path/xxx</span><br><span class="line"><span class="comment">#配置crontab</span></span><br><span class="line">crontab -e<span class="comment">#编辑配置</span></span><br><span class="line">crontab -l<span class="comment">#查看配置</span></span><br><span class="line"><span class="number">00</span> <span class="number">8</span> * * *<span class="comment">#分别代表分钟、小时、日、月、星期， * 代表任意</span></span><br><span class="line"><span class="comment">#vim常用操作</span></span><br><span class="line"><span class="comment">#多行编辑</span></span><br><span class="line">Ctrl+v，然后选中要编辑的行，按大写的i进入输入模式，输入内容后按esc</span><br><span class="line"><span class="comment">#多行删除</span></span><br><span class="line">esc下，:<span class="number">1</span>,3d (<span class="number">1</span>是待删除起始行，<span class="number">3</span>是末尾行，d代表删除命令)</span><br><span class="line"><span class="comment">#清空文件</span></span><br><span class="line">echo <span class="string">&#x27;&#x27;</span> &gt; xxx(xxx为文件名)</span><br><span class="line"><span class="comment">#行首与行尾</span></span><br><span class="line">Home End</span><br><span class="line"><span class="comment">#显示行号</span></span><br><span class="line">:<span class="built_in">set</span> number<span class="comment">#按两次G可以跳至末尾</span></span><br></pre></td></tr></table></figure><h2 id="部分Windows命令"><a href="#部分Windows命令" class="headerlink" title="部分Windows命令"></a>部分Windows命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重置winsock目录</span></span><br><span class="line">netsh winsock reset</span><br><span class="line"><span class="comment">#从github克隆项目(Linux也适用)</span></span><br><span class="line">git clone 项目地址</span><br><span class="line"><span class="comment">#推广项目到heroku时</span></span><br><span class="line">git init <span class="comment">#初始化一个空仓库</span></span><br><span class="line">git add . <span class="comment">#向仓库中添加未忽略的文件</span></span><br><span class="line">git commit -am <span class="string">&quot;message&quot;</span> <span class="comment">#提交修改过的文件</span></span><br><span class="line">git status <span class="comment">#查询当前分支</span></span><br><span class="line">heroku login <span class="comment">#登录heroku</span></span><br><span class="line">heroku create <span class="comment">#在heroku创建空项目</span></span><br><span class="line">git push heroku master <span class="comment">#推送个人项目到heroku或者推送修改</span></span><br><span class="line">heroku ps <span class="comment">#核实服务器是否启动</span></span><br><span class="line">heroku <span class="built_in">open</span> <span class="comment">#访问项目地址</span></span><br><span class="line">heroku run bash <span class="comment">#使用Linux管理heroku</span></span><br><span class="line">heroku run python manage.py migrate <span class="comment">#迁移数据,其余命令也类似</span></span><br><span class="line">heroku apps:rename xxx <span class="comment">#为自己的app修改一个更好记的URL地址</span></span><br><span class="line">heroku apps:destroy --app appname <span class="comment">#删除heroku项目</span></span><br><span class="line"><span class="comment">#使用SC创建和删除Windows服务</span></span><br><span class="line"><span class="comment">#创建（“=”后面需要空格,start= &quot;auto&quot;代表自启动,默认为demand(手动)）</span></span><br><span class="line">sc create <span class="string">&quot;ServiceName&quot;</span> binPath= <span class="string">&quot;/path/xxx.exe&quot;</span> displayName= <span class="string">&quot;DisplayName&quot;</span> strat= <span class="string">&quot;auto&quot;</span></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">sc delete ServiceName</span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">sc stop ServiceName</span><br></pre></td></tr></table></figure><h2 id="ffmpeg操作命令"><a href="#ffmpeg操作命令" class="headerlink" title="ffmpeg操作命令"></a>ffmpeg操作命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#转码</span></span><br><span class="line">ffmpeg -i xxx.mp3 xxx.flac</span><br><span class="line">ffmpeg -i xxx.m4s xxx.mp4</span><br></pre></td></tr></table></figure><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动MongoDB服务</span></span><br><span class="line">net start MongoDB</span><br><span class="line"><span class="comment">#关闭MongoDB服务</span></span><br><span class="line">net stop MongoDB</span><br><span class="line"><span class="comment">#登录(未设置auth时)</span></span><br><span class="line">mongo</span><br><span class="line"><span class="comment">#登录(配置文件中设置auth为True时)</span></span><br><span class="line">mongo -u user -p password localhost:<span class="number">27017</span>/admin</span><br><span class="line"><span class="comment">#查询用户</span></span><br><span class="line">use admin</span><br><span class="line">db.system.users.find()</span><br><span class="line"><span class="comment">#插入一条</span></span><br><span class="line">db.students.insert(&#123;<span class="string">&quot;&quot;</span>:<span class="string">&quot;&quot;</span>&#125;)</span><br><span class="line"><span class="comment">#切换数据库</span></span><br><span class="line">use students</span><br><span class="line"><span class="comment">#删除用户</span></span><br><span class="line">db.dropUser(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">#创建用户</span></span><br><span class="line">db.createUser(user:<span class="string">&quot;&quot;</span>,pwd:<span class="string">&quot;&quot;</span>,roles:[&#123;&#125;,&#123;&#125;])</span><br><span class="line"><span class="comment">#查看所有数据库</span></span><br><span class="line">show dbs</span><br><span class="line"><span class="comment">#查看当前数据库所有表单</span></span><br><span class="line">show tables</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>证件照更换背景</title>
      <link href="/2020/07/09/%E8%AF%81%E4%BB%B6%E7%85%A7%E6%9B%B4%E6%8D%A2%E8%83%8C%E6%99%AF/"/>
      <url>/2020/07/09/%E8%AF%81%E4%BB%B6%E7%85%A7%E6%9B%B4%E6%8D%A2%E8%83%8C%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Python处理你的证件照"><a href="#使用Python处理你的证件照" class="headerlink" title="使用Python处理你的证件照"></a>使用Python处理你的证件照</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> removebg <span class="keyword">import</span> RemoveBg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_matting</span>(<span class="params">old_image_path,new_image_path,api_key,colors</span>):</span></span><br><span class="line">    rmbg = RemoveBg(api_key,<span class="string">&#x27;error.log&#x27;</span>)</span><br><span class="line">    rmbg.remove_background_from_img_file(old_image_path)</span><br><span class="line"></span><br><span class="line">    parent_path = os.path.dirname(old_image_path)</span><br><span class="line">    old_image_name = os.path.split(old_image_path)[-<span class="number">1</span>]</span><br><span class="line">    no_bg_image_name = old_image_name + <span class="string">&#x27;_no_bg.png&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> no_bg_image_name <span class="keyword">in</span> os.listdir(parent_path):</span><br><span class="line">        no_bg_image_path = parent_path + <span class="string">&quot;/&quot;</span> + no_bg_image_name</span><br><span class="line">        no_bg_image = Image.<span class="built_in">open</span>(no_bg_image_path)</span><br><span class="line">        x,y = no_bg_image.size</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> color <span class="keyword">in</span> colors:</span><br><span class="line">                new_image = Image.new(<span class="string">&#x27;RGBA&#x27;</span>,no_bg_image.size,color = color)</span><br><span class="line">                new_image.paste(no_bg_image,(<span class="number">0</span>,<span class="number">0</span>,x,y),no_bg_image)</span><br><span class="line">                path = parent_path + <span class="string">&quot;/&quot;</span> + old_image_name + <span class="string">&#x27;_&#x27;</span> + color + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">                new_image.save(path)</span><br><span class="line">            os.remove(no_bg_image_path)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">API可在www.remove.bg/zh注册后免费获取</span></span><br><span class="line"><span class="string">个人用户每月可调用50次</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    api_key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#输入你的照片或图片路径，要具体到文件名</span></span><br><span class="line">    old_image_path = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#输出文件路径，到文件夹即可</span></span><br><span class="line">    new_image_path = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    colors = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;white&#x27;</span>]</span><br><span class="line">    image_matting(old_image_path,new_image_path,api_key,colors)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取唯一图库高清壁纸</title>
      <link href="/2020/07/09/%E7%88%AC%E5%8F%96%E5%94%AF%E4%B8%80%E5%9B%BE%E5%BA%93%E9%AB%98%E6%B8%85%E5%A3%81%E7%BA%B8/"/>
      <url>/2020/07/09/%E7%88%AC%E5%8F%96%E5%94%AF%E4%B8%80%E5%9B%BE%E5%BA%93%E9%AB%98%E6%B8%85%E5%A3%81%E7%BA%B8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用到的包</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os,re</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建目标文件夹</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;图片/weiyi&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;图片/weiyi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#网站主要url</span></span><br><span class="line">URL = <span class="string">&#x27;https://www.mmonly.cc/gqbz/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="comment">#获取网页数据</span></span><br><span class="line">    req = requests.get(url=URL, headers=headers)</span><br><span class="line">    req.encoding = req.apparent_encoding</span><br><span class="line">    html = req.text</span><br><span class="line">    <span class="comment">#用BeautifulSoup抓取网页数据</span></span><br><span class="line">    bf = bs(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    photos = bf.find(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&quot;Clbc_Game_l_a&quot;</span>).find_all(<span class="string">&#x27;a&#x27;</span>,target = <span class="string">&#x27;_blank&#x27;</span>)</span><br><span class="line">    <span class="comment">#循环获取图库地址并保存壁纸</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(photos)):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            parse_photo(photos,i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_photo</span>(<span class="params">photos,i</span>):</span></span><br><span class="line">    j = <span class="number">2</span></span><br><span class="line">    <span class="comment">#获取图库地址</span></span><br><span class="line">    photo = photos[i]</span><br><span class="line">    url = photo.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    p_h = requests.get(url = url,headers = headers)</span><br><span class="line">    p_h.encoding = p_h.apparent_encoding</span><br><span class="line">    text = p_h.text</span><br><span class="line">    <span class="comment">#获取第二张到最后一张的url特征</span></span><br><span class="line">    pages = get_pages(text)</span><br><span class="line">    <span class="comment">#创建图库路径并保存第一张</span></span><br><span class="line">    path = get_path(photo,text)</span><br><span class="line">    <span class="comment">#从第二张开始保存</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> pages:</span><br><span class="line">        <span class="keyword">if</span> j &lt;= <span class="number">10</span>:</span><br><span class="line">            <span class="comment">#保存壁纸</span></span><br><span class="line">            save_photo(url,page,j,path)</span><br><span class="line">            <span class="comment">#这个j是为了方便命名</span></span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pages</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="comment">#利用正则表达式提取信息</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&quot;&lt;li&gt;&lt;a\shref=.*?&gt;\d&#123;1,2&#125;&lt;&quot;</span>)</span><br><span class="line">    pages = re.findall(pattern,text)</span><br><span class="line">    <span class="comment">#返回特征信息</span></span><br><span class="line">    <span class="keyword">return</span> pages</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_path</span>(<span class="params">photo,text</span>):</span></span><br><span class="line">    bf = bs(text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment">#获取第一张壁纸的网页地址</span></span><br><span class="line">    imgs = bf.find(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&quot;photo&quot;</span>).find_all(<span class="string">&#x27;a&#x27;</span>,class_ = <span class="string">&#x27;down-btn&#x27;</span>)</span><br><span class="line">    img_url = imgs[<span class="number">0</span>].get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="comment">#创建第一张壁纸所属图库路径</span></span><br><span class="line">    path = <span class="string">&#x27;图片/weiyi/&#x27;</span> + photo.img.get(<span class="string">&#x27;alt&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        os.mkdir(path)</span><br><span class="line">    <span class="comment">#保存第一张</span></span><br><span class="line">    filename = <span class="string">&#x27;1&#x27;</span> + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    request.urlretrieve(img_url,path + <span class="string">&#x27;/&#x27;</span> + filename)</span><br><span class="line">    <span class="comment">#返回图库路径</span></span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_photo</span>(<span class="params">url,page,j,path</span>):</span></span><br><span class="line">    <span class="comment">#构建壁纸所在网页的url</span></span><br><span class="line">    url = url[<span class="number">0</span>:<span class="number">32</span>] + page[<span class="number">13</span>:-<span class="number">4</span>]</span><br><span class="line">    <span class="comment">#从网页中获取壁纸地址</span></span><br><span class="line">    ph = requests.get(url = url,headers = headers)</span><br><span class="line">    ph.encoding = ph.apparent_encoding</span><br><span class="line">    bf = bs(ph.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    imgs = bf.find(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&quot;photo&quot;</span>).find_all(<span class="string">&#x27;a&#x27;</span>,class_ = <span class="string">&#x27;down-btn&#x27;</span>)</span><br><span class="line">    img_url = imgs[<span class="number">0</span>].get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="comment">#保存壁纸到其所属图库路径</span></span><br><span class="line">    filename = <span class="built_in">str</span>(j) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    request.urlretrieve(img_url,path + <span class="string">&#x27;/&#x27;</span> + filename)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;begin&#x27;</span>)</span><br><span class="line">    run()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取猫眼TOP100</title>
      <link href="/2020/07/09/%E7%88%AC%E5%8F%96%E7%8C%AB%E7%9C%BCTOP100/"/>
      <url>/2020/07/09/%E7%88%AC%E5%8F%96%E7%8C%AB%E7%9C%BCTOP100/</url>
      
        <content type="html"><![CDATA[<h2 id="爬取猫眼电影100榜"><a href="#爬取猫眼电影100榜" class="headerlink" title="爬取猫眼电影100榜"></a>爬取猫眼电影100榜</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re,os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time,openpyxl</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span>(<span class="params">url,headers</span>):</span></span><br><span class="line">    r = requests.get(url,headers = headers)</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_data</span>(<span class="params">x,html</span>):</span></span><br><span class="line">    pattern1 = re.<span class="built_in">compile</span>(<span class="string">&#x27;&quot;\stitle=&quot;.*?&quot;\sclass&#x27;</span>)</span><br><span class="line">    data = re.findall(pattern1,html)</span><br><span class="line">    <span class="comment">#print(data)</span></span><br><span class="line">    pattern2 = re.<span class="built_in">compile</span>(<span class="string">&#x27;&gt;\d&#123;1,3&#125;\.?&lt;&#x27;</span>,re.S)</span><br><span class="line">    score = re.findall(pattern2,html)[<span class="number">0</span>:<span class="number">30</span>]</span><br><span class="line">    item = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        item.append(data[i][<span class="number">9</span>:-<span class="number">7</span>])</span><br><span class="line">        i *= <span class="number">3</span></span><br><span class="line">        item.append(score[i][<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">        item.append(score[i+<span class="number">1</span>][<span class="number">1</span>:-<span class="number">1</span>] + score[i+<span class="number">2</span>][<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        save_data(x + i,<span class="number">1</span>,item[i*<span class="number">3</span>+<span class="number">1</span>])</span><br><span class="line">        save_data(x + i,<span class="number">2</span>,item[i*<span class="number">3</span>])</span><br><span class="line">        save_data(x + i,<span class="number">3</span>,item[i*<span class="number">3</span>+<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">i,j,u</span>):</span></span><br><span class="line">    ws.cell(i + <span class="number">2</span>,j,value = u)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_images</span>(<span class="params">j,html,headers,data</span>):</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;-src=.*?\s&#x27;</span>)</span><br><span class="line">    url_img = re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(url_img)):</span><br><span class="line">        path = root + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(i + j + <span class="number">1</span>) + <span class="string">&#x27;-&#x27;</span> + data[i][<span class="number">9</span>:-<span class="number">7</span>] + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">                r_img = requests.get(url_img[i][<span class="number">6</span>:-<span class="number">2</span>],headers = headers)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(r_img.content)</span><br><span class="line">                    f.close()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    begin_time = time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))</span><br><span class="line">    urls = [<span class="string">&#x27;https://maoyan.com/board/4?offset=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i * <span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    root = <span class="string">&#x27;maoyan/海报&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;maoyan&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;maoyan&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">        os.mkdir(root)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始爬取：&#x27;</span> + begin_time)</span><br><span class="line">    wb = openpyxl.Workbook()</span><br><span class="line">    ws = wb.active</span><br><span class="line">    ws.cell(<span class="number">1</span>,<span class="number">1</span>,value = <span class="string">&#x27;排名&#x27;</span>)</span><br><span class="line">    ws.cell(<span class="number">1</span>,<span class="number">2</span>,value = <span class="string">&#x27;电影&#x27;</span>)</span><br><span class="line">    ws.cell(<span class="number">1</span>,<span class="number">3</span>,value = <span class="string">&#x27;评分&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(urls)):</span><br><span class="line">        html = get_html(urls[x],headers)</span><br><span class="line">        data = view_data(x*<span class="number">10</span>,html)</span><br><span class="line">        save_images(j,html,headers,data)</span><br><span class="line">        j += <span class="number">10</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    wb.save(<span class="string">&#x27;maoyan/TOP100榜.xlsx&#x27;</span>)</span><br><span class="line">    end_time = time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬取完毕：&#x27;</span> + end_time)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matlab处理三维点云</title>
      <link href="/2020/07/09/matlab%E5%A4%84%E7%90%86%E4%B8%89%E7%BB%B4%E7%82%B9%E4%BA%91/"/>
      <url>/2020/07/09/matlab%E5%A4%84%E7%90%86%E4%B8%89%E7%BB%B4%E7%82%B9%E4%BA%91/</url>
      
        <content type="html"><![CDATA[<h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h2><p>使用matlab读取三维点云，并获取其中点的空间坐标，并截取某个平面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">format long;</span><br><span class="line">j = 0;k = 0;n = 0;</span><br><span class="line">sign = 0;temp = 0;</span><br><span class="line">T = zeros(1,1);</span><br><span class="line">A = pcread(&#x27;teapot.ply&#x27;);</span><br><span class="line">figure(1);</span><br><span class="line">pcshow(A);</span><br><span class="line">pause(1);</span><br><span class="line">B = A.Location;</span><br><span class="line">m = length(B);</span><br><span class="line">for i = 1:m</span><br><span class="line">    s = 0;t = i;</span><br><span class="line">    for j = 1:m</span><br><span class="line">        if B(i,3) == B(j,3)</span><br><span class="line">            s = s + 1;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    if s &gt;= sign</span><br><span class="line">        k = k + 1;</span><br><span class="line">        T(k,1) = t;</span><br><span class="line">        sign = s;</span><br><span class="line">        temp = t;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">c = randperm(k,1);</span><br><span class="line">z = T(c,1);</span><br><span class="line">flag = B(z,3);</span><br><span class="line">C=zeros(sign,2);</span><br><span class="line">for i = 1:m</span><br><span class="line">    if B(i,3) == flag</span><br><span class="line">        n = n + 1;</span><br><span class="line">        C(n,1) = B(i,1);</span><br><span class="line">        C(n,2) = B(i,2);</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">avg = mean(C);</span><br><span class="line">figure(2);</span><br><span class="line">scatter(C(:,1),C(:,2),&#x27;c.&#x27;);</span><br><span class="line">pause(1);</span><br><span class="line">fprintf(&#x27;在第%d行，第3列取定Z值\n\n&#x27;,z);</span><br><span class="line">fprintf(&#x27;与之在同一平面的有%d个点\n\n&#x27;,sign);</span><br><span class="line">fprintf(&#x27;在该行所取的Z值为:\n&#x27;);</span><br><span class="line">disp(flag);</span><br><span class="line">fprintf(&#x27;平面的平均坐标值为:\n&#x27;)</span><br><span class="line">disp(avg);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>上云有感</title>
      <link href="/2020/07/09/%E4%B8%8A%E4%BA%91%E6%9C%89%E6%84%9F/"/>
      <url>/2020/07/09/%E4%B8%8A%E4%BA%91%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="感慨一下"><a href="#感慨一下" class="headerlink" title="感慨一下"></a>感慨一下</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>从去年3月份左右开始接触Python，到12月份差不多学完了《Python从入门到实践》这本书，但是有两个工作一直没有完成，一个是把Python外星人入侵游戏打包，另外一个是把Python的学习笔记项目部署到heroku，当然，到现在这两份工作都已经完成，而且还学会了一些爬虫知识。</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>后来，我没事的时候，试着注册了一下github，这也算是打开了新世界的大门吧，注册的第一天就收获了几份大礼，首先是server酱，一个微信提醒程序，项目来自<a href="http://sc.ftqq.com/" title="方糖">方糖</a> ，使用github帐号登录即可获取自己的专属SCKEY。其次是一份网易云自动打卡服务，项目来自<a href="https://github.com/ZainCheung/netease-cloud" title="github">github</a>，如有需要可以参考作者的帮助文档自行搭建，还有就是本站的源码，感谢几位作者开源。</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>如果您也在尝试建立自己的网站，遇到一些问题解决不了，欢迎联系我的个人邮箱<a href="mailto:&#x31;&#48;&#54;&#49;&#x33;&#50;&#49;&#56;&#52;&#56;&#64;&#113;&#113;&#46;&#x63;&#x6f;&#109;">&#x31;&#48;&#54;&#49;&#x33;&#50;&#49;&#56;&#52;&#56;&#64;&#113;&#113;&#46;&#x63;&#x6f;&#109;</a>，共同学习交流。</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>最后，希望自己能在这条兴趣之路上走下去，把自己大学四年荒废的时光补回来！</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
